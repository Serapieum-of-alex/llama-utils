{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"llama-utils","text":"<p>LlamaIndex utility package</p> <p> </p> <p> </p>"},{"location":"index.html#current-release-info","title":"Current release info","text":"Name Downloads Version Platforms"},{"location":"index.html#llama-utils-large-language-model-utility-package","title":"llama-utils - Large Language Model Utility Package","text":"<p>llama-utils is a large language model utility package</p> <p>Full Documentation Conda-forge feedstock</p>"},{"location":"index.html#main-features","title":"Main Features","text":"<ul> <li>llama-index</li> </ul>"},{"location":"index.html#package-overview","title":"Package Overview","text":"<pre><code>graph TB\n    Package[llama-utils]\n    Package --&gt; SubPackage1[Indexing]\n    Package --&gt; SubPackage3[Storage]\n    SubPackage1 --&gt; Module1[index_manager.py]\n    SubPackage1 --&gt; Module2[custom_index.py]\n    SubPackage3 --&gt; Module5[storage.py]\n    SubPackage3 --&gt; Module6[config_loader.py]</code></pre> <p>complete overview of the design and architecture here</p>"},{"location":"index.html#installing-llama-utils","title":"Installing llama-utils","text":"<p>Installing <code>llama-utils</code> from the <code>conda-forge</code> channel can be achieved by:</p> <pre><code>conda install -c conda-forge llama-utils=0.2.0\n</code></pre> <p>It is possible to list all the versions of <code>llama-utils</code> available on your platform with:</p> <pre><code>conda search llama-utils --channel conda-forge\n</code></pre>"},{"location":"index.html#install-from-github","title":"Install from GitHub","text":"<p>to install the last development to time, you can install the library from GitHub</p> <pre><code>pip install git+https://github.com/Serapieum-of-alex/llama-utils\n</code></pre>"},{"location":"index.html#pip","title":"pip","text":"<p>to install the last release, you can easily use pip</p> <pre><code>pip install llama-utils==0.2.0\n</code></pre>"},{"location":"index.html#quick-start","title":"Quick start","text":"<ul> <li>First download ollama from here ollama and install it.</li> <li>Then run the following command to pull the <code>llama3</code> model <pre><code>ollama pull llama3\n</code></pre></li> <li>Then run ollama server (if you get an error, check the errors section below to solve it) <pre><code>ollama serve\n</code></pre> Now you can use the <code>llama-utils</code> package to interact with the <code>ollama</code> server</li> </ul> <pre><code>from llama_utils.retrieval.storage import Storage\nSTORAGE_DIR= \"examples/data/llama3\"\nstorage = Storage.create()\ndata_path = \"examples/data/essay\"\ndocs = storage.read_documents(data_path)\nstorage.add_documents(docs)\nstorage.save(STORAGE_DIR)\n</code></pre>"},{"location":"change-log.html","title":"0.1.0 (2025-01-25)","text":"<ul> <li>initial design</li> </ul>"},{"location":"change-log.html#020-2025-01-24","title":"0.2.0 (2025-01-24)","text":""},{"location":"change-log.html#dev","title":"Dev","text":"<ul> <li>Setup mkdocs</li> <li>Take llm models and embedding models dependencies out of the main package dependencies.</li> </ul>"},{"location":"change-log.html#030-2025-02-05","title":"0.3.0 (2025-02-05)","text":""},{"location":"change-log.html#models","title":"models","text":"<ul> <li>Add support for huggingface llm models <code>LLMModel</code></li> </ul>"},{"location":"change-log.html#0-2025-02-","title":"0.. (2025-02-*)","text":""},{"location":"change-log.html#storage","title":"Storage","text":"<ul> <li>differentiate between the <code>document_metadata</code> and the <code>node_metadata</code> in the <code>Storage</code> class, to be merged in the future.</li> </ul>"},{"location":"design-architecture-diagrams.html","title":"Design and Architecture Diagrams","text":""},{"location":"design-architecture-diagrams.html#1-class-diagram","title":"1. Class Diagram","text":"<pre><code>classDiagram\n    class IndexManager {\n        +List~str~ ids\n        +List~CustomIndex~ indexes\n        +load_from_storage(storage: Storage) IndexManager\n        +create_from_storage(storage: Storage) IndexManager\n    }\n    class CustomIndex {\n        +VectorStoreIndex index\n        +IndexDict metadata\n        +List~str~ doc_ids\n        +str id\n        +create_from_documents(document: List~Union~Document, str~, generate_id: bool) CustomIndex\n        +create_from_nodes(nodes: List~TextNode~) CustomIndex\n    }\n\n    class VisionModel {\n        +List~str~ images\n        +str prompt_template\n        +encode_image(image: np.ndarray, image_format: str) str\n        +encode_images() List~str~\n        +trigger_model(max_tokens: int, temperature: float, detail: str) str\n        +to_markdown(path: str)\n    }\n    class Storage {\n        +StorageContext store\n        +BaseDocumentStore docstore\n        +BaseIndexStore index_store\n        +vector_store\n        +save(store_dir: str)\n        +load(store_dir: str) Storage\n        +add_documents(docs: Sequence~Union~Document, TextNode~, generate_id: bool, update: bool)\n        +read_documents(path: str) List~Union~Document, TextNode~\n    }\n    class ConfigLoader {\n        +Settings settings\n        +llm\n        +embedding\n    }\n    class Logger {\n        +__init__(name: str, level: int, file_name: str)\n    }\n    class StorageNotFoundError {\n        +__init__(error_message: str)\n    }\n    IndexManager --&gt; CustomIndex\n    IndexManager --&gt; Storage\n    CustomIndex --&gt; VectorStoreIndex\n    CustomIndex --&gt; BasePydanticVectorStore\n    CustomIndex --&gt; Document\n    CustomIndex --&gt; TextNode\n    VisionModel --&gt; AzureOpenAI\n    VisionModel --&gt; ConfigLoader\n    VisionModel --&gt; Storage\n    Storage --&gt; StorageContext\n    Storage --&gt; Document\n    Storage --&gt; TextNode\n    ConfigLoader --&gt; Settings\n    ConfigLoader --&gt; HuggingFaceEmbedding\n    Logger --&gt; logging\n    StorageNotFoundError --&gt; Exception</code></pre>"},{"location":"design-architecture-diagrams.html#visibility-symbols-in-mermaid-class-diagrams","title":"Visibility Symbols in Mermaid Class Diagrams","text":"<ul> <li><code>+</code> : Public \u2013 The member is accessible from outside the class.</li> <li><code>-</code> : Private \u2013 The member is accessible only within the class.</li> <li><code>#</code> : Protected \u2013 The member is accessible within the class and its subclasses.</li> </ul>"},{"location":"design-architecture-diagrams.html#2-module-dependency-diagram","title":"2. Module Dependency Diagram","text":"<pre><code>graph TD\n    IndexManager --&gt;|Imports| CustomIndex\n    IndexManager --&gt;|Imports| Storage\n    CustomIndex --&gt;|Imports| VectorStoreIndex\n    CustomIndex --&gt;|Imports| Document\n    CustomIndex --&gt;|Imports| TextNode\n    VisionModel --&gt;|Imports| AzureOpenAI\n    VisionModel --&gt;|Uses| ConfigLoader\n    Storage --&gt;|Uses| StorageContext\n    Storage --&gt;|Uses| Document\n    ConfigLoader --&gt;|Uses| HuggingFaceEmbedding\n    ConfigLoader --&gt;|Uses| OllamaLLM\n    Logger --&gt;|Depends| logging</code></pre>"},{"location":"design-architecture-diagrams.html#3-sequence-diagram","title":"3. Sequence Diagram","text":"<pre><code>sequenceDiagram\n    actor User\n    participant IndexManager\n    participant CustomIndex\n    participant Storage\n    User -&gt;&gt; IndexManager: Create IndexManager\n    IndexManager -&gt;&gt; Storage: Load from storage\n    Storage -&gt;&gt; IndexManager: Return data\n    IndexManager -&gt;&gt; CustomIndex: Create CustomIndex\n    CustomIndex -&gt;&gt; IndexManager: Return index object</code></pre>"},{"location":"design-architecture-diagrams.html#4-component-diagram","title":"4. Component Diagram","text":"<pre><code>graph TD\n    subgraph Application\n        IndexManager\n        CustomIndex\n        Storage\n    end\n    subgraph ExternalSystems\n        AzureOpenAI\n        DocumentStore\n    end\n    IndexManager --&gt;|Communicates| CustomIndex\n    IndexManager --&gt;|Uses| Storage\n    Storage --&gt;|Stores| DocumentStore\n    VisionModel --&gt;|API| AzureOpenAI</code></pre>"},{"location":"design-architecture-diagrams.html#5-deployment-diagram","title":"5. Deployment Diagram","text":"<pre><code>graph TD\n    user[User System]\n    app[Python Application]\n    storage[Storage Directory]\n    azure[Azure OpenAI Service]\n    user --&gt; app\n    app --&gt; storage\n    app --&gt; azure</code></pre>"},{"location":"design-architecture-diagrams.html#6data-flow-diagram","title":"6.Data Flow Diagram","text":"<pre><code>graph LR\n    Input[User Input] --&gt; Process[IndexManager]\n    Process --&gt; StorageSystem[Storage]\n    StorageSystem --&gt; Output[Retrieved Data]</code></pre>"},{"location":"design-architecture-diagrams.html#7deployment-diagram","title":"7.Deployment Diagram","text":"<pre><code>graph TD\n    User --&gt;|Requests| PythonApp[Python Application]\n    PythonApp --&gt;|Reads/Writes| Storage[Local/Cloud Storage]\n    PythonApp --&gt;|Interacts| Azure[Azure OpenAI Services]</code></pre>"},{"location":"design-architecture-diagrams.html#8state-diagram","title":"8.State Diagram","text":"<pre><code>stateDiagram-v2\n    [*] --&gt; Initialized\n    Initialized --&gt; LoadingIndexes\n    LoadingIndexes --&gt; IndexReady: Success\n    LoadingIndexes --&gt; [*]: Failure\n    IndexReady --&gt; [*]</code></pre>"},{"location":"design-architecture-diagrams.html#9activity-diagram","title":"9.Activity Diagram","text":"<pre><code>flowchart TD\n    Start --&gt; LoadIndexes\n    LoadIndexes --&gt; ProcessData\n    ProcessData --&gt; GenerateEmbeddings\n    GenerateEmbeddings --&gt; End</code></pre>"},{"location":"design-architecture-diagrams.html#10package-diagram","title":"10.Package Diagram","text":"<pre><code>graph TB\n    Package[llama-utils]\n    Package --&gt; SubPackage1[Indexing]\n    Package --&gt; SubPackage3[Storage]\n    SubPackage1 --&gt; Module1[index_manager.py]\n    SubPackage1 --&gt; Module2[custom_index.py]\n    SubPackage3 --&gt; Module5[storage.py]\n    SubPackage3 --&gt; Module6[config_loader.py]</code></pre>"},{"location":"design-architecture-diagrams.html#11network-diagram","title":"11.Network Diagram","text":"<pre><code>graph TD\n    Client --&gt; API[REST API]\n    API --&gt; Storage[Data Storage]\n    API --&gt; Service[Azure OpenAI]</code></pre>"},{"location":"api/index_manager.html","title":"Index Manager","text":""},{"location":"api/index_manager.html#index-manager_1","title":"Index Manager","text":""},{"location":"api/index_manager.html#llama_utils.indexing.index_manager","title":"<code>llama_utils.indexing.index_manager</code>","text":"<p>Index manager module.</p>"},{"location":"api/index_manager.html#llama_utils.indexing.index_manager.IndexManager","title":"<code>IndexManager</code>","text":"<p>A class to manage multiple indexes, handling updates, deletions, and retrieval operations.</p> Source code in <code>src/llama_utils/indexing/index_manager.py</code> <pre><code>class IndexManager:\n    \"\"\"A class to manage multiple indexes, handling updates, deletions, and retrieval operations.\"\"\"\n\n    def __init__(self, ids: List[str], indexes: List[BaseIndex]):\n        \"\"\"Initialize the index manager.\"\"\"\n        self._indexes = [CustomIndex(index) for index in indexes]\n        self._ids = ids\n\n    def __str__(self):\n        \"\"\"String representation of the index manager.\"\"\"\n        return f\"\"\"\n            ids={self.ids},\n            indexes={self.indexes})\n        \"\"\"\n\n    @classmethod\n    def load_from_storage(cls, storage: Storage) -&gt; \"IndexManager\":\n        \"\"\"Read indexes from storage.\n\n        Parameters\n        ----------\n        storage : Storage\n            The storage object to read the indexes from.\n\n        Returns\n        -------\n        IndexManager\n            The index manager object\n\n        Examples\n        --------\n        First we need to load the `ConfigLoader` to define the embedding model that was used to create the embeddings\n        in the index.\n\n        ```python\n        &gt;&gt;&gt; from llama_utils.utils.config_loader import ConfigLoader\n        &gt;&gt;&gt; config_loader = ConfigLoader()  # doctest: +SKIP\n\n        ```\n\n        Next, we load the storage object and the index manager object.\n\n        ```python\n        &gt;&gt;&gt; storage_dir = \"examples/paul-graham-essay-storage\"\n        &gt;&gt;&gt; storage_context = Storage.load(storage_dir)\n        &gt;&gt;&gt; index_manager = IndexManager.load_from_storage(storage_context) # doctest: +SKIP\n        &gt;&gt;&gt; print(index_manager) # doctest: +SKIP\n        &lt;BLANKLINE&gt;\n            ids=['8d57e294-fd17-43c9-9dec-a12aa7ea0751', 'edd0d507-9100-4cfb-8002-2267449c6668'],\n            indexes=[\n                &lt;llama_index.core.indices.vector_store_index.VectorStoreIndex object at 0x7f9f2a1e9d90&gt;,\n                &lt;llama_index.core.indices.vector_store_index.VectorStoreIndex object at 0x7f9f2a1e9e50&gt;\n            ])\n        &lt;BLANKLINE&gt;\n        ```\n        \"\"\"\n        storage = storage.store\n        index_instructs = storage.index_store.index_structs()\n        index_ids = [index_i.index_id for index_i in index_instructs]\n        indexes = load_indices_from_storage(storage)\n        return cls(index_ids, indexes)\n\n    @property\n    def indexes(self) -&gt; List[CustomIndex]:\n        \"\"\"Indexes.\"\"\"\n        return self._indexes\n\n    @indexes.setter\n    def indexes(self, indexes: List[BaseIndex]):\n        self._indexes = indexes\n\n    @property\n    def ids(self) -&gt; List[str]:\n        \"\"\"Index IDs.\"\"\"\n        return self._ids\n\n    @classmethod\n    def create_from_storage(cls, storage: Storage) -&gt; \"IndexManager\":\n        \"\"\"Create a new index.\n\n        Parameters\n        ----------\n        storage : Storage\n            The storage object to create the index from.\n\n        Returns\n        -------\n        IndexManager\n            The new index manager object\n        \"\"\"\n        docstore = storage.docstore\n        index = VectorStoreIndex(\n            list(docstore.docs.values()), storage_context=storage.store\n        )\n        return cls([index.index_id], [index])\n</code></pre>"},{"location":"api/index_manager.html#llama_utils.indexing.index_manager.IndexManager.ids","title":"<code>ids: List[str]</code>  <code>property</code>","text":"<p>Index IDs.</p>"},{"location":"api/index_manager.html#llama_utils.indexing.index_manager.IndexManager.indexes","title":"<code>indexes: List[CustomIndex]</code>  <code>property</code> <code>writable</code>","text":"<p>Indexes.</p>"},{"location":"api/index_manager.html#llama_utils.indexing.index_manager.IndexManager.__init__","title":"<code>__init__(ids: List[str], indexes: List[BaseIndex])</code>","text":"<p>Initialize the index manager.</p> Source code in <code>src/llama_utils/indexing/index_manager.py</code> <pre><code>def __init__(self, ids: List[str], indexes: List[BaseIndex]):\n    \"\"\"Initialize the index manager.\"\"\"\n    self._indexes = [CustomIndex(index) for index in indexes]\n    self._ids = ids\n</code></pre>"},{"location":"api/index_manager.html#llama_utils.indexing.index_manager.IndexManager.__str__","title":"<code>__str__()</code>","text":"<p>String representation of the index manager.</p> Source code in <code>src/llama_utils/indexing/index_manager.py</code> <pre><code>def __str__(self):\n    \"\"\"String representation of the index manager.\"\"\"\n    return f\"\"\"\n        ids={self.ids},\n        indexes={self.indexes})\n    \"\"\"\n</code></pre>"},{"location":"api/index_manager.html#llama_utils.indexing.index_manager.IndexManager.create_from_storage","title":"<code>create_from_storage(storage: Storage) -&gt; IndexManager</code>  <code>classmethod</code>","text":"<p>Create a new index.</p> <p>Parameters:</p> Name Type Description Default <code>storage</code> <code>Storage</code> <p>The storage object to create the index from.</p> required <p>Returns:</p> Type Description <code>IndexManager</code> <p>The new index manager object</p> Source code in <code>src/llama_utils/indexing/index_manager.py</code> <pre><code>@classmethod\ndef create_from_storage(cls, storage: Storage) -&gt; \"IndexManager\":\n    \"\"\"Create a new index.\n\n    Parameters\n    ----------\n    storage : Storage\n        The storage object to create the index from.\n\n    Returns\n    -------\n    IndexManager\n        The new index manager object\n    \"\"\"\n    docstore = storage.docstore\n    index = VectorStoreIndex(\n        list(docstore.docs.values()), storage_context=storage.store\n    )\n    return cls([index.index_id], [index])\n</code></pre>"},{"location":"api/index_manager.html#llama_utils.indexing.index_manager.IndexManager.load_from_storage","title":"<code>load_from_storage(storage: Storage) -&gt; IndexManager</code>  <code>classmethod</code>","text":"<p>Read indexes from storage.</p> <p>Parameters:</p> Name Type Description Default <code>storage</code> <code>Storage</code> <p>The storage object to read the indexes from.</p> required <p>Returns:</p> Type Description <code>IndexManager</code> <p>The index manager object</p> <p>Examples:</p> <p>First we need to load the <code>ConfigLoader</code> to define the embedding model that was used to create the embeddings in the index.</p> <pre><code>&gt;&gt;&gt; from llama_utils.utils.config_loader import ConfigLoader\n&gt;&gt;&gt; config_loader = ConfigLoader()  # doctest: +SKIP\n</code></pre> <p>Next, we load the storage object and the index manager object.</p> <pre><code>&gt;&gt;&gt; storage_dir = \"examples/paul-graham-essay-storage\"\n&gt;&gt;&gt; storage_context = Storage.load(storage_dir)\n&gt;&gt;&gt; index_manager = IndexManager.load_from_storage(storage_context) # doctest: +SKIP\n&gt;&gt;&gt; print(index_manager) # doctest: +SKIP\n&lt;BLANKLINE&gt;\n    ids=['8d57e294-fd17-43c9-9dec-a12aa7ea0751', 'edd0d507-9100-4cfb-8002-2267449c6668'],\n    indexes=[\n        &lt;llama_index.core.indices.vector_store_index.VectorStoreIndex object at 0x7f9f2a1e9d90&gt;,\n        &lt;llama_index.core.indices.vector_store_index.VectorStoreIndex object at 0x7f9f2a1e9e50&gt;\n    ])\n&lt;BLANKLINE&gt;\n</code></pre> Source code in <code>src/llama_utils/indexing/index_manager.py</code> <pre><code>@classmethod\ndef load_from_storage(cls, storage: Storage) -&gt; \"IndexManager\":\n    \"\"\"Read indexes from storage.\n\n    Parameters\n    ----------\n    storage : Storage\n        The storage object to read the indexes from.\n\n    Returns\n    -------\n    IndexManager\n        The index manager object\n\n    Examples\n    --------\n    First we need to load the `ConfigLoader` to define the embedding model that was used to create the embeddings\n    in the index.\n\n    ```python\n    &gt;&gt;&gt; from llama_utils.utils.config_loader import ConfigLoader\n    &gt;&gt;&gt; config_loader = ConfigLoader()  # doctest: +SKIP\n\n    ```\n\n    Next, we load the storage object and the index manager object.\n\n    ```python\n    &gt;&gt;&gt; storage_dir = \"examples/paul-graham-essay-storage\"\n    &gt;&gt;&gt; storage_context = Storage.load(storage_dir)\n    &gt;&gt;&gt; index_manager = IndexManager.load_from_storage(storage_context) # doctest: +SKIP\n    &gt;&gt;&gt; print(index_manager) # doctest: +SKIP\n    &lt;BLANKLINE&gt;\n        ids=['8d57e294-fd17-43c9-9dec-a12aa7ea0751', 'edd0d507-9100-4cfb-8002-2267449c6668'],\n        indexes=[\n            &lt;llama_index.core.indices.vector_store_index.VectorStoreIndex object at 0x7f9f2a1e9d90&gt;,\n            &lt;llama_index.core.indices.vector_store_index.VectorStoreIndex object at 0x7f9f2a1e9e50&gt;\n        ])\n    &lt;BLANKLINE&gt;\n    ```\n    \"\"\"\n    storage = storage.store\n    index_instructs = storage.index_store.index_structs()\n    index_ids = [index_i.index_id for index_i in index_instructs]\n    indexes = load_indices_from_storage(storage)\n    return cls(index_ids, indexes)\n</code></pre>"},{"location":"api/pdf_reader.html","title":"pdf_reader","text":""},{"location":"api/pdf_reader.html#storage","title":"Storage","text":""},{"location":"api/pdf_reader.html#llama_utils.retrieval.pdf_reader","title":"<code>llama_utils.retrieval.pdf_reader</code>","text":"<p>PDF Text Extraction Utilities.</p>"},{"location":"api/pdf_reader.html#llama_utils.retrieval.pdf_reader.DocumentConversionConfig","title":"<code>DocumentConversionConfig</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Configuration for document conversion.</p> Source code in <code>src/llama_utils/retrieval/pdf_reader.py</code> <pre><code>class DocumentConversionConfig(BaseModel):\n    \"\"\"Configuration for document conversion.\"\"\"\n\n    image_resolution_scale: float = Field(\n        2.0, description=\"Scale factor for image resolution.\"\n    )\n    enable_page_images: bool = Field(\n        True, description=\"Enable extraction of full page images.\"\n    )\n    enable_picture_images: bool = Field(\n        True, description=\"Enable extraction of embedded figures.\"\n    )\n</code></pre>"},{"location":"api/pdf_reader.html#llama_utils.retrieval.pdf_reader.DocumentConverter","title":"<code>DocumentConverter</code>","text":"<p>Handle document conversion, defaults to using docling's DocumentConverter.</p> <p>Parameters:</p> Name Type Description Default <code>base_converter</code> <code>Optional[DocumentConverter]</code> <p>Custom document converter instance, by default None, which initializes a default DocumentConverter.</p> <code>None</code> <p>Methods:</p> Name Description <code>convert</code> <p>Converts a PDF file to a Markdown file with extracted images.</p> <p>Examples:</p> <pre><code>- Creating a DocumentConverter instance with default settings:\n&gt;&gt;&gt; from llama_utils.retrieval.pdf_reader import DocumentConverter\n&gt;&gt;&gt; converter = DocumentConverter()\n\n- Creating the DocumentConverter instance with custom settings:\n&gt;&gt;&gt; from llama_utils.retrieval.pdf_reader import DocumentConverter, DocumentConversionConfig\n&gt;&gt;&gt; from docling.document_converter import DocumentConverter as Docling_DocConverter\n&gt;&gt;&gt; from docling.datamodel.pipeline_options import PdfPipelineOptions\n&gt;&gt;&gt; from docling.document_converter import PdfFormatOption\n&gt;&gt;&gt; from docling.datamodel.base_models import InputFormat\n&gt;&gt;&gt; pipeline_options = PdfPipelineOptions()\n&gt;&gt;&gt; pipeline_options.images_scale = 3\n&gt;&gt;&gt; pipeline_options.generate_page_images = True\n&gt;&gt;&gt; pipeline_options.generate_picture_images = True\n&gt;&gt;&gt; base_converter = Docling_DocConverter(\n...     format_options={\n...         InputFormat.PDF: PdfFormatOption(pipeline_options=pipeline_options)\n...     }\n... )\n&gt;&gt;&gt; converter = DocumentConverter(base_converter=base_converter)\n</code></pre> Source code in <code>src/llama_utils/retrieval/pdf_reader.py</code> <pre><code>class DocumentConverter:\n    \"\"\"Handle document conversion, defaults to using docling's DocumentConverter.\n\n    Parameters\n    ----------\n    base_converter : Optional[DocumentConverter], optional\n        Custom document converter instance, by default None, which initializes a default DocumentConverter.\n\n    Methods\n    -------\n    convert(pdf_path)\n        Converts a PDF file to a Markdown file with extracted images.\n\n    Examples\n    --------\n    ```python\n    - Creating a DocumentConverter instance with default settings:\n    &gt;&gt;&gt; from llama_utils.retrieval.pdf_reader import DocumentConverter\n    &gt;&gt;&gt; converter = DocumentConverter()\n\n    - Creating the DocumentConverter instance with custom settings:\n    &gt;&gt;&gt; from llama_utils.retrieval.pdf_reader import DocumentConverter, DocumentConversionConfig\n    &gt;&gt;&gt; from docling.document_converter import DocumentConverter as Docling_DocConverter\n    &gt;&gt;&gt; from docling.datamodel.pipeline_options import PdfPipelineOptions\n    &gt;&gt;&gt; from docling.document_converter import PdfFormatOption\n    &gt;&gt;&gt; from docling.datamodel.base_models import InputFormat\n    &gt;&gt;&gt; pipeline_options = PdfPipelineOptions()\n    &gt;&gt;&gt; pipeline_options.images_scale = 3\n    &gt;&gt;&gt; pipeline_options.generate_page_images = True\n    &gt;&gt;&gt; pipeline_options.generate_picture_images = True\n    &gt;&gt;&gt; base_converter = Docling_DocConverter(\n    ...     format_options={\n    ...         InputFormat.PDF: PdfFormatOption(pipeline_options=pipeline_options)\n    ...     }\n    ... )\n    &gt;&gt;&gt; converter = DocumentConverter(base_converter=base_converter)\n\n    ```\n    \"\"\"\n\n    def __init__(\n        self,\n        base_converter: Optional[Docling_DocConverter] = None,\n        config: DocumentConversionConfig = None,\n    ):\n        \"\"\"Initialize the DocumentConverter instance.\"\"\"\n        self.config = config or DocumentConversionConfig()\n        if base_converter is None:\n            pipeline_options = PdfPipelineOptions()\n            pipeline_options.images_scale = self.config.image_resolution_scale\n            pipeline_options.generate_page_images = self.config.enable_page_images\n            pipeline_options.generate_picture_images = self.config.enable_picture_images\n            self.converter = Docling_DocConverter(\n                format_options={\n                    InputFormat.PDF: PdfFormatOption(pipeline_options=pipeline_options)\n                }\n            )\n        else:\n            self.converter = base_converter\n\n    def convert(self, pdf_path: Path) -&gt; Tuple[Path, Path]:\n        \"\"\"Convert a PDF file to a Markdown file with extracted images as external reference in the file.\n\n        Parameters\n        ----------\n        pdf_path : [Path]\n            Path to the PDF file to be converted.\n\n        Returns\n        -------\n        pdf_path: [Path]\n            Path to the generated Markdown file.\n        images_dir: [Path]\n            Path to the directory containing the extracted images.\n\n        Examples\n        --------\n        ```python\n        &gt;&gt;&gt; from pathlib import Path\n        &gt;&gt;&gt; from llama_utils.retrieval.pdf_reader import DocumentConverter\n        &gt;&gt;&gt; pdf_path = Path(\"examples/data/pdfs/geoscience-paper.pdf\")\n        &gt;&gt;&gt; converter = DocumentConverter()\n        &gt;&gt;&gt; markdown_file, images_dir = converter.convert(pdf_path)  # doctest: +SKIP\n        &gt;&gt;&gt; print(images_dir) # doctest: +SKIP\n        examples/data/pdfs/geoscience-paper_artifacts\n        &gt;&gt;&gt; print(list(images_dir.iterdir())) # doctest: +SKIP\n        [\n            PosixPath('examples/data/pdfs/geoscience-paper_artifacts/image_000000_xyz.png'),\n            PosixPath('examples/data/pdfs/geoscience-paper_artifacts/image_000001_xyz.png')\n        ]\n\n        ```\n\n        Note\n        ----\n        - The markdown file will be saved with the same name as the pdf file but with a `.md` extension.\n        - The markdown file will contain image references to the local files.\n        - The images are saved externally and referenced in the markdown file.\n        - The images are saved in the same directory as the pdf in a subfolder named `&lt;pdf-file-name&gt;_artifacts`.\n        - The images will have names like `image_000000_xyz.png`.\n        \"\"\"\n        if isinstance(pdf_path, str):\n            pdf_path = Path(pdf_path)\n\n        if not pdf_path.exists():\n            raise FileNotFoundError(f\"PDF file not found at {pdf_path}\")\n\n        result = self.converter.convert(pdf_path)\n        md_file = pdf_path.with_suffix(\".md\")\n        result.document.save_as_markdown(md_file, image_mode=ImageRefMode.REFERENCED)\n        images_rdir = md_file.parent / f\"{md_file.stem}{IMAGE_DIR_SUFFIX}\"\n        return md_file, images_rdir\n</code></pre>"},{"location":"api/pdf_reader.html#llama_utils.retrieval.pdf_reader.DocumentConverter.__init__","title":"<code>__init__(base_converter: Optional[Docling_DocConverter] = None, config: DocumentConversionConfig = None)</code>","text":"<p>Initialize the DocumentConverter instance.</p> Source code in <code>src/llama_utils/retrieval/pdf_reader.py</code> <pre><code>def __init__(\n    self,\n    base_converter: Optional[Docling_DocConverter] = None,\n    config: DocumentConversionConfig = None,\n):\n    \"\"\"Initialize the DocumentConverter instance.\"\"\"\n    self.config = config or DocumentConversionConfig()\n    if base_converter is None:\n        pipeline_options = PdfPipelineOptions()\n        pipeline_options.images_scale = self.config.image_resolution_scale\n        pipeline_options.generate_page_images = self.config.enable_page_images\n        pipeline_options.generate_picture_images = self.config.enable_picture_images\n        self.converter = Docling_DocConverter(\n            format_options={\n                InputFormat.PDF: PdfFormatOption(pipeline_options=pipeline_options)\n            }\n        )\n    else:\n        self.converter = base_converter\n</code></pre>"},{"location":"api/pdf_reader.html#llama_utils.retrieval.pdf_reader.DocumentConverter.convert","title":"<code>convert(pdf_path: Path) -&gt; Tuple[Path, Path]</code>","text":"<p>Convert a PDF file to a Markdown file with extracted images as external reference in the file.</p> <p>Parameters:</p> Name Type Description Default <code>pdf_path</code> <code>[Path]</code> <p>Path to the PDF file to be converted.</p> required <p>Returns:</p> Name Type Description <code>pdf_path</code> <code>[Path]</code> <p>Path to the generated Markdown file.</p> <code>images_dir</code> <code>[Path]</code> <p>Path to the directory containing the extracted images.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; from llama_utils.retrieval.pdf_reader import DocumentConverter\n&gt;&gt;&gt; pdf_path = Path(\"examples/data/pdfs/geoscience-paper.pdf\")\n&gt;&gt;&gt; converter = DocumentConverter()\n&gt;&gt;&gt; markdown_file, images_dir = converter.convert(pdf_path)  # doctest: +SKIP\n&gt;&gt;&gt; print(images_dir) # doctest: +SKIP\nexamples/data/pdfs/geoscience-paper_artifacts\n&gt;&gt;&gt; print(list(images_dir.iterdir())) # doctest: +SKIP\n[\n    PosixPath('examples/data/pdfs/geoscience-paper_artifacts/image_000000_xyz.png'),\n    PosixPath('examples/data/pdfs/geoscience-paper_artifacts/image_000001_xyz.png')\n]\n</code></pre> Note <ul> <li>The markdown file will be saved with the same name as the pdf file but with a <code>.md</code> extension.</li> <li>The markdown file will contain image references to the local files.</li> <li>The images are saved externally and referenced in the markdown file.</li> <li>The images are saved in the same directory as the pdf in a subfolder named <code>&lt;pdf-file-name&gt;_artifacts</code>.</li> <li>The images will have names like <code>image_000000_xyz.png</code>.</li> </ul> Source code in <code>src/llama_utils/retrieval/pdf_reader.py</code> <pre><code>def convert(self, pdf_path: Path) -&gt; Tuple[Path, Path]:\n    \"\"\"Convert a PDF file to a Markdown file with extracted images as external reference in the file.\n\n    Parameters\n    ----------\n    pdf_path : [Path]\n        Path to the PDF file to be converted.\n\n    Returns\n    -------\n    pdf_path: [Path]\n        Path to the generated Markdown file.\n    images_dir: [Path]\n        Path to the directory containing the extracted images.\n\n    Examples\n    --------\n    ```python\n    &gt;&gt;&gt; from pathlib import Path\n    &gt;&gt;&gt; from llama_utils.retrieval.pdf_reader import DocumentConverter\n    &gt;&gt;&gt; pdf_path = Path(\"examples/data/pdfs/geoscience-paper.pdf\")\n    &gt;&gt;&gt; converter = DocumentConverter()\n    &gt;&gt;&gt; markdown_file, images_dir = converter.convert(pdf_path)  # doctest: +SKIP\n    &gt;&gt;&gt; print(images_dir) # doctest: +SKIP\n    examples/data/pdfs/geoscience-paper_artifacts\n    &gt;&gt;&gt; print(list(images_dir.iterdir())) # doctest: +SKIP\n    [\n        PosixPath('examples/data/pdfs/geoscience-paper_artifacts/image_000000_xyz.png'),\n        PosixPath('examples/data/pdfs/geoscience-paper_artifacts/image_000001_xyz.png')\n    ]\n\n    ```\n\n    Note\n    ----\n    - The markdown file will be saved with the same name as the pdf file but with a `.md` extension.\n    - The markdown file will contain image references to the local files.\n    - The images are saved externally and referenced in the markdown file.\n    - The images are saved in the same directory as the pdf in a subfolder named `&lt;pdf-file-name&gt;_artifacts`.\n    - The images will have names like `image_000000_xyz.png`.\n    \"\"\"\n    if isinstance(pdf_path, str):\n        pdf_path = Path(pdf_path)\n\n    if not pdf_path.exists():\n        raise FileNotFoundError(f\"PDF file not found at {pdf_path}\")\n\n    result = self.converter.convert(pdf_path)\n    md_file = pdf_path.with_suffix(\".md\")\n    result.document.save_as_markdown(md_file, image_mode=ImageRefMode.REFERENCED)\n    images_rdir = md_file.parent / f\"{md_file.stem}{IMAGE_DIR_SUFFIX}\"\n    return md_file, images_rdir\n</code></pre>"},{"location":"api/pdf_reader.html#llama_utils.retrieval.pdf_reader.Image","title":"<code>Image</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Model for extracted figure data.</p> <p>Parameters:</p> Name Type Description Default <code>figure_number</code> <code>str</code> <p>Figure number and label (e.g., \"Figure 1.\").</p> required <code>caption_text</code> <code>str</code> <p>Caption describing the figure.</p> required <code>image_path</code> <code>Path</code> <p>Path to the extracted image file.</p> required <p>Methods:</p> Name Description <code>read_image_base64</code> <p>Reads the image file and encodes it in Base64 format.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from llama_utils.retrieval.pdf_reader import Image\n&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; im_path = Path(\"examples/data/images/image_000000_0bb3.png\")\n&gt;&gt;&gt; figure_data = Image(\n...     figure_number=\"Figure 1.\", caption_text=\"Sample caption\", image_path=im_path\n... )\n&gt;&gt;&gt; print(figure_data)\nFigure 1. - Sample caption (examples\\data\\images\\image_000000_0bb3.png)\n&gt;&gt;&gt; base64_img = figure_data.read_image_base64()\n&gt;&gt;&gt; print(base64_img) # doctest: +ELLIPSIS\niVBORw0KGgoAAAANSUhEUgAAAtgAAAFSCAIAAABHcj9xAAEAAElEQVR4nOz9B5gcV3YmiF4TJl1571EACt47ggBJ0HuyyW6yvXcyo5FWM/N2nzQa...\n&gt;&gt;&gt; print(figure_data.to_dict()) # doctest: +SKIP\n{'figure_number': 'Figure 1.', 'caption_text': 'Sample caption', 'image_path': 'examples\\data\\images\\image_000000_0bb3.png'}\n</code></pre> Source code in <code>src/llama_utils/retrieval/pdf_reader.py</code> <pre><code>class Image(BaseModel):\n    r\"\"\"Model for extracted figure data.\n\n    Parameters\n    ----------\n    figure_number : str\n        Figure number and label (e.g., \"Figure 1.\").\n    caption_text : str\n        Caption describing the figure.\n    image_path : Path\n        Path to the extracted image file.\n\n    Methods\n    -------\n    read_image_base64()\n        Reads the image file and encodes it in Base64 format.\n\n    Examples\n    --------\n    ```python\n    &gt;&gt;&gt; from llama_utils.retrieval.pdf_reader import Image\n    &gt;&gt;&gt; from pathlib import Path\n    &gt;&gt;&gt; im_path = Path(\"examples/data/images/image_000000_0bb3.png\")\n    &gt;&gt;&gt; figure_data = Image(\n    ...     figure_number=\"Figure 1.\", caption_text=\"Sample caption\", image_path=im_path\n    ... )\n    &gt;&gt;&gt; print(figure_data)\n    Figure 1. - Sample caption (examples\\data\\images\\image_000000_0bb3.png)\n    &gt;&gt;&gt; base64_img = figure_data.read_image_base64()\n    &gt;&gt;&gt; print(base64_img) # doctest: +ELLIPSIS\n    iVBORw0KGgoAAAANSUhEUgAAAtgAAAFSCAIAAABHcj9xAAEAAElEQVR4nOz9B5gcV3YmiF4TJl1571EACt47ggBJ0HuyyW6yvXcyo5FWM/N2nzQa...\n    &gt;&gt;&gt; print(figure_data.to_dict()) # doctest: +SKIP\n    {'figure_number': 'Figure 1.', 'caption_text': 'Sample caption', 'image_path': 'examples\\data\\images\\image_000000_0bb3.png'}\n\n    ```\n    \"\"\"\n\n    figure_number: str = Field(..., description=\"Figure number and label.\")\n    caption_text: str = Field(..., description=\"Caption describing the figure.\")\n    image_path: Path = Field(..., description=\"Path to the extracted image file.\")\n    metadata: Dict[str, str] = Field(\n        {}, description=\"Additional metadata for the figure.\"\n    )\n\n    @field_validator(\"image_path\")\n    @classmethod\n    def validate_image_path(cls, value: Path) -&gt; Path:\n        \"\"\"Ensure the image path exists.\"\"\"\n        if not value.exists():\n            raise ValueError(f\"Image path does not exist: {value}\")\n        return value\n\n    def __str__(self) -&gt; str:\n        \"\"\"Return a string representation of the figure data.\"\"\"\n        return f\"{self.figure_number} - {self.caption_text} ({self.image_path})\"\n\n    def read_image_base64(self) -&gt; str:\n        \"\"\"Reads the image file and encodes it in Base64 format.\"\"\"\n        with open(self.image_path, \"rb\") as f:\n            return base64.b64encode(f.read()).decode(\"utf-8\")\n\n    def to_dict(self) -&gt; Dict[str, str]:\n        \"\"\"Convert the object to a dictionary.\"\"\"\n        return {\n            \"figure_number\": self.figure_number,\n            \"caption_text\": self.caption_text,\n            \"image_path\": str(self.image_path),\n        }\n</code></pre>"},{"location":"api/pdf_reader.html#llama_utils.retrieval.pdf_reader.Image.__str__","title":"<code>__str__() -&gt; str</code>","text":"<p>Return a string representation of the figure data.</p> Source code in <code>src/llama_utils/retrieval/pdf_reader.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return a string representation of the figure data.\"\"\"\n    return f\"{self.figure_number} - {self.caption_text} ({self.image_path})\"\n</code></pre>"},{"location":"api/pdf_reader.html#llama_utils.retrieval.pdf_reader.Image.read_image_base64","title":"<code>read_image_base64() -&gt; str</code>","text":"<p>Reads the image file and encodes it in Base64 format.</p> Source code in <code>src/llama_utils/retrieval/pdf_reader.py</code> <pre><code>def read_image_base64(self) -&gt; str:\n    \"\"\"Reads the image file and encodes it in Base64 format.\"\"\"\n    with open(self.image_path, \"rb\") as f:\n        return base64.b64encode(f.read()).decode(\"utf-8\")\n</code></pre>"},{"location":"api/pdf_reader.html#llama_utils.retrieval.pdf_reader.Image.to_dict","title":"<code>to_dict() -&gt; Dict[str, str]</code>","text":"<p>Convert the object to a dictionary.</p> Source code in <code>src/llama_utils/retrieval/pdf_reader.py</code> <pre><code>def to_dict(self) -&gt; Dict[str, str]:\n    \"\"\"Convert the object to a dictionary.\"\"\"\n    return {\n        \"figure_number\": self.figure_number,\n        \"caption_text\": self.caption_text,\n        \"image_path\": str(self.image_path),\n    }\n</code></pre>"},{"location":"api/pdf_reader.html#llama_utils.retrieval.pdf_reader.Image.validate_image_path","title":"<code>validate_image_path(value: Path) -&gt; Path</code>  <code>classmethod</code>","text":"<p>Ensure the image path exists.</p> Source code in <code>src/llama_utils/retrieval/pdf_reader.py</code> <pre><code>@field_validator(\"image_path\")\n@classmethod\ndef validate_image_path(cls, value: Path) -&gt; Path:\n    \"\"\"Ensure the image path exists.\"\"\"\n    if not value.exists():\n        raise ValueError(f\"Image path does not exist: {value}\")\n    return value\n</code></pre>"},{"location":"api/pdf_reader.html#llama_utils.retrieval.pdf_reader.ImageDocConfig","title":"<code>ImageDocConfig</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Configuration for image document processing.</p> Source code in <code>src/llama_utils/retrieval/pdf_reader.py</code> <pre><code>class ImageDocConfig(BaseModel):\n    \"\"\"Configuration for image document processing.\"\"\"\n\n    resolution_scale: float = Field(\n        2.0, description=\"Scale factor for image resolution.\"\n    )\n    image_dir_suffix: str = Field(\n        \"_artifacts\", description=\"Suffix for image directory.\"\n    )\n</code></pre>"},{"location":"api/pdf_reader.html#llama_utils.retrieval.pdf_reader.PDFReader","title":"<code>PDFReader</code>","text":"<p>Main class to handle PDF text extraction and image processing.</p> <p>Parameters:</p> Name Type Description Default <code>document_converter</code> <code>Optional[DocumentConverterWrapper]</code> <p>A document converter instance to use for parsing PDFs, by default None which uses DocumentConverterWrapper.</p> <code>None</code> <p>Methods:</p> Name Description <code>extract_figures_data</code> <p>Extracts figure captions and image references from a PDF text dump.</p> <code>create_image_document</code> <p>Creates an ImageDocument from an image file.</p> <code>parse_pdf</code> <p>Parses the PDF, extracting images and generating markdown output.</p> Source code in <code>src/llama_utils/retrieval/pdf_reader.py</code> <pre><code>class PDFReader:\n    \"\"\"Main class to handle PDF text extraction and image processing.\n\n    Parameters\n    ----------\n    document_converter : Optional[DocumentConverterWrapper], optional\n        A document converter instance to use for parsing PDFs, by default None which uses DocumentConverterWrapper.\n\n    Methods\n    -------\n    extract_figures_data(pdf_text)\n        Extracts figure captions and image references from a PDF text dump.\n\n    create_image_document(image_path, caption_text)\n        Creates an ImageDocument from an image file.\n\n    parse_pdf(pdf_path)\n        Parses the PDF, extracting images and generating markdown output.\n    \"\"\"\n\n    def __init__(\n        self,\n        document_converter: Optional[DocumentConverter] = None,\n        image_config: ImageDocConfig = None,\n    ):\n        \"\"\"Initialize the PDFReader instance.\"\"\"\n        self.document_converter = document_converter or DocumentConverter()\n        self.image_config = image_config or ImageDocConfig()\n\n    @staticmethod\n    def extract_figures_data(pdf_text: str, root_dir: Path) -&gt; List[Image]:\n        r\"\"\"Extract figure captions and image references from a PDF text.\n\n        Extract figure data (local path/ caption /figure number) from a PDF text dump,\n        purely via regex. We assume each figure looks like:\n\n            Figure 2. Study area: ...\n            ![Image](paper_artifacts\\\\image_000000_xyz.png)\n\n        where \"Figure 2.\" or \"Figure 12.\" etc. precedes the caption text,\n        and the actual image reference is on a separate line starting with ![Image]()\n\n\n        Parameters\n        ----------\n        pdf_text : str\n            The entire PDF content as plain text.\n        root_dir: Path\n            The root directory where the images are stored.\n\n        Returns\n        -------\n        List[Image]\n            A list of `FigureData` class containing figure numbers, captions, and image paths.\n            Each element in the list:\n            FigureData(\n                figure_number=\"Figure 2.\",\n                caption_text=\"Study area: ...\",\n                image_path=\"paper_artifacts\\\\image_000000_xyz.png\"\n            )\n\n        Examples\n        --------\n        ```python\n        &gt;&gt;&gt; from llama_utils.retrieval.pdf_reader import PDFReader\n        &gt;&gt;&gt; from pathlib import Path\n        &gt;&gt;&gt; root_dir = Path(\"examples/data/pdfs\")\n        &gt;&gt;&gt; reader = PDFReader()\n        &gt;&gt;&gt; pdf_text = '''Some introduction text ...\\n\n        ...             Figure 2. Study area: The main campus ...\n        ...             \"![Image](geoscience-paper_artifacts\\\\image_000000_0bb3fab8c73dc60d39d1aefd87fcffa8d95aa7ed8f67ac920355a00c50bb4456.png)\n        ...\n        ...            \"Some other random text ...\n        ...\n        ...             \"Figure 3. Another figure's caption.\n        ...             \"![Image](geoscience-paper_artifacts\\\\image_000000_0bb3fab8c73dc60d39d1aefd87fcffa8d95aa7ed8f67ac920355a00c50bb4456.png)\n        ...             '''\n        &gt;&gt;&gt; figures_data = reader.extract_figures_data(pdf_text, root_dir)\n        &gt;&gt;&gt; print(figures_data) # doctest: +SKIP\n        [\n            FigureData(\n                figure_number='Figure 2.',\n                caption_text='Study area: The main campus ...',\n                image_path='geoscience-paper_artifacts\\\\image_000000_0bb3fab8c73dc60d39d1aefd87fcffa8d95aa7ed8f67ac920355a00c50bb4456.png'\n            ),\n            FigureData(\n                figure_number='Figure 3.',\n                caption_text=\"Another figure's caption.\",\n                image_path='geoscience-paper_artifacts\\\\image_000000_0bb3fab8c73dc60d39d1aefd87fcffa8d95aa7ed8f67ac920355a00c50bb4456.png'\n            )\n        ]\n        ```\n        \"\"\"\n        # Regex Explanation:\n        # 1) (Figure\\s+\\d+\\.\\s*) captures text like \"Figure 2. \" or \"Figure 10. \"\n        # 2) (.*?) captures the figure caption until ...\n        # 3) \\n?\\!\\[Image\\]\\((.*?)\\) looks for an optional newline, then \"![Image](\",\n        #    then captures the path inside parentheses, then a closing \")\"\n        #\n        # The DOTALL flag (re.DOTALL) makes the '.' match newlines, so we can capture\n        # multi-line captions if they exist.\n        pattern = re.compile(\n            r\"(Figure\\s+\\d+\\.\\s*)(.*?)\\n?!\\[Image\\]\\((.*?)\\)\", re.DOTALL\n        )\n        matches = pattern.findall(pdf_text)\n\n        return [\n            Image(\n                figure_number=match[0].strip(),\n                caption_text=match[1].strip(),\n                image_path=root_dir / match[2].replace(\"%5C\", \"/\").strip(),\n            )\n            for match in matches\n        ]\n\n    @staticmethod\n    def create_image_document(image_data: Image) -&gt; ImageDocument:\n        \"\"\"Create an ImageDocument from an image file.\n\n        Parameters\n        ----------\n        image_data : Image\n            FigureData object containing the image path and caption text.\n\n        Returns\n        -------\n        ImageDocument\n            The ImageDocument object containing the image and metadata.\n\n        Examples\n        --------\n        ```python\n        &gt;&gt;&gt; from llama_utils.retrieval.pdf_reader import PDFReader, Image\n        &gt;&gt;&gt; image_path = \"examples/data/images/calibration.png\"\n        &gt;&gt;&gt; caption = \"Calibration framework of hydrological models.\"\n        &gt;&gt;&gt; figure_data = Image(figure_number=\"Figure 1.\", caption_text=caption, image_path=image_path)\n        &gt;&gt;&gt; reader = PDFReader()\n        &gt;&gt;&gt; image_doc = reader.create_image_document(figure_data)\n        &gt;&gt;&gt; print(image_doc.doc_id)\n        img-calibration.png\n        &gt;&gt;&gt; print(image_doc.metadata[\"filename\"])\n        calibration.png\n        &gt;&gt;&gt; print(image_doc.text)\n        figure caption: Calibration framework of hydrological models.\n\n        ```\n        \"\"\"\n        return ImageDocument(\n            id_=f\"img-{image_data.image_path.name}\",\n            image=image_data.read_image_base64(),\n            text=f\"figure caption: {image_data.caption_text}\\n\",\n            image_path=str(image_data.image_path),\n            metadata={\"filename\": image_data.image_path.name} | image_data.metadata,\n        )\n\n    def parse_pdf(\n        self, pdf_path: Union[str, Path]\n    ) -&gt; Dict[str, Union[Path, List[ImageDocument]]]:\n        r\"\"\"Parse the PDF, extracting images and generating markdown output.\n\n        Parameters\n        ----------\n        pdf_path : Union[str, Path]\n            Path to the PDF file to be processed.\n\n        Returns\n        -------\n        Dict[str, Union[Path, List[ImageDocument]]]\n            A dictionary containing the markdown file path and a list of extracted ImageDocument objects.\n\n        Examples\n        --------\n        ```python\n        &gt;&gt;&gt; from llama_utils.retrieval.pdf_reader import PDFReader\n        &gt;&gt;&gt; pdf_path = Path(\"examples/data/pdfs/geoscience-paper.pdf\")\n        &gt;&gt;&gt; reader = PDFReader()\n        &gt;&gt;&gt; result = reader.parse_pdf(pdf_path) # doctest: +SKIP\n        &gt;&gt;&gt; print(result.keys()) # doctest: +SKIP\n        dict_keys(['markdown', 'images'])\n        &gt;&gt;&gt; print(result[\"markdown\"]) # doctest: +SKIP\n        examples/data/pdfs/geoscience-paper.md\n        &gt;&gt;&gt; print(result[\"images\"]) # doctest: +SKIP\n        [\n            ImageDocument(\n                id_='img-image_000000_0bb3fab8c73dc60d39d1aefd87fcffa8d95aa7ed8f67ac920355a00c50bb4456.png',\n                embedding=None,\n                metadata={\n                    'filename': 'image_000000_0bb3fab8c73dc60d39d1aefd87fcffa8d95aa7ed8f67ac920355a00c50bb4456.png'},\n                    excluded_embed_metadata_keys=[],\n                    excluded_llm_metadata_keys=[],\n                    relationships={},\n                    metadata_template='{key}: {value}',\n                    metadata_separator='\\n',\n                    text_resource=MediaResource(\n                        embeddings=None,\n                        data=None,\n                        text='figure caption: Two variants of raster based conceptual distributed models (of type 2): ...',\n                        path=None,\n                        url=None,\n                        mimetype=None\n                    ),\n                    image_resource=MediaResource(\n                        embeddings=None,\n                        data=b'iVBORw0KGgoAAAANSUhEUgAAAtgAAAFSCAIAAABHcj9xAAEAAElEQVR4nOz9B5gcV3YmiF4TJl1571EACt47ggBJ0H...',\n                        text=None,\n                        path=None,\n                        url=None,\n                        mimetype='image/png'\n                    ),\n                    audio_resource=None,\n                    video_resource=None,\n                    text_template='{metadata_str}\\n\\n{content}'\n            )\n        ]\n\n        ```\n        \"\"\"\n        pdf_path = Path(pdf_path)\n        md_file, _ = self.document_converter.convert(pdf_path)\n        md_text = md_file.read_text(encoding=\"utf-8\")\n        images_data = self.extract_figures_data(md_text, root_dir=md_file.parent)\n        image_docs = [self.create_image_document(img) for img in images_data]\n        return {\"markdown\": md_file, \"images\": image_docs}\n</code></pre>"},{"location":"api/pdf_reader.html#llama_utils.retrieval.pdf_reader.PDFReader.__init__","title":"<code>__init__(document_converter: Optional[DocumentConverter] = None, image_config: ImageDocConfig = None)</code>","text":"<p>Initialize the PDFReader instance.</p> Source code in <code>src/llama_utils/retrieval/pdf_reader.py</code> <pre><code>def __init__(\n    self,\n    document_converter: Optional[DocumentConverter] = None,\n    image_config: ImageDocConfig = None,\n):\n    \"\"\"Initialize the PDFReader instance.\"\"\"\n    self.document_converter = document_converter or DocumentConverter()\n    self.image_config = image_config or ImageDocConfig()\n</code></pre>"},{"location":"api/pdf_reader.html#llama_utils.retrieval.pdf_reader.PDFReader.create_image_document","title":"<code>create_image_document(image_data: Image) -&gt; ImageDocument</code>  <code>staticmethod</code>","text":"<p>Create an ImageDocument from an image file.</p> <p>Parameters:</p> Name Type Description Default <code>image_data</code> <code>Image</code> <p>FigureData object containing the image path and caption text.</p> required <p>Returns:</p> Type Description <code>ImageDocument</code> <p>The ImageDocument object containing the image and metadata.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from llama_utils.retrieval.pdf_reader import PDFReader, Image\n&gt;&gt;&gt; image_path = \"examples/data/images/calibration.png\"\n&gt;&gt;&gt; caption = \"Calibration framework of hydrological models.\"\n&gt;&gt;&gt; figure_data = Image(figure_number=\"Figure 1.\", caption_text=caption, image_path=image_path)\n&gt;&gt;&gt; reader = PDFReader()\n&gt;&gt;&gt; image_doc = reader.create_image_document(figure_data)\n&gt;&gt;&gt; print(image_doc.doc_id)\nimg-calibration.png\n&gt;&gt;&gt; print(image_doc.metadata[\"filename\"])\ncalibration.png\n&gt;&gt;&gt; print(image_doc.text)\nfigure caption: Calibration framework of hydrological models.\n</code></pre> Source code in <code>src/llama_utils/retrieval/pdf_reader.py</code> <pre><code>@staticmethod\ndef create_image_document(image_data: Image) -&gt; ImageDocument:\n    \"\"\"Create an ImageDocument from an image file.\n\n    Parameters\n    ----------\n    image_data : Image\n        FigureData object containing the image path and caption text.\n\n    Returns\n    -------\n    ImageDocument\n        The ImageDocument object containing the image and metadata.\n\n    Examples\n    --------\n    ```python\n    &gt;&gt;&gt; from llama_utils.retrieval.pdf_reader import PDFReader, Image\n    &gt;&gt;&gt; image_path = \"examples/data/images/calibration.png\"\n    &gt;&gt;&gt; caption = \"Calibration framework of hydrological models.\"\n    &gt;&gt;&gt; figure_data = Image(figure_number=\"Figure 1.\", caption_text=caption, image_path=image_path)\n    &gt;&gt;&gt; reader = PDFReader()\n    &gt;&gt;&gt; image_doc = reader.create_image_document(figure_data)\n    &gt;&gt;&gt; print(image_doc.doc_id)\n    img-calibration.png\n    &gt;&gt;&gt; print(image_doc.metadata[\"filename\"])\n    calibration.png\n    &gt;&gt;&gt; print(image_doc.text)\n    figure caption: Calibration framework of hydrological models.\n\n    ```\n    \"\"\"\n    return ImageDocument(\n        id_=f\"img-{image_data.image_path.name}\",\n        image=image_data.read_image_base64(),\n        text=f\"figure caption: {image_data.caption_text}\\n\",\n        image_path=str(image_data.image_path),\n        metadata={\"filename\": image_data.image_path.name} | image_data.metadata,\n    )\n</code></pre>"},{"location":"api/pdf_reader.html#llama_utils.retrieval.pdf_reader.PDFReader.extract_figures_data","title":"<code>extract_figures_data(pdf_text: str, root_dir: Path) -&gt; List[Image]</code>  <code>staticmethod</code>","text":"<p>Extract figure captions and image references from a PDF text.</p> <p>Extract figure data (local path/ caption /figure number) from a PDF text dump, purely via regex. We assume each figure looks like:</p> <pre><code>Figure 2. Study area: ...\n![Image](paper_artifacts\\\\image_000000_xyz.png)\n</code></pre> <p>where \"Figure 2.\" or \"Figure 12.\" etc. precedes the caption text, and the actual image reference is on a separate line starting with </p> <p>Parameters:</p> Name Type Description Default <code>pdf_text</code> <code>str</code> <p>The entire PDF content as plain text.</p> required <code>root_dir</code> <code>Path</code> <p>The root directory where the images are stored.</p> required <p>Returns:</p> Type Description <code>List[Image]</code> <p>A list of <code>FigureData</code> class containing figure numbers, captions, and image paths. Each element in the list: FigureData(     figure_number=\"Figure 2.\",     caption_text=\"Study area: ...\",     image_path=\"paper_artifacts\\image_000000_xyz.png\" )</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from llama_utils.retrieval.pdf_reader import PDFReader\n&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; root_dir = Path(\"examples/data/pdfs\")\n&gt;&gt;&gt; reader = PDFReader()\n&gt;&gt;&gt; pdf_text = '''Some introduction text ...\\n\n...             Figure 2. Study area: The main campus ...\n...             \"![Image](geoscience-paper_artifacts\\\\image_000000_0bb3fab8c73dc60d39d1aefd87fcffa8d95aa7ed8f67ac920355a00c50bb4456.png)\n...\n...            \"Some other random text ...\n...\n...             \"Figure 3. Another figure's caption.\n...             \"![Image](geoscience-paper_artifacts\\\\image_000000_0bb3fab8c73dc60d39d1aefd87fcffa8d95aa7ed8f67ac920355a00c50bb4456.png)\n...             '''\n&gt;&gt;&gt; figures_data = reader.extract_figures_data(pdf_text, root_dir)\n&gt;&gt;&gt; print(figures_data) # doctest: +SKIP\n[\n    FigureData(\n        figure_number='Figure 2.',\n        caption_text='Study area: The main campus ...',\n        image_path='geoscience-paper_artifacts\\\\image_000000_0bb3fab8c73dc60d39d1aefd87fcffa8d95aa7ed8f67ac920355a00c50bb4456.png'\n    ),\n    FigureData(\n        figure_number='Figure 3.',\n        caption_text=\"Another figure's caption.\",\n        image_path='geoscience-paper_artifacts\\\\image_000000_0bb3fab8c73dc60d39d1aefd87fcffa8d95aa7ed8f67ac920355a00c50bb4456.png'\n    )\n]\n</code></pre> Source code in <code>src/llama_utils/retrieval/pdf_reader.py</code> <pre><code>@staticmethod\ndef extract_figures_data(pdf_text: str, root_dir: Path) -&gt; List[Image]:\n    r\"\"\"Extract figure captions and image references from a PDF text.\n\n    Extract figure data (local path/ caption /figure number) from a PDF text dump,\n    purely via regex. We assume each figure looks like:\n\n        Figure 2. Study area: ...\n        ![Image](paper_artifacts\\\\image_000000_xyz.png)\n\n    where \"Figure 2.\" or \"Figure 12.\" etc. precedes the caption text,\n    and the actual image reference is on a separate line starting with ![Image]()\n\n\n    Parameters\n    ----------\n    pdf_text : str\n        The entire PDF content as plain text.\n    root_dir: Path\n        The root directory where the images are stored.\n\n    Returns\n    -------\n    List[Image]\n        A list of `FigureData` class containing figure numbers, captions, and image paths.\n        Each element in the list:\n        FigureData(\n            figure_number=\"Figure 2.\",\n            caption_text=\"Study area: ...\",\n            image_path=\"paper_artifacts\\\\image_000000_xyz.png\"\n        )\n\n    Examples\n    --------\n    ```python\n    &gt;&gt;&gt; from llama_utils.retrieval.pdf_reader import PDFReader\n    &gt;&gt;&gt; from pathlib import Path\n    &gt;&gt;&gt; root_dir = Path(\"examples/data/pdfs\")\n    &gt;&gt;&gt; reader = PDFReader()\n    &gt;&gt;&gt; pdf_text = '''Some introduction text ...\\n\n    ...             Figure 2. Study area: The main campus ...\n    ...             \"![Image](geoscience-paper_artifacts\\\\image_000000_0bb3fab8c73dc60d39d1aefd87fcffa8d95aa7ed8f67ac920355a00c50bb4456.png)\n    ...\n    ...            \"Some other random text ...\n    ...\n    ...             \"Figure 3. Another figure's caption.\n    ...             \"![Image](geoscience-paper_artifacts\\\\image_000000_0bb3fab8c73dc60d39d1aefd87fcffa8d95aa7ed8f67ac920355a00c50bb4456.png)\n    ...             '''\n    &gt;&gt;&gt; figures_data = reader.extract_figures_data(pdf_text, root_dir)\n    &gt;&gt;&gt; print(figures_data) # doctest: +SKIP\n    [\n        FigureData(\n            figure_number='Figure 2.',\n            caption_text='Study area: The main campus ...',\n            image_path='geoscience-paper_artifacts\\\\image_000000_0bb3fab8c73dc60d39d1aefd87fcffa8d95aa7ed8f67ac920355a00c50bb4456.png'\n        ),\n        FigureData(\n            figure_number='Figure 3.',\n            caption_text=\"Another figure's caption.\",\n            image_path='geoscience-paper_artifacts\\\\image_000000_0bb3fab8c73dc60d39d1aefd87fcffa8d95aa7ed8f67ac920355a00c50bb4456.png'\n        )\n    ]\n    ```\n    \"\"\"\n    # Regex Explanation:\n    # 1) (Figure\\s+\\d+\\.\\s*) captures text like \"Figure 2. \" or \"Figure 10. \"\n    # 2) (.*?) captures the figure caption until ...\n    # 3) \\n?\\!\\[Image\\]\\((.*?)\\) looks for an optional newline, then \"![Image](\",\n    #    then captures the path inside parentheses, then a closing \")\"\n    #\n    # The DOTALL flag (re.DOTALL) makes the '.' match newlines, so we can capture\n    # multi-line captions if they exist.\n    pattern = re.compile(\n        r\"(Figure\\s+\\d+\\.\\s*)(.*?)\\n?!\\[Image\\]\\((.*?)\\)\", re.DOTALL\n    )\n    matches = pattern.findall(pdf_text)\n\n    return [\n        Image(\n            figure_number=match[0].strip(),\n            caption_text=match[1].strip(),\n            image_path=root_dir / match[2].replace(\"%5C\", \"/\").strip(),\n        )\n        for match in matches\n    ]\n</code></pre>"},{"location":"api/pdf_reader.html#llama_utils.retrieval.pdf_reader.PDFReader.parse_pdf","title":"<code>parse_pdf(pdf_path: Union[str, Path]) -&gt; Dict[str, Union[Path, List[ImageDocument]]]</code>","text":"<p>Parse the PDF, extracting images and generating markdown output.</p> <p>Parameters:</p> Name Type Description Default <code>pdf_path</code> <code>Union[str, Path]</code> <p>Path to the PDF file to be processed.</p> required <p>Returns:</p> Type Description <code>Dict[str, Union[Path, List[ImageDocument]]]</code> <p>A dictionary containing the markdown file path and a list of extracted ImageDocument objects.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from llama_utils.retrieval.pdf_reader import PDFReader\n&gt;&gt;&gt; pdf_path = Path(\"examples/data/pdfs/geoscience-paper.pdf\")\n&gt;&gt;&gt; reader = PDFReader()\n&gt;&gt;&gt; result = reader.parse_pdf(pdf_path) # doctest: +SKIP\n&gt;&gt;&gt; print(result.keys()) # doctest: +SKIP\ndict_keys(['markdown', 'images'])\n&gt;&gt;&gt; print(result[\"markdown\"]) # doctest: +SKIP\nexamples/data/pdfs/geoscience-paper.md\n&gt;&gt;&gt; print(result[\"images\"]) # doctest: +SKIP\n[\n    ImageDocument(\n        id_='img-image_000000_0bb3fab8c73dc60d39d1aefd87fcffa8d95aa7ed8f67ac920355a00c50bb4456.png',\n        embedding=None,\n        metadata={\n            'filename': 'image_000000_0bb3fab8c73dc60d39d1aefd87fcffa8d95aa7ed8f67ac920355a00c50bb4456.png'},\n            excluded_embed_metadata_keys=[],\n            excluded_llm_metadata_keys=[],\n            relationships={},\n            metadata_template='{key}: {value}',\n            metadata_separator='\\n',\n            text_resource=MediaResource(\n                embeddings=None,\n                data=None,\n                text='figure caption: Two variants of raster based conceptual distributed models (of type 2): ...',\n                path=None,\n                url=None,\n                mimetype=None\n            ),\n            image_resource=MediaResource(\n                embeddings=None,\n                data=b'iVBORw0KGgoAAAANSUhEUgAAAtgAAAFSCAIAAABHcj9xAAEAAElEQVR4nOz9B5gcV3YmiF4TJl1571EACt47ggBJ0H...',\n                text=None,\n                path=None,\n                url=None,\n                mimetype='image/png'\n            ),\n            audio_resource=None,\n            video_resource=None,\n            text_template='{metadata_str}\\n\\n{content}'\n    )\n]\n</code></pre> Source code in <code>src/llama_utils/retrieval/pdf_reader.py</code> <pre><code>def parse_pdf(\n    self, pdf_path: Union[str, Path]\n) -&gt; Dict[str, Union[Path, List[ImageDocument]]]:\n    r\"\"\"Parse the PDF, extracting images and generating markdown output.\n\n    Parameters\n    ----------\n    pdf_path : Union[str, Path]\n        Path to the PDF file to be processed.\n\n    Returns\n    -------\n    Dict[str, Union[Path, List[ImageDocument]]]\n        A dictionary containing the markdown file path and a list of extracted ImageDocument objects.\n\n    Examples\n    --------\n    ```python\n    &gt;&gt;&gt; from llama_utils.retrieval.pdf_reader import PDFReader\n    &gt;&gt;&gt; pdf_path = Path(\"examples/data/pdfs/geoscience-paper.pdf\")\n    &gt;&gt;&gt; reader = PDFReader()\n    &gt;&gt;&gt; result = reader.parse_pdf(pdf_path) # doctest: +SKIP\n    &gt;&gt;&gt; print(result.keys()) # doctest: +SKIP\n    dict_keys(['markdown', 'images'])\n    &gt;&gt;&gt; print(result[\"markdown\"]) # doctest: +SKIP\n    examples/data/pdfs/geoscience-paper.md\n    &gt;&gt;&gt; print(result[\"images\"]) # doctest: +SKIP\n    [\n        ImageDocument(\n            id_='img-image_000000_0bb3fab8c73dc60d39d1aefd87fcffa8d95aa7ed8f67ac920355a00c50bb4456.png',\n            embedding=None,\n            metadata={\n                'filename': 'image_000000_0bb3fab8c73dc60d39d1aefd87fcffa8d95aa7ed8f67ac920355a00c50bb4456.png'},\n                excluded_embed_metadata_keys=[],\n                excluded_llm_metadata_keys=[],\n                relationships={},\n                metadata_template='{key}: {value}',\n                metadata_separator='\\n',\n                text_resource=MediaResource(\n                    embeddings=None,\n                    data=None,\n                    text='figure caption: Two variants of raster based conceptual distributed models (of type 2): ...',\n                    path=None,\n                    url=None,\n                    mimetype=None\n                ),\n                image_resource=MediaResource(\n                    embeddings=None,\n                    data=b'iVBORw0KGgoAAAANSUhEUgAAAtgAAAFSCAIAAABHcj9xAAEAAElEQVR4nOz9B5gcV3YmiF4TJl1571EACt47ggBJ0H...',\n                    text=None,\n                    path=None,\n                    url=None,\n                    mimetype='image/png'\n                ),\n                audio_resource=None,\n                video_resource=None,\n                text_template='{metadata_str}\\n\\n{content}'\n        )\n    ]\n\n    ```\n    \"\"\"\n    pdf_path = Path(pdf_path)\n    md_file, _ = self.document_converter.convert(pdf_path)\n    md_text = md_file.read_text(encoding=\"utf-8\")\n    images_data = self.extract_figures_data(md_text, root_dir=md_file.parent)\n    image_docs = [self.create_image_document(img) for img in images_data]\n    return {\"markdown\": md_file, \"images\": image_docs}\n</code></pre>"},{"location":"api/storage.html","title":"Storage","text":""},{"location":"api/storage.html#storage_1","title":"Storage","text":""},{"location":"api/storage.html#llama_utils.retrieval.storage","title":"<code>llama_utils.retrieval.storage</code>","text":"<p>A module for managing vector Storage and retrieval.</p>"},{"location":"api/storage.html#llama_utils.retrieval.storage.Storage","title":"<code>Storage</code>","text":"<p>A class to manage vector Storage and retrieval.</p> <p>The Storage class is used to manage the storage and retrieval of documents. It provides methods to add documents to the store, read documents from a directory, and extract information from the documents.</p> Source code in <code>src/llama_utils/retrieval/storage.py</code> <pre><code>class Storage:\n    \"\"\"A class to manage vector Storage and retrieval.\n\n    The Storage class is used to manage the storage and retrieval of documents. It provides methods to add documents to the\n    store, read documents from a directory, and extract information from the documents.\n    \"\"\"\n\n    def __init__(\n        self,\n        storage_context: StorageContext = None,\n    ):\n        \"\"\"Initialize the Storage.\n\n        The constructor method takes a llama_index.core.StorageContext object that is a native llamaIndex object\n        and a metadata table (pandas.DataFrame-optional) as input.\n\n        Parameters\n        ----------\n        storage_context: str, optional, default is None.\n            the StorageContext object that is created by LlamaIndex (a native llamaIndex object).\n\n        \"\"\"\n        if not isinstance(storage_context, StorageContext):\n            raise ValueError(\n                f\"Storage class should be instantiated using StorageContext object, given: {storage_context}\"\n            )\n\n        self._store = storage_context\n\n    @classmethod\n    def create(cls) -&gt; \"Storage\":\n        \"\"\"Create a new in-memory Storage.\n\n        Returns\n        -------\n        Storage:\n            The storage Context.\n\n        Examples\n        --------\n        You can create a new storage (in-memory) using the `create` method as follows:\n\n        ```python\n        &gt;&gt;&gt; store = Storage.create()\n        &gt;&gt;&gt; print(store)\n        &lt;BLANKLINE&gt;\n                Documents: 0\n                Indexes: 0\n        &lt;BLANKLINE&gt;\n\n        ```\n        \"\"\"\n        storage = cls._create_simple_storage_context()\n        return cls(storage)\n\n    @staticmethod\n    def _create_simple_storage_context() -&gt; StorageContext:\n        \"\"\"Create a simple Storage context.\n\n        Returns\n        -------\n        StorageContext:\n            A storage context with docstore, vectore store, and index store.\n        \"\"\"\n        return StorageContext.from_defaults(\n            docstore=SimpleDocumentStore(),\n            vector_store=SimpleVectorStore(),\n            index_store=SimpleIndexStore(),\n        )\n\n    @staticmethod\n    def _create_metadata_index():\n        \"\"\"Create a metadata-based index.\"\"\"\n        return pd.DataFrame(columns=[\"file_name\", \"doc_id\"])\n\n    @property\n    def store(self) -&gt; StorageContext:\n        \"\"\"Get the Storage context.\"\"\"\n        return self._store\n\n    @property\n    def docstore(self) -&gt; BaseDocumentStore:\n        \"\"\"Get the document store.\"\"\"\n        return self.store.docstore\n\n    @property\n    def vector_store(self):\n        \"\"\"Get the vector store.\"\"\"\n        return self.store.vector_store\n\n    @property\n    def index_store(self) -&gt; BaseIndexStore:\n        \"\"\"Get the index store.\"\"\"\n        return self.store.index_store\n\n    def save(self, store_dir: str):\n        \"\"\"Save the storage to a directory.\n\n        Parameters\n        ----------\n        store_dir: str\n            The directory to save the store.\n\n        Examples\n        --------\n        You can save a storage to a directory as follows:\n        ```python\n        &gt;&gt;&gt; store = Storage.create()\n        &gt;&gt;&gt; store.save(\"examples/paul-graham-essay-storage-example\")\n\n        ```\n        The following files will be created in the specified directory:\n        - metadata_index.csv\n        - docstore.json\n        - default__vector_store.json\n        - index_store.json\n        - graph_store.json\n        - image__vector_store.json\n        \"\"\"\n        self.store.persist(persist_dir=store_dir)\n        file_path = os.path.join(store_dir, ID_MAPPING_FILE)\n        save_metadata_index(self.document_metadata(as_dataframe=True), file_path)\n\n    @classmethod\n    def load(cls, store_dir: str) -&gt; \"Storage\":\n        \"\"\"Load the store from a directory.\n\n        Parameters\n        ----------\n        store_dir: str\n            The directory containing the store.\n\n        Returns\n        -------\n        Storage:\n            The loaded storage.\n\n        Raises\n        ------\n        StorageNotFoundError\n            If the storage is not found at the specified directory.\n\n        Examples\n        --------\n        You can load a storage from a directory as follows:\n        ```python\n        &gt;&gt;&gt; store = Storage.load(\"examples/paul-graham-essay-storage\")\n        &gt;&gt;&gt; print(store) # doctest: +SKIP\n        &lt;BLANKLINE&gt;\n                    Documents: 53\n                    Indexes: 2\n        &lt;BLANKLINE&gt;\n        &gt;&gt;&gt; metadata = store.document_metadata(as_dataframe=True)\n        &gt;&gt;&gt; print(metadata.head()) # doctest: +SKIP\n                                     doc_id                              node_id              file_name\n        0   a25111e2e59f81bb7a0e3efb4825...  cadde590b82362fc7a5f8ce0751c5b30b...  paul_graham_essay.txt\n        1   a25111e2e59f81bb7a0e3efb4825...  0567f3a9756983e1d040ec332255db945...  paul_graham_essay.txt\n        2   a25111e2e59f81bb7a0e3efb4825...  d5542515414f1bf30f6c21f0796af8bde...  paul_graham_essay.txt\n        3   a25111e2e59f81bb7a0e3efb4825...  120b69658a6c69ab8de3167b5ed0db779...  paul_graham_essay.txt\n        &gt;&gt;&gt; docstore = store.docstore # doctest: +SKIP\n        &lt;llama_index.core.storage.docstore.simple_docstore.SimpleDocumentStore at 0x20444d31be0&gt;\n        &gt;&gt;&gt; vector_store = store.vector_store\n        &gt;&gt;&gt; print(type(vector_store))\n        &lt;class 'llama_index.core.vector_stores.simple.SimpleVectorStore'&gt;\n\n        ```\n        \"\"\"\n        if not Path(store_dir).exists():\n            raise StorageNotFoundError(f\"Storage not found at {store_dir}\")\n        storage = StorageContext.from_defaults(persist_dir=store_dir)\n        return cls(storage)\n\n    def __str__(self):\n        \"\"\"Return a string representation of the storage.\"\"\"\n        message = f\"\"\"\n        Documents: {len(self.docstore.docs)}\n        Indexes: {len(self.index_store.index_structs())}\n        \"\"\"\n        return message\n\n    def __repr__(self):\n        \"\"\"Return a string representation of the storage.\"\"\"\n        message = f\"\"\"\n        Documents: {len(self.docstore.docs)}\n        Indexes: {len(self.index_store.index_structs())}\n        \"\"\"\n        return message\n\n    @property\n    def node_metadata(self) -&gt; pd.DataFrame:\n        \"\"\"Get the metadata index.\"\"\"\n        return create_metadata_index_existing_docs(self.docstore.docs)\n\n    def document_metadata(\n        self, as_dataframe: Optional[bool] = False\n    ) -&gt; Union[Dict[str, RefDocInfo], DataFrame]:\n        r\"\"\"Document metadata.\n\n        Get the metadata of all the documents in the docstore.\n\n        Parameters\n        ----------\n        as_dataframe: bool, optional, default is False.\n            True to return the metadata as a DataFrame.\n\n        Returns\n        -------\n        Dict[str, RefDocInfo] or DataFrame\n            The metadata of all the documents in the docstore.\n\n        Examples\n        --------\n        You can get the document metadata as a dictionary using the `metadata` method with the default parameter values:\n        ```python\n        &gt;&gt;&gt; store = Storage.load(\"examples/paul-graham-essay-storage\")\n        &gt;&gt;&gt; metadata = store.document_metadata()\n\n        ```\n        The `metadata` is a dictionary with the document ID as the key and the document metadata as the value:\n        ```python\n        &gt;&gt;&gt; documents_id = list(metadata.keys())\n        &gt;&gt;&gt; print(documents_id) # doctest: +SKIP\n        ['a25111e2e59f81bb7a0e3efb48255f4a5d4f722aaf13ffd112463fb98c227092']\n        &gt;&gt;&gt; print(metadata) # doctest: +SKIP\n        {\n            'a25111e2e59f81bb7a0e3efb48255f4a5d4f722aaf13ffd112463fb98c227092':\n                RefDocInfo(\n                    node_ids=[\n                        'cadde590b82362fc7a5f8ce0751c5b30b11c0f81369df7d83a76956bf22765b7',\n                        '0567f3a9756983e1d040ec332255db94521ed5dc1b03fc7312f653c0e670a0bf',\n                        'd5542515414f1bf30f6c21f0796af8bde4c513f2e72a2df21f0810f10826252f',\n                        '120b69658a6c69ab8de3167b5ed0db77941a2b487e94d5d0e64a0d2d2805a4b7'\n                    ],\n                    metadata={\n                        'file_path': 'examples\\\\data\\\\paul_graham_essay.txt',\n                        'file_name': 'paul_graham_essay.txt',\n                        'file_type': 'text/plain',\n                        'file_size': 75395,\n                        'creation_date': '2024-10-24',\n                        'last_modified_date': '2024-09-16',\n                        'document_title': 'Based on the candidate titles and content, I would suggest a***.'\n                    }\n                )\n            }\n        ```\n        To get the metadata as a DataFrame, you can set the `as_dataframe` parameter to True:\n        ```python\n        &gt;&gt;&gt; metadata = store.document_metadata(as_dataframe=True)\n        &gt;&gt;&gt; print(metadata) # doctest: +SKIP\n                                                       doc_id                                            node_id\n        0   a25111e2e59f81bb7a0e3efb48255f4a5d4f722aaf13ff...  cadde590b82362fc7a5f8ce0751c5b30b11c0f81369df7...\n        1   a25111e2e59f81bb7a0e3efb48255f4a5d4f722aaf13ff...  0567f3a9756983e1d040ec332255db94521ed5dc1b03fc...\n        2   a25111e2e59f81bb7a0e3efb48255f4a5d4f722aaf13ff...  d5542515414f1bf30f6c21f0796af8bde4c513f2e72a2d...\n        ```\n        \"\"\"\n        ref_doc_info: dict = self.docstore.get_all_ref_doc_info()\n        if as_dataframe:\n            doct_node_ids_dict = {}\n            file_name_doc = {}\n            doc_ids = list(ref_doc_info.keys())\n            for doc_id in doc_ids:\n                # get the DocRefInfo object for the first document\n                doc_ref = ref_doc_info[doc_id].to_dict()\n                # get the node ids for the first document\n                node_ids = doc_ref[\"node_ids\"]\n                file_name_doc[doc_id] = doc_ref[\"metadata\"].get(\"file_name\")\n                doct_node_ids_dict[doc_id] = node_ids\n\n            df = pd.DataFrame(\n                list(doct_node_ids_dict.items()), columns=[\"doc_id\", \"node_id\"]\n            )\n            df = df.explode(\"node_id\", ignore_index=True)\n\n            # merge the file name with the doc_id\n            file_name_df = pd.DataFrame(\n                file_name_doc.items(), columns=[\"doc_id\", \"file_name\"]\n            )\n            df = df.merge(file_name_df, on=\"doc_id\", how=\"left\", validate=\"many_to_one\")\n            data = df\n        else:\n            data = ref_doc_info\n        return data\n\n    def node_id_list(self) -&gt; List[str]:\n        \"\"\"Get the metadata of the nodes in the docstore.\n\n        Returns\n        -------\n        Dict[str, Dict[str, Any]]\n            The metadata of the nodes in the docstore.\n\n        Examples\n        --------\n        You can get the metadata of the nodes in the docstore using the `nodes_metadata` method:\n        ```python\n        &gt;&gt;&gt; store = Storage.load(\"examples/paul-graham-essay-storage\")\n        &gt;&gt;&gt; nodes_metadata = store.node_id_list()\n        &gt;&gt;&gt; print(nodes_metadata) # doctest: +SKIP\n        [\n            'cadde590b82362fc7a5f8ce0751c5b30b11c0f81369df7d83a76956bf22765b7',\n            '0567f3a9756983e1d040ec332255db94521ed5dc1b03fc7312f653c0e670a0bf',\n            'd5542515414f1bf30f6c21f0796af8bde4c513f2e72a2df21f0810f10826252f',\n            ...\n        ]\n        ```\n        \"\"\"\n        return list(self.docstore.docs.keys())\n\n    def delete_document(self, doc_id: str = None, document_name: str = None):\n        \"\"\"Delete a document from the docstore.\n\n        Parameters\n        ----------\n        doc_id: str, Optional, Default is None.\n            The ID of the document to delete.\n        document_name: str, optional, default is None.\n            The name of the document to delete.\n\n\n        Notes\n        -----\n        - If the `doc_id` is provided, the document with the specified ID will be deleted.\n        - If the `document_name` is provided, all the nodes related to the document with the specified name will be deleted.\n\n        Examples\n        --------\n        You can delete a document from the document store and all the nodes that are related to it using the\n        `delete_document` method by providing the `document_id`:\n\n        ```python\n        &gt;&gt;&gt; from llama_utils.retrieval.storage import Storage\n        &gt;&gt;&gt; store = Storage.load(\"examples/paul-graham-essay-storage\")\n        &gt;&gt;&gt; document_metadata = store.document_metadata\n        &gt;&gt;&gt; document_id = list(document_metadata().keys())[0]\n        &gt;&gt;&gt; print(document_id) # doctest: +SKIP\n        a25111e2e59f81bb7a0e3efb48255f4a5d4f722aaf13ffd112463fb98c227092\n        &gt;&gt;&gt; store.delete_document(document_id)\n\n        ```\n\n        Now if you check the document_metadata, you will find that the document is deleted:\n\n        ```python\n        &gt;&gt;&gt; print(store.document_metadata())\n        {}\n\n        ```\n\n        You can also delete a document by providing the `document_name`:\n        ```python\n        &gt;&gt;&gt; store = Storage.load(\"examples/paul-graham-essay-storage\")\n        &gt;&gt;&gt; print(store.node_metadata.head()) # doctest: +SKIP\n                       file_name                                            node_id\n        0  paul_graham_essay.txt  cadde590b82362fc7a5f8ce0751c5b30b11c0f81369df7...\n        1  paul_graham_essay.txt  0567f3a9756983e1d040ec332255db94521ed5dc1b03fc...\n        2  paul_graham_essay.txt  d5542515414f1bf30f6c21f0796af8bde4c513f2e72a2d...\n        3  paul_graham_essay.txt  120b69658a6c69ab8de3167b5ed0db77941a2b487e94d5...\n        4  paul_graham_essay.txt  c8587b5b5fc034bb08cd62cf0a082014f00fc09ccd2944...\n        &gt;&gt;&gt; store.delete_document(document_name=\"paul_graham_essay.txt\")\n\n        ```\n        \"\"\"\n        if not document_name:\n            if doc_id not in self.document_metadata().keys():\n                raise ValueError(f\"Document with ID {doc_id} not found.\")\n            self.docstore.delete_ref_doc(doc_id)\n        else:\n            node_ids = self.get_nodes_by_file_name(document_name)\n            for node_id in node_ids:\n                self.delete_node(node_id.node_id)\n\n    def delete_node(self, node_id: str):\n        \"\"\"Delete a node from the docstore.\n\n        Parameters\n        ----------\n        node_id: str\n            The ID of the node to delete.\n\n        Returns\n        -------\n        None\n\n        Examples\n        --------\n        You can delete a node from the document store using the `delete_node` method by providing the `node_id`:\n        ```\n        &gt;&gt;&gt; store = Storage.load(\"examples/paul-graham-essay-storage\")\n        &gt;&gt;&gt; node_id = store.node_id_list()[0]\n        &gt;&gt;&gt; print(node_id)\n        cadde590b82362fc7a5f8ce0751c5b30b11c0f81369df7d83a76956bf22765b7\n        &gt;&gt;&gt; store.delete_node(node_id)\n\n        ```\n        \"\"\"\n        self.docstore.delete_document(node_id)\n\n    def add_documents(\n        self,\n        docs: Sequence[Union[Document, TextNode]],\n        generate_id: bool = True,\n        update: bool = False,\n    ):\n        r\"\"\"Add node/documents to the store.\n\n        The `add_documents` method adds a node to the store. The node's id is a sha256 hash generated based on the\n        node's text content. if the `update` parameter is True and the nodes already exist the existing node will\n        be updated.\n\n        Parameters\n        ----------\n        docs: Sequence[TextNode/Document]\n            The node/documents to add to the store.\n        generate_id: bool, optional, default is False.\n            True if you want to generate a sha256 hash number as a doc_id based on the content of the nodes.\n        update: bool, optional, default is True.\n            True to update the document in the docstore if it already exist.\n\n        Returns\n        -------\n        None\n\n        Examples\n        --------\n        - First create the storage object:\n        ```python\n        &gt;&gt;&gt; store = Storage.create()\n\n        - Then you can add documents to the store using the `add_documents` method:\n\n        &gt;&gt;&gt; data_path = \"examples/data/essay\"\n        &gt;&gt;&gt; documents = Storage.read_documents(data_path)\n        &gt;&gt;&gt; store.add_documents(documents)\n        &gt;&gt;&gt; print(store)\n        &lt;BLANKLINE&gt;\n                Documents: 1\n                Indexes: 0\n        &lt;BLANKLINE&gt;\n\n        - once the documents are added successfully, they are added also to the metadata index.\n\n        &gt;&gt;&gt; metadata = store.node_metadata\n        &gt;&gt;&gt; print(metadata) # doctest: +SKIP\n                        file_name                                            node_id\n        0   paul_graham_essay.txt  cadde590b82362fc7a5f8ce0751c5b30b11c0f81369df7...\n\n        &gt;&gt;&gt; docstore = store.docstore\n        &gt;&gt;&gt; print(docstore.docs) # doctest: +SKIP\n\n        {\n            'a25111e2e59f81bb7a0e3efb48255f4a5d4f722aaf13ffd112463fb98c227092':\n                Document(\n                    id_='a25111e2e59f81bb7a0e3efb48255f4a5d4f722aaf13ffd112463fb98c227092',\n                    embedding=None,\n                    metadata={\n                        'file_path': 'examples\\\\data\\\\essay\\\\paul-graham-essay.txt',\n                        'file_name': 'paul-graham-essay.txt',\n                        'file_type': 'text/plain',\n                        'file_size': 75395,\n                        'creation_date': '2024-10-25',\n                        'last_modified_date': '2024-09-16'\n                    },\n                    excluded_embed_metadata_keys=['file_name'],\n                    excluded_llm_metadata_keys=['file_name'],\n                    relationships={},\n                    text='What I Worked On February 2021 Before college the two ...',\n                    mimetype='text/plain',\n                    start_char_idx=None,\n                    end_char_idx=None,\n                    text_template='{metadata_str}\\n\\n{content}',\n                    metadata_template='{key}: {value}',\n                    metadata_seperator='\\n'\n                )\n        }\n        ```\n        \"\"\"\n        for doc in docs:\n            # change the id to a sha256 hash if it is not already\n            if generate_id:\n                doc.node_id = generate_content_hash(doc.text)\n\n            if not self.docstore.document_exists(doc.node_id) or update:\n                self.docstore.add_documents([doc], allow_update=update)\n            else:\n                print(f\"Document with ID {doc.node_id} already exists. Skipping.\")\n\n    @staticmethod\n    def read_documents(\n        path: Union[str, Path],\n        split_into_nodes: bool = False,\n        chunk_size: int = 1024,\n        chunk_overlap: int = 100,\n        show_progress: bool = False,\n        num_workers: int = None,\n        recursive: bool = False,\n        **kwargs,\n    ) -&gt; List[Union[Document, TextNode]]:\n        r\"\"\"Read documents from a directory and optionally splits them into TextNodes.\n\n        the `read_documents` method reads documents from a directory and returns a list of documents.\n        the `doc_id` is sha256 hash number generated based on the document's text content.\n\n        Parameters\n        ----------\n        path: str\n            path to the directory containing the documents. or a single file path.\n        split_into_nodes : bool, optional\n            If True, splits documents into smaller TextNodes (default: False).\n        chunk_size : int, optional, default is 1024\n            The size of each text chunk. The `chunk_size` Defines the size of each split chunk (in characters).\n            - Larger values preserve more context but increase memory usage.\n            - Smaller values improve retrieval specificity but may lose context.\n        chunk_overlap : int, optional, default is 100.\n            The overlap size between chunks. The `chunk_overlap` ensures adjacent chunks have overlapping content to\n            preserve context.\n            - Higher overlap improves retrieval coherence but increases redundancy.\n            - Lower overlap minimizes redundancy but might break context.\n        show_progress: bool, optional, default is False.\n            True to show progress bar.\n        num_workers: int, optional, default is None.\n            The number of workers to use for loading the data.\n        recursive: bool, optional, default is False.\n            True to read from subdirectories.\n\n        Returns\n        -------\n        Sequence[Union[Document, TextNode]]\n            The documents/nodes read from the store.\n\n        Raises\n        ------\n        FileNotFoundError\n            If the directory is not found.\n\n        Notes\n        -----\n        The best values for `chunk_size` and `chunk_overlap` depend on the type of documents and retrieval needs.\n\n        | **Use Case**                                              | **Recommended `chunk_size`** | **Recommended `chunk_overlap`** |\n        |-----------------------------------------------------------|------------------------------|---------------------------------|\n        | **Short documents (FAQs, structured text, emails)**       | `256 - 512`                  | `50`                           |\n        | **General-purpose (news articles, reports, blog posts)**  | `512 - 1024`                 | `50 - 100`                     |\n        | **Long documents (PDFs, research papers, books)**         | `1024 - 2048`                | `100 - 200`                    |\n        | **Dense technical/scientific papers**                     | `1500 - 2500`                | `200 - 300`                    |\n        | **Conversational AI (chat context memory)**               | `512 - 1024`                 | `50 - 150`                     |\n        | **Legal/contract documents (precise context retention)**  | `2048 - 4096`                | `200 - 400`                    |\n\n        Best Practices:\n        - For most cases, `chunk_size=1024` and `chunk_overlap=100` work well.\n        - If working with FAQs, decrease `chunk_size` to `512`.\n        - If preserving long-form LLM context, use `2048+` with higher overlap.\n\n        Examples\n        --------\n        You can read documents from a directory as follows:\n        ```python\n        &gt;&gt;&gt; from llama_utils.retrieval.storage import Storage\n        &gt;&gt;&gt; data_path = \"examples/data/essay\"\n        &gt;&gt;&gt; docs = Storage.read_documents(data_path)\n        &gt;&gt;&gt; print(docs) # doctest: +SKIP\n        [\n            Document(\n                id_='a25111e2e59f81bb7a0e3efb48255**',\n                embedding=None,\n                metadata={\n                    'file_path': 'examples/data/essay/paul-graham-essay.txt',\n                    'file_name': 'paul-graham-essay.txt',\n                    'file_type': 'text/plain',\n                    'file_size': 75395,\n                    'creation_date': '2024-10-25',\n                    'last_modified_date': '2024-09-16'\n                },\n                excluded_embed_metadata_keys=['file_name'],\n                excluded_llm_metadata_keys=['file_name'],\n                relationships={},\n                text='What I Worked On\\n\\nFebruary 2021\\n\\nBefore college the two main things ****',\n                mimetype='text/plain',\n                start_char_idx=None,\n                end_char_idx=None,\n        4        text_template='{metadata_str}\\n\\n{content}',\n                metadata_template='{key}: {value}',\n                metadata_seperator='\\n'\n            )\n        ]\n        ```\n\n        You can also use the `split_into_nodes` parameter to split the documents into smaller nodes:\n\n        ```python\n        &gt;&gt;&gt; docs = Storage.read_documents(data_path, split_into_nodes=True)\n        &gt;&gt;&gt; print(len(docs))\n        20\n        &gt;&gt;&gt; print(docs[0]) # doctest: +SKIP\n        Node ID: bfdf48ff-3c2b-49a8-ae25-7a837158d2dc\n        Text: What I Worked On    February 2021    Before college the two main\n        things I worked on, outside of school, were writing and programming. I\n        didn't write essays. I wrote what beginning writers were supposed to\n        write then, and probably still are: short stories. My stories were\n        awful. They had hardly any plot, just characters with strong feelings,\n        whic...\n        ```\n        \"\"\"\n        if isinstance(path, str):\n            path = Path(path)\n\n        if not path.exists():\n            raise FileNotFoundError(f\"Directory not found: {path}\")\n\n        if path.is_file():\n            reader = SimpleDirectoryReader(input_files=[path])\n        else:\n            reader = SimpleDirectoryReader(path, recursive=recursive, **kwargs)\n\n        documents = reader.load_data(\n            show_progress=show_progress, num_workers=num_workers, **kwargs\n        )\n\n        if split_into_nodes:\n            # Split documents into nodes.\n            splitter = SentenceSplitter(\n                chunk_size=chunk_size, chunk_overlap=chunk_overlap\n            )\n            documents = splitter.get_nodes_from_documents(documents)\n\n        for doc in documents:\n            # exclude the file name from the llm metadata to avoid affecting the llm by weird file names\n            doc.excluded_llm_metadata_keys = [\"file_name\"]\n            # exclude the file name from the embeddings' metadata to avoid affecting the llm by weird file names\n            doc.excluded_embed_metadata_keys = [\"file_name\"]\n            # Generate a hash based on the document's text content\n            content_hash = generate_content_hash(doc.text)\n            # Assign the hash as the doc_id\n            doc.metadata[\"content-hash\"] = content_hash\n\n        return documents\n\n    def get_nodes_by_file_name(\n        self, file_name: str, exact_match: bool = False\n    ) -&gt; List[BaseNode]:\n        r\"\"\"Get nodes by file name.\n\n        Parameters\n        ----------\n        file_name: str\n            The file name to search for.\n        exact_match: bool, optional, default is False\n            True to search for an exact match, False to search for a partial match.\n\n        Returns\n        -------\n        List[TextNode]\n            The nodes with the specified file name.\n\n        Examples\n        --------\n        - First read the storage context from a directory:\n        ```python\n        &gt;&gt;&gt; storage_dir = \"examples/paul-graham-essay-storage\"\n        &gt;&gt;&gt; store = Storage.load(storage_dir)\n        &gt;&gt;&gt; print(store)\n        &lt;BLANKLINE&gt;\n                Documents: 53\n                Indexes: 2\n        &lt;BLANKLINE&gt;\n\n        - The storage context contains the following data:\n\n        &gt;&gt;&gt; print(store.node_metadata.head(3))\n                       file_name                                            node_id\n        0  paul_graham_essay.txt  cadde590b82362fc7a5f8ce0751c5b30b11c0f81369df7...\n        1  paul_graham_essay.txt  0567f3a9756983e1d040ec332255db94521ed5dc1b03fc...\n        2  paul_graham_essay.txt  d5542515414f1bf30f6c21f0796af8bde4c513f2e72a2d...\n\n\n        You can get all the nodes for file `paul_graham_essay.txt` as follows:\n\n\n        &gt;&gt;&gt; nodes = store.get_nodes_by_file_name(\"paul_graham_essay.txt\")\n        &gt;&gt;&gt; nodes[0] # doctest: +SKIP\n        TextNode(\n            id_='cadde590b82362fc7a5f8ce0751c5b30b11c0f81369df7d83a76956bf22765b7',\n            embedding=None,\n            metadata={\n                'file_path': 'examples\\\\data\\\\paul_graham_essay.txt',\n                'file_name': 'paul_graham_essay.txt',\n                'file_type': 'text/plain',\n                'file_size': 75395,\n                'creation_date': '2024-10-24',\n                'last_modified_date': '2024-09-16',\n                'document_title': 'Based on the candidate titles and content, I would suggest a comprehensive title\n                    that captures the essence of the text. Here\\'s a potential title:\\n\\n\"From Early Days ***'\n            },\n            excluded_embed_metadata_keys=['file_name'],\n            excluded_llm_metadata_keys=['file_name'],\n            relationships={\n                &lt;NodeRelationship.SOURCE: '1'&gt;:\n                RelatedNodeInfo(\n                    node_id='a25111e2e59f81bb7a0e3efb48255f4a5d4f722aaf13ffd112463fb98c227092',\n                    node_type=&lt;ObjectType.DOCUMENT: '4'&gt;,\n                    metadata={\n                        'file_path': 'examples\\\\data\\\\paul_graham_essay.txt',\n                        'file_name': 'paul_graham_essay.txt',\n                        'file_type': 'text/plain',\n                        'file_size': 75395,\n                        'creation_date': '2024-10-24',\n                        'last_modified_date': '2024-09-16'\n                    },\n                    hash='2a494d84cd0ab1e73396773258b809a47739482c90b80d5f61d374e754c3ef06'\n                ),\n                &lt;NodeRelationship.NEXT: '3'&gt;: RelatedNodeInfo(node_id='15478c7a-fdab-40c8-92e7-42973b9d3b28', node_type=&lt;ObjectType.TEXT: '1'&gt;, metadata={}, hash='424546c0aa78015988ced235522cdd238633d5edc1b92667cbdcda44d72613ec')}, text='What I Worked On\\r\\n\\r\\nFebruary 2021\\r\\n\\r\\nBefore college the two main things I worked on, outside of school, were writing and programming. I didn\\'t write essays. I wrote what beginning writers were supposed to write then, and probably still are: short stories. My stories were awful. They had hardly any plot, just characters with strong feelings, which I imagined made them deep.\\r\\n\\r\\nThe first programs I tried writing were on the IBM 1401 that our school district used for what was then called \"data processing.\" This was in 9th grade, so I was 13 or 14. The school district\\'s 1401 happened to be in the basement of our junior high school, and my friend Rich Draves and I got permission to use it. It was like a mini Bond villain\\'s lair down there, with all these alien-looking machines \u2014 CPU, disk drives, printer, card reader \u2014 sitting up on a raised floor under bright fluorescent lights.\\r\\n\\r\\nThe language we used was an early version of Fortran. You had to type programs on punch cards, then stack them in the card reader and press a button to load the program into memory and run it. The result would ordinarily be to print something on the spectacularly loud printer.\\r\\n\\r\\nI was puzzled by the 1401. I couldn\\'t figure out what to do with it. And in retrospect there\\'s not much I could have',\n                mimetype='text/plain',\n                start_char_idx=4,\n                end_char_idx=2027,\n                text_template='[Excerpt from document]\\n{metadata_str}\\nExcerpt:\\n-----\\n{content}\\n-----\\n',\n                metadata_template='{key}: {value}', metadata_seperator='\\n'\n                )\n        ```\n        \"\"\"\n        metadata_index = self.node_metadata\n        if exact_match:\n            doc_ids = metadata_index.loc[\n                metadata_index[\"file_name\"] == file_name, \"node_id\"\n            ].values\n        else:\n            doc_ids = metadata_index.loc[\n                metadata_index[\"file_name\"].str.contains(file_name, regex=True),\n                \"node_id\",\n            ].values\n        docs = self.docstore.get_nodes(doc_ids)\n        return docs\n\n    @staticmethod\n    def apply_extractors(\n        documents: List[Union[Document, BaseNode]],\n        extractors: Dict[str, Dict[str, int]] = None,\n    ) -&gt; Sequence[BaseNode]:\n        r\"\"\"Extract information from a list of documents using predefined extractors.\n\n        Parameters\n        ----------\n        documents : List[Union[Document, BaseNode]]\n            List of documents or nodes to process. Each document should be an instance of `Document` or `BaseNode`.\n        extractors : Dict[str, Dict[str, Any]], optional\n            A dictionary defining the information extraction configuration. If not provided, default extractors will be used.\n\n            - Example format for `info`\n\n             .. code-block:: rst\n\n                {\n                    \"text_splitter\": {\"separator\": \" \", \"chunk_size\": 512, \"chunk_overlap\": 128},\n                    \"title\": {\"nodes\": 5},\n                    \"question_answer\": {\"questions\": 3},\n                    \"summary\": {\"summaries\": [\"prev\", \"self\"]},\n                    \"keyword\": {\"keywords\": 10},\n                    \"entity\": {\"prediction_threshold\": 0.5}\n                }\n\n\n        Returns\n        -------\n        Sequence[BaseNode]\n            A sequence of processed nodes with extracted metadata. Extracted data is stored in the node's `metadata`\n            field under the following keys:\n\n                - \"document_title\": Extracted title.\n                - \"questions_this_excerpt_can_answer\": Extracted questions.\n                - \"summary\": Extracted summaries.\n                - \"keywords\": Extracted keywords.\n                - \"entities\": Extracted entities.\n\n        Examples\n        --------\n        First create a config loader object:\n        ```python\n        &gt;&gt;&gt; from llama_utils.utils.config_loader import ConfigLoader\n        &gt;&gt;&gt; config_loader = ConfigLoader()\n\n        ```\n\n        You can extract information from a single document as follows:\n\n        ```python\n        &gt;&gt;&gt; docs = [Document(text=\"Sample text\", metadata={})]\n        &gt;&gt;&gt; extractors_info = {\n        ...     \"text_splitter\": {\"separator\": \" \", \"chunk_size\": 512, \"chunk_overlap\": 128},\n        ...     \"title\": {\"nodes\": 5},\n        ...     \"summary\": {\"summaries\": [\"prev\", \"self\"]}\n        ... }\n        &gt;&gt;&gt; extracted_nodes = Storage.apply_extractors(docs, extractors_info) # doctest: +SKIP\n        Parsing nodes: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:00&lt;00:00, 1000.31it/s]\n        100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:05&lt;00:00,  5.82s/it]\n        100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:00&lt;00:00,  1.54it/s]\n        &gt;&gt;&gt; len(extracted_nodes) # doctest: +SKIP\n        1\n        &gt;&gt;&gt; print(extracted_nodes[0].document_metadata) # doctest: +SKIP\n        {\n            'document_title': \"I'm excited to help! Unfortunately, there doesn't seem to be any text provided.\n                Please go ahead and share the sample text, and I'll do my best to give you a comprehensive title\n                that summarizes all the unique entities, titles, or themes found in it.\",\n            'section_summary': \"I apologize, but since there is no provided text, I have nothing to summarize.\n                Please provide the sample text, and I'll be happy to help you summarize the key topics and\n                entities!\"\n        }\n        ```\n        You can extract information from a list of documents as follows:\n\n        ```python\n        &gt;&gt;&gt; data_path = \"examples/data/essay\"\n        &gt;&gt;&gt; docs = Storage.read_documents(data_path)\n        &gt;&gt;&gt; extractors_info = {\n        ...     \"text_splitter\": {\"separator\": \" \", \"chunk_size\": 512, \"chunk_overlap\": 128},\n        ...     \"title\": {\"nodes\": 5},\n        ...     \"question_answer\": {\"questions\": 1},\n        ... }\n\n        &gt;&gt;&gt; extracted_docs = Storage.apply_extractors(docs, extractors_info) # doctest: +SKIP\n        Parsing nodes: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:00&lt;00:00,  4.52it/s]\n        100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5/5 [00:15&lt;00:00,  3.19s/it]\n        100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 53/53 [03:46&lt;00:00,  4.27s/it]\n         26%|\u2588\u2588\u258b       | 14/53 [00:48&lt;02:08,  3.29s/it]\n        100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 53/53 [00:47&lt;00:00,  1.13it/s]\n        &gt;&gt;&gt; len(extracted_docs) # doctest: +SKIP\n        53\n        &gt;&gt;&gt; print(extracted_docs[0]) # doctest: +SKIP\n        Node ID: 9b4fca22-7f1f-4876-bb71-d4b29500daa3\n        Text: What I Worked On    February 2021    Before college the two main\n        things I worked on, outside of school, were writing and programming. I\n        didn't write essays. I wrote what beginning writers were supposed to\n        write then, and probably still are: short stories. My stories were\n        awful. They had hardly any plot, just characters with strong feelings,\n        whic...\n        &gt;&gt;&gt; print(extracted_docs[0].extra_info) # doctest: +SKIP\n        {\n            'file_path': 'examples\\\\data\\\\essay\\\\paul-graham-essay.txt',\n            'file_name': 'paul-graham-essay.txt',\n            'file_type': 'text/plain',\n            'file_size': 75395,\n            'creation_date': '2024-10-25',\n            'last_modified_date': '2024-09-16',\n            'document_title': 'After reviewing the potential titles and themes mentioned in the context,\n                I would suggest the following comprehensive title \\n\\n\"A Personal Odyssey ***,'.\n            'questions_this_excerpt_can_answer': \"Based on the provided context, here's a question that this\n                context can specifically answer:\\n\\nWhat was Paul Graham's experience with the IBM ***\",\n            'section_summary': 'Here is a summary of the key topics and entities in the section:\\n\\n**Key\n                Topics:**\\n\\n1. Paul Graham\\'s early experiences with writing and programming.\\n2. His work on ***',\n            'excerpt_keywords': 'Here are three unique keywords for this document:\\n\\nPaul Graham, IBM 1401,\n                Microcomputers'\n        }\n        ```\n        \"\"\"\n        extractors = EXTRACTORS.copy() if extractors is None else extractors\n\n        extractors = [\n            EXTRACTORS[key](**val)\n            for key, val in extractors.items()\n            if key in EXTRACTORS\n        ]\n        pipeline = IngestionPipeline(transformations=extractors)\n\n        nodes = pipeline.run(\n            documents=documents,\n            in_place=True,\n            show_progress=True,\n        )\n        return nodes\n</code></pre>"},{"location":"api/storage.html#llama_utils.retrieval.storage.Storage.docstore","title":"<code>docstore: BaseDocumentStore</code>  <code>property</code>","text":"<p>Get the document store.</p>"},{"location":"api/storage.html#llama_utils.retrieval.storage.Storage.index_store","title":"<code>index_store: BaseIndexStore</code>  <code>property</code>","text":"<p>Get the index store.</p>"},{"location":"api/storage.html#llama_utils.retrieval.storage.Storage.node_metadata","title":"<code>node_metadata: pd.DataFrame</code>  <code>property</code>","text":"<p>Get the metadata index.</p>"},{"location":"api/storage.html#llama_utils.retrieval.storage.Storage.store","title":"<code>store: StorageContext</code>  <code>property</code>","text":"<p>Get the Storage context.</p>"},{"location":"api/storage.html#llama_utils.retrieval.storage.Storage.vector_store","title":"<code>vector_store</code>  <code>property</code>","text":"<p>Get the vector store.</p>"},{"location":"api/storage.html#llama_utils.retrieval.storage.Storage.__init__","title":"<code>__init__(storage_context: StorageContext = None)</code>","text":"<p>Initialize the Storage.</p> <p>The constructor method takes a llama_index.core.StorageContext object that is a native llamaIndex object and a metadata table (pandas.DataFrame-optional) as input.</p> <p>Parameters:</p> Name Type Description Default <code>storage_context</code> <code>StorageContext</code> <p>the StorageContext object that is created by LlamaIndex (a native llamaIndex object).</p> <code>None</code> Source code in <code>src/llama_utils/retrieval/storage.py</code> <pre><code>def __init__(\n    self,\n    storage_context: StorageContext = None,\n):\n    \"\"\"Initialize the Storage.\n\n    The constructor method takes a llama_index.core.StorageContext object that is a native llamaIndex object\n    and a metadata table (pandas.DataFrame-optional) as input.\n\n    Parameters\n    ----------\n    storage_context: str, optional, default is None.\n        the StorageContext object that is created by LlamaIndex (a native llamaIndex object).\n\n    \"\"\"\n    if not isinstance(storage_context, StorageContext):\n        raise ValueError(\n            f\"Storage class should be instantiated using StorageContext object, given: {storage_context}\"\n        )\n\n    self._store = storage_context\n</code></pre>"},{"location":"api/storage.html#llama_utils.retrieval.storage.Storage.__repr__","title":"<code>__repr__()</code>","text":"<p>Return a string representation of the storage.</p> Source code in <code>src/llama_utils/retrieval/storage.py</code> <pre><code>def __repr__(self):\n    \"\"\"Return a string representation of the storage.\"\"\"\n    message = f\"\"\"\n    Documents: {len(self.docstore.docs)}\n    Indexes: {len(self.index_store.index_structs())}\n    \"\"\"\n    return message\n</code></pre>"},{"location":"api/storage.html#llama_utils.retrieval.storage.Storage.__str__","title":"<code>__str__()</code>","text":"<p>Return a string representation of the storage.</p> Source code in <code>src/llama_utils/retrieval/storage.py</code> <pre><code>def __str__(self):\n    \"\"\"Return a string representation of the storage.\"\"\"\n    message = f\"\"\"\n    Documents: {len(self.docstore.docs)}\n    Indexes: {len(self.index_store.index_structs())}\n    \"\"\"\n    return message\n</code></pre>"},{"location":"api/storage.html#llama_utils.retrieval.storage.Storage.add_documents","title":"<code>add_documents(docs: Sequence[Union[Document, TextNode]], generate_id: bool = True, update: bool = False)</code>","text":"<p>Add node/documents to the store.</p> <p>The <code>add_documents</code> method adds a node to the store. The node's id is a sha256 hash generated based on the node's text content. if the <code>update</code> parameter is True and the nodes already exist the existing node will be updated.</p> <p>Parameters:</p> Name Type Description Default <code>docs</code> <code>Sequence[Union[Document, TextNode]]</code> <p>The node/documents to add to the store.</p> required <code>generate_id</code> <code>bool</code> <p>True if you want to generate a sha256 hash number as a doc_id based on the content of the nodes.</p> <code>True</code> <code>update</code> <code>bool</code> <p>True to update the document in the docstore if it already exist.</p> <code>False</code> <p>Returns:</p> Type Description <code>None</code> <p>Examples:</p> <ul> <li>First create the storage object: <pre><code>&gt;&gt;&gt; store = Storage.create()\n\n- Then you can add documents to the store using the `add_documents` method:\n\n&gt;&gt;&gt; data_path = \"examples/data/essay\"\n&gt;&gt;&gt; documents = Storage.read_documents(data_path)\n&gt;&gt;&gt; store.add_documents(documents)\n&gt;&gt;&gt; print(store)\n&lt;BLANKLINE&gt;\n        Documents: 1\n        Indexes: 0\n&lt;BLANKLINE&gt;\n\n- once the documents are added successfully, they are added also to the metadata index.\n\n&gt;&gt;&gt; metadata = store.node_metadata\n&gt;&gt;&gt; print(metadata) # doctest: +SKIP\n                file_name                                            node_id\n0   paul_graham_essay.txt  cadde590b82362fc7a5f8ce0751c5b30b11c0f81369df7...\n\n&gt;&gt;&gt; docstore = store.docstore\n&gt;&gt;&gt; print(docstore.docs) # doctest: +SKIP\n\n{\n    'a25111e2e59f81bb7a0e3efb48255f4a5d4f722aaf13ffd112463fb98c227092':\n        Document(\n            id_='a25111e2e59f81bb7a0e3efb48255f4a5d4f722aaf13ffd112463fb98c227092',\n            embedding=None,\n            metadata={\n                'file_path': 'examples\\\\data\\\\essay\\\\paul-graham-essay.txt',\n                'file_name': 'paul-graham-essay.txt',\n                'file_type': 'text/plain',\n                'file_size': 75395,\n                'creation_date': '2024-10-25',\n                'last_modified_date': '2024-09-16'\n            },\n            excluded_embed_metadata_keys=['file_name'],\n            excluded_llm_metadata_keys=['file_name'],\n            relationships={},\n            text='What I Worked On February 2021 Before college the two ...',\n            mimetype='text/plain',\n            start_char_idx=None,\n            end_char_idx=None,\n            text_template='{metadata_str}\\n\\n{content}',\n            metadata_template='{key}: {value}',\n            metadata_seperator='\\n'\n        )\n}\n</code></pre></li> </ul> Source code in <code>src/llama_utils/retrieval/storage.py</code> <pre><code>def add_documents(\n    self,\n    docs: Sequence[Union[Document, TextNode]],\n    generate_id: bool = True,\n    update: bool = False,\n):\n    r\"\"\"Add node/documents to the store.\n\n    The `add_documents` method adds a node to the store. The node's id is a sha256 hash generated based on the\n    node's text content. if the `update` parameter is True and the nodes already exist the existing node will\n    be updated.\n\n    Parameters\n    ----------\n    docs: Sequence[TextNode/Document]\n        The node/documents to add to the store.\n    generate_id: bool, optional, default is False.\n        True if you want to generate a sha256 hash number as a doc_id based on the content of the nodes.\n    update: bool, optional, default is True.\n        True to update the document in the docstore if it already exist.\n\n    Returns\n    -------\n    None\n\n    Examples\n    --------\n    - First create the storage object:\n    ```python\n    &gt;&gt;&gt; store = Storage.create()\n\n    - Then you can add documents to the store using the `add_documents` method:\n\n    &gt;&gt;&gt; data_path = \"examples/data/essay\"\n    &gt;&gt;&gt; documents = Storage.read_documents(data_path)\n    &gt;&gt;&gt; store.add_documents(documents)\n    &gt;&gt;&gt; print(store)\n    &lt;BLANKLINE&gt;\n            Documents: 1\n            Indexes: 0\n    &lt;BLANKLINE&gt;\n\n    - once the documents are added successfully, they are added also to the metadata index.\n\n    &gt;&gt;&gt; metadata = store.node_metadata\n    &gt;&gt;&gt; print(metadata) # doctest: +SKIP\n                    file_name                                            node_id\n    0   paul_graham_essay.txt  cadde590b82362fc7a5f8ce0751c5b30b11c0f81369df7...\n\n    &gt;&gt;&gt; docstore = store.docstore\n    &gt;&gt;&gt; print(docstore.docs) # doctest: +SKIP\n\n    {\n        'a25111e2e59f81bb7a0e3efb48255f4a5d4f722aaf13ffd112463fb98c227092':\n            Document(\n                id_='a25111e2e59f81bb7a0e3efb48255f4a5d4f722aaf13ffd112463fb98c227092',\n                embedding=None,\n                metadata={\n                    'file_path': 'examples\\\\data\\\\essay\\\\paul-graham-essay.txt',\n                    'file_name': 'paul-graham-essay.txt',\n                    'file_type': 'text/plain',\n                    'file_size': 75395,\n                    'creation_date': '2024-10-25',\n                    'last_modified_date': '2024-09-16'\n                },\n                excluded_embed_metadata_keys=['file_name'],\n                excluded_llm_metadata_keys=['file_name'],\n                relationships={},\n                text='What I Worked On February 2021 Before college the two ...',\n                mimetype='text/plain',\n                start_char_idx=None,\n                end_char_idx=None,\n                text_template='{metadata_str}\\n\\n{content}',\n                metadata_template='{key}: {value}',\n                metadata_seperator='\\n'\n            )\n    }\n    ```\n    \"\"\"\n    for doc in docs:\n        # change the id to a sha256 hash if it is not already\n        if generate_id:\n            doc.node_id = generate_content_hash(doc.text)\n\n        if not self.docstore.document_exists(doc.node_id) or update:\n            self.docstore.add_documents([doc], allow_update=update)\n        else:\n            print(f\"Document with ID {doc.node_id} already exists. Skipping.\")\n</code></pre>"},{"location":"api/storage.html#llama_utils.retrieval.storage.Storage.apply_extractors","title":"<code>apply_extractors(documents: List[Union[Document, BaseNode]], extractors: Dict[str, Dict[str, int]] = None) -&gt; Sequence[BaseNode]</code>  <code>staticmethod</code>","text":"<p>Extract information from a list of documents using predefined extractors.</p> <p>Parameters:</p> Name Type Description Default <code>documents</code> <code>List[Union[Document, BaseNode]]</code> <p>List of documents or nodes to process. Each document should be an instance of <code>Document</code> or <code>BaseNode</code>.</p> required <code>extractors</code> <code>Dict[str, Dict[str, Any]]</code> <p>A dictionary defining the information extraction configuration. If not provided, default extractors will be used.</p> <ul> <li>Example format for <code>info</code></li> </ul> <p>.. code-block:: rst</p> <pre><code>{\n    \"text_splitter\": {\"separator\": \" \", \"chunk_size\": 512, \"chunk_overlap\": 128},\n    \"title\": {\"nodes\": 5},\n    \"question_answer\": {\"questions\": 3},\n    \"summary\": {\"summaries\": [\"prev\", \"self\"]},\n    \"keyword\": {\"keywords\": 10},\n    \"entity\": {\"prediction_threshold\": 0.5}\n}\n</code></pre> <code>None</code> <p>Returns:</p> Type Description <code>Sequence[BaseNode]</code> <p>A sequence of processed nodes with extracted metadata. Extracted data is stored in the node's <code>metadata</code> field under the following keys:</p> <pre><code>- \"document_title\": Extracted title.\n- \"questions_this_excerpt_can_answer\": Extracted questions.\n- \"summary\": Extracted summaries.\n- \"keywords\": Extracted keywords.\n- \"entities\": Extracted entities.\n</code></pre> <p>Examples:</p> <p>First create a config loader object: <pre><code>&gt;&gt;&gt; from llama_utils.utils.config_loader import ConfigLoader\n&gt;&gt;&gt; config_loader = ConfigLoader()\n</code></pre></p> <p>You can extract information from a single document as follows:</p> <p><pre><code>&gt;&gt;&gt; docs = [Document(text=\"Sample text\", metadata={})]\n&gt;&gt;&gt; extractors_info = {\n...     \"text_splitter\": {\"separator\": \" \", \"chunk_size\": 512, \"chunk_overlap\": 128},\n...     \"title\": {\"nodes\": 5},\n...     \"summary\": {\"summaries\": [\"prev\", \"self\"]}\n... }\n&gt;&gt;&gt; extracted_nodes = Storage.apply_extractors(docs, extractors_info) # doctest: +SKIP\nParsing nodes: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:00&lt;00:00, 1000.31it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:05&lt;00:00,  5.82s/it]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:00&lt;00:00,  1.54it/s]\n&gt;&gt;&gt; len(extracted_nodes) # doctest: +SKIP\n1\n&gt;&gt;&gt; print(extracted_nodes[0].document_metadata) # doctest: +SKIP\n{\n    'document_title': \"I'm excited to help! Unfortunately, there doesn't seem to be any text provided.\n        Please go ahead and share the sample text, and I'll do my best to give you a comprehensive title\n        that summarizes all the unique entities, titles, or themes found in it.\",\n    'section_summary': \"I apologize, but since there is no provided text, I have nothing to summarize.\n        Please provide the sample text, and I'll be happy to help you summarize the key topics and\n        entities!\"\n}\n</code></pre> You can extract information from a list of documents as follows:</p> <pre><code>&gt;&gt;&gt; data_path = \"examples/data/essay\"\n&gt;&gt;&gt; docs = Storage.read_documents(data_path)\n&gt;&gt;&gt; extractors_info = {\n...     \"text_splitter\": {\"separator\": \" \", \"chunk_size\": 512, \"chunk_overlap\": 128},\n...     \"title\": {\"nodes\": 5},\n...     \"question_answer\": {\"questions\": 1},\n... }\n\n&gt;&gt;&gt; extracted_docs = Storage.apply_extractors(docs, extractors_info) # doctest: +SKIP\nParsing nodes: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:00&lt;00:00,  4.52it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5/5 [00:15&lt;00:00,  3.19s/it]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 53/53 [03:46&lt;00:00,  4.27s/it]\n 26%|\u2588\u2588\u258b       | 14/53 [00:48&lt;02:08,  3.29s/it]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 53/53 [00:47&lt;00:00,  1.13it/s]\n&gt;&gt;&gt; len(extracted_docs) # doctest: +SKIP\n53\n&gt;&gt;&gt; print(extracted_docs[0]) # doctest: +SKIP\nNode ID: 9b4fca22-7f1f-4876-bb71-d4b29500daa3\nText: What I Worked On    February 2021    Before college the two main\nthings I worked on, outside of school, were writing and programming. I\ndidn't write essays. I wrote what beginning writers were supposed to\nwrite then, and probably still are: short stories. My stories were\nawful. They had hardly any plot, just characters with strong feelings,\nwhic...\n&gt;&gt;&gt; print(extracted_docs[0].extra_info) # doctest: +SKIP\n{\n    'file_path': 'examples\\\\data\\\\essay\\\\paul-graham-essay.txt',\n    'file_name': 'paul-graham-essay.txt',\n    'file_type': 'text/plain',\n    'file_size': 75395,\n    'creation_date': '2024-10-25',\n    'last_modified_date': '2024-09-16',\n    'document_title': 'After reviewing the potential titles and themes mentioned in the context,\n        I would suggest the following comprehensive title \\n\\n\"A Personal Odyssey ***,'.\n    'questions_this_excerpt_can_answer': \"Based on the provided context, here's a question that this\n        context can specifically answer:\\n\\nWhat was Paul Graham's experience with the IBM ***\",\n    'section_summary': 'Here is a summary of the key topics and entities in the section:\\n\\n**Key\n        Topics:**\\n\\n1. Paul Graham\\'s early experiences with writing and programming.\\n2. His work on ***',\n    'excerpt_keywords': 'Here are three unique keywords for this document:\\n\\nPaul Graham, IBM 1401,\n        Microcomputers'\n}\n</code></pre> Source code in <code>src/llama_utils/retrieval/storage.py</code> <pre><code>@staticmethod\ndef apply_extractors(\n    documents: List[Union[Document, BaseNode]],\n    extractors: Dict[str, Dict[str, int]] = None,\n) -&gt; Sequence[BaseNode]:\n    r\"\"\"Extract information from a list of documents using predefined extractors.\n\n    Parameters\n    ----------\n    documents : List[Union[Document, BaseNode]]\n        List of documents or nodes to process. Each document should be an instance of `Document` or `BaseNode`.\n    extractors : Dict[str, Dict[str, Any]], optional\n        A dictionary defining the information extraction configuration. If not provided, default extractors will be used.\n\n        - Example format for `info`\n\n         .. code-block:: rst\n\n            {\n                \"text_splitter\": {\"separator\": \" \", \"chunk_size\": 512, \"chunk_overlap\": 128},\n                \"title\": {\"nodes\": 5},\n                \"question_answer\": {\"questions\": 3},\n                \"summary\": {\"summaries\": [\"prev\", \"self\"]},\n                \"keyword\": {\"keywords\": 10},\n                \"entity\": {\"prediction_threshold\": 0.5}\n            }\n\n\n    Returns\n    -------\n    Sequence[BaseNode]\n        A sequence of processed nodes with extracted metadata. Extracted data is stored in the node's `metadata`\n        field under the following keys:\n\n            - \"document_title\": Extracted title.\n            - \"questions_this_excerpt_can_answer\": Extracted questions.\n            - \"summary\": Extracted summaries.\n            - \"keywords\": Extracted keywords.\n            - \"entities\": Extracted entities.\n\n    Examples\n    --------\n    First create a config loader object:\n    ```python\n    &gt;&gt;&gt; from llama_utils.utils.config_loader import ConfigLoader\n    &gt;&gt;&gt; config_loader = ConfigLoader()\n\n    ```\n\n    You can extract information from a single document as follows:\n\n    ```python\n    &gt;&gt;&gt; docs = [Document(text=\"Sample text\", metadata={})]\n    &gt;&gt;&gt; extractors_info = {\n    ...     \"text_splitter\": {\"separator\": \" \", \"chunk_size\": 512, \"chunk_overlap\": 128},\n    ...     \"title\": {\"nodes\": 5},\n    ...     \"summary\": {\"summaries\": [\"prev\", \"self\"]}\n    ... }\n    &gt;&gt;&gt; extracted_nodes = Storage.apply_extractors(docs, extractors_info) # doctest: +SKIP\n    Parsing nodes: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:00&lt;00:00, 1000.31it/s]\n    100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:05&lt;00:00,  5.82s/it]\n    100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:00&lt;00:00,  1.54it/s]\n    &gt;&gt;&gt; len(extracted_nodes) # doctest: +SKIP\n    1\n    &gt;&gt;&gt; print(extracted_nodes[0].document_metadata) # doctest: +SKIP\n    {\n        'document_title': \"I'm excited to help! Unfortunately, there doesn't seem to be any text provided.\n            Please go ahead and share the sample text, and I'll do my best to give you a comprehensive title\n            that summarizes all the unique entities, titles, or themes found in it.\",\n        'section_summary': \"I apologize, but since there is no provided text, I have nothing to summarize.\n            Please provide the sample text, and I'll be happy to help you summarize the key topics and\n            entities!\"\n    }\n    ```\n    You can extract information from a list of documents as follows:\n\n    ```python\n    &gt;&gt;&gt; data_path = \"examples/data/essay\"\n    &gt;&gt;&gt; docs = Storage.read_documents(data_path)\n    &gt;&gt;&gt; extractors_info = {\n    ...     \"text_splitter\": {\"separator\": \" \", \"chunk_size\": 512, \"chunk_overlap\": 128},\n    ...     \"title\": {\"nodes\": 5},\n    ...     \"question_answer\": {\"questions\": 1},\n    ... }\n\n    &gt;&gt;&gt; extracted_docs = Storage.apply_extractors(docs, extractors_info) # doctest: +SKIP\n    Parsing nodes: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:00&lt;00:00,  4.52it/s]\n    100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5/5 [00:15&lt;00:00,  3.19s/it]\n    100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 53/53 [03:46&lt;00:00,  4.27s/it]\n     26%|\u2588\u2588\u258b       | 14/53 [00:48&lt;02:08,  3.29s/it]\n    100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 53/53 [00:47&lt;00:00,  1.13it/s]\n    &gt;&gt;&gt; len(extracted_docs) # doctest: +SKIP\n    53\n    &gt;&gt;&gt; print(extracted_docs[0]) # doctest: +SKIP\n    Node ID: 9b4fca22-7f1f-4876-bb71-d4b29500daa3\n    Text: What I Worked On    February 2021    Before college the two main\n    things I worked on, outside of school, were writing and programming. I\n    didn't write essays. I wrote what beginning writers were supposed to\n    write then, and probably still are: short stories. My stories were\n    awful. They had hardly any plot, just characters with strong feelings,\n    whic...\n    &gt;&gt;&gt; print(extracted_docs[0].extra_info) # doctest: +SKIP\n    {\n        'file_path': 'examples\\\\data\\\\essay\\\\paul-graham-essay.txt',\n        'file_name': 'paul-graham-essay.txt',\n        'file_type': 'text/plain',\n        'file_size': 75395,\n        'creation_date': '2024-10-25',\n        'last_modified_date': '2024-09-16',\n        'document_title': 'After reviewing the potential titles and themes mentioned in the context,\n            I would suggest the following comprehensive title \\n\\n\"A Personal Odyssey ***,'.\n        'questions_this_excerpt_can_answer': \"Based on the provided context, here's a question that this\n            context can specifically answer:\\n\\nWhat was Paul Graham's experience with the IBM ***\",\n        'section_summary': 'Here is a summary of the key topics and entities in the section:\\n\\n**Key\n            Topics:**\\n\\n1. Paul Graham\\'s early experiences with writing and programming.\\n2. His work on ***',\n        'excerpt_keywords': 'Here are three unique keywords for this document:\\n\\nPaul Graham, IBM 1401,\n            Microcomputers'\n    }\n    ```\n    \"\"\"\n    extractors = EXTRACTORS.copy() if extractors is None else extractors\n\n    extractors = [\n        EXTRACTORS[key](**val)\n        for key, val in extractors.items()\n        if key in EXTRACTORS\n    ]\n    pipeline = IngestionPipeline(transformations=extractors)\n\n    nodes = pipeline.run(\n        documents=documents,\n        in_place=True,\n        show_progress=True,\n    )\n    return nodes\n</code></pre>"},{"location":"api/storage.html#llama_utils.retrieval.storage.Storage.create","title":"<code>create() -&gt; Storage</code>  <code>classmethod</code>","text":"<p>Create a new in-memory Storage.</p> <p>Returns:</p> Name Type Description <code>Storage</code> <code>Storage</code> <p>The storage Context.</p> <p>Examples:</p> <p>You can create a new storage (in-memory) using the <code>create</code> method as follows:</p> <pre><code>&gt;&gt;&gt; store = Storage.create()\n&gt;&gt;&gt; print(store)\n&lt;BLANKLINE&gt;\n        Documents: 0\n        Indexes: 0\n&lt;BLANKLINE&gt;\n</code></pre> Source code in <code>src/llama_utils/retrieval/storage.py</code> <pre><code>@classmethod\ndef create(cls) -&gt; \"Storage\":\n    \"\"\"Create a new in-memory Storage.\n\n    Returns\n    -------\n    Storage:\n        The storage Context.\n\n    Examples\n    --------\n    You can create a new storage (in-memory) using the `create` method as follows:\n\n    ```python\n    &gt;&gt;&gt; store = Storage.create()\n    &gt;&gt;&gt; print(store)\n    &lt;BLANKLINE&gt;\n            Documents: 0\n            Indexes: 0\n    &lt;BLANKLINE&gt;\n\n    ```\n    \"\"\"\n    storage = cls._create_simple_storage_context()\n    return cls(storage)\n</code></pre>"},{"location":"api/storage.html#llama_utils.retrieval.storage.Storage.delete_document","title":"<code>delete_document(doc_id: str = None, document_name: str = None)</code>","text":"<p>Delete a document from the docstore.</p> <p>Parameters:</p> Name Type Description Default <code>doc_id</code> <code>str</code> <p>The ID of the document to delete.</p> <code>None</code> <code>document_name</code> <code>str</code> <p>The name of the document to delete.</p> <code>None</code> Notes <ul> <li>If the <code>doc_id</code> is provided, the document with the specified ID will be deleted.</li> <li>If the <code>document_name</code> is provided, all the nodes related to the document with the specified name will be deleted.</li> </ul> <p>Examples:</p> <p>You can delete a document from the document store and all the nodes that are related to it using the <code>delete_document</code> method by providing the <code>document_id</code>:</p> <pre><code>&gt;&gt;&gt; from llama_utils.retrieval.storage import Storage\n&gt;&gt;&gt; store = Storage.load(\"examples/paul-graham-essay-storage\")\n&gt;&gt;&gt; document_metadata = store.document_metadata\n&gt;&gt;&gt; document_id = list(document_metadata().keys())[0]\n&gt;&gt;&gt; print(document_id) # doctest: +SKIP\na25111e2e59f81bb7a0e3efb48255f4a5d4f722aaf13ffd112463fb98c227092\n&gt;&gt;&gt; store.delete_document(document_id)\n</code></pre> <p>Now if you check the document_metadata, you will find that the document is deleted:</p> <pre><code>&gt;&gt;&gt; print(store.document_metadata())\n{}\n</code></pre> <p>You can also delete a document by providing the <code>document_name</code>: <pre><code>&gt;&gt;&gt; store = Storage.load(\"examples/paul-graham-essay-storage\")\n&gt;&gt;&gt; print(store.node_metadata.head()) # doctest: +SKIP\n               file_name                                            node_id\n0  paul_graham_essay.txt  cadde590b82362fc7a5f8ce0751c5b30b11c0f81369df7...\n1  paul_graham_essay.txt  0567f3a9756983e1d040ec332255db94521ed5dc1b03fc...\n2  paul_graham_essay.txt  d5542515414f1bf30f6c21f0796af8bde4c513f2e72a2d...\n3  paul_graham_essay.txt  120b69658a6c69ab8de3167b5ed0db77941a2b487e94d5...\n4  paul_graham_essay.txt  c8587b5b5fc034bb08cd62cf0a082014f00fc09ccd2944...\n&gt;&gt;&gt; store.delete_document(document_name=\"paul_graham_essay.txt\")\n</code></pre></p> Source code in <code>src/llama_utils/retrieval/storage.py</code> <pre><code>def delete_document(self, doc_id: str = None, document_name: str = None):\n    \"\"\"Delete a document from the docstore.\n\n    Parameters\n    ----------\n    doc_id: str, Optional, Default is None.\n        The ID of the document to delete.\n    document_name: str, optional, default is None.\n        The name of the document to delete.\n\n\n    Notes\n    -----\n    - If the `doc_id` is provided, the document with the specified ID will be deleted.\n    - If the `document_name` is provided, all the nodes related to the document with the specified name will be deleted.\n\n    Examples\n    --------\n    You can delete a document from the document store and all the nodes that are related to it using the\n    `delete_document` method by providing the `document_id`:\n\n    ```python\n    &gt;&gt;&gt; from llama_utils.retrieval.storage import Storage\n    &gt;&gt;&gt; store = Storage.load(\"examples/paul-graham-essay-storage\")\n    &gt;&gt;&gt; document_metadata = store.document_metadata\n    &gt;&gt;&gt; document_id = list(document_metadata().keys())[0]\n    &gt;&gt;&gt; print(document_id) # doctest: +SKIP\n    a25111e2e59f81bb7a0e3efb48255f4a5d4f722aaf13ffd112463fb98c227092\n    &gt;&gt;&gt; store.delete_document(document_id)\n\n    ```\n\n    Now if you check the document_metadata, you will find that the document is deleted:\n\n    ```python\n    &gt;&gt;&gt; print(store.document_metadata())\n    {}\n\n    ```\n\n    You can also delete a document by providing the `document_name`:\n    ```python\n    &gt;&gt;&gt; store = Storage.load(\"examples/paul-graham-essay-storage\")\n    &gt;&gt;&gt; print(store.node_metadata.head()) # doctest: +SKIP\n                   file_name                                            node_id\n    0  paul_graham_essay.txt  cadde590b82362fc7a5f8ce0751c5b30b11c0f81369df7...\n    1  paul_graham_essay.txt  0567f3a9756983e1d040ec332255db94521ed5dc1b03fc...\n    2  paul_graham_essay.txt  d5542515414f1bf30f6c21f0796af8bde4c513f2e72a2d...\n    3  paul_graham_essay.txt  120b69658a6c69ab8de3167b5ed0db77941a2b487e94d5...\n    4  paul_graham_essay.txt  c8587b5b5fc034bb08cd62cf0a082014f00fc09ccd2944...\n    &gt;&gt;&gt; store.delete_document(document_name=\"paul_graham_essay.txt\")\n\n    ```\n    \"\"\"\n    if not document_name:\n        if doc_id not in self.document_metadata().keys():\n            raise ValueError(f\"Document with ID {doc_id} not found.\")\n        self.docstore.delete_ref_doc(doc_id)\n    else:\n        node_ids = self.get_nodes_by_file_name(document_name)\n        for node_id in node_ids:\n            self.delete_node(node_id.node_id)\n</code></pre>"},{"location":"api/storage.html#llama_utils.retrieval.storage.Storage.delete_node","title":"<code>delete_node(node_id: str)</code>","text":"<p>Delete a node from the docstore.</p> <p>Parameters:</p> Name Type Description Default <code>node_id</code> <code>str</code> <p>The ID of the node to delete.</p> required <p>Returns:</p> Type Description <code>None</code> <p>Examples:</p> <p>You can delete a node from the document store using the <code>delete_node</code> method by providing the <code>node_id</code>: <pre><code>&gt;&gt;&gt; store = Storage.load(\"examples/paul-graham-essay-storage\")\n&gt;&gt;&gt; node_id = store.node_id_list()[0]\n&gt;&gt;&gt; print(node_id)\ncadde590b82362fc7a5f8ce0751c5b30b11c0f81369df7d83a76956bf22765b7\n&gt;&gt;&gt; store.delete_node(node_id)\n</code></pre></p> Source code in <code>src/llama_utils/retrieval/storage.py</code> <pre><code>def delete_node(self, node_id: str):\n    \"\"\"Delete a node from the docstore.\n\n    Parameters\n    ----------\n    node_id: str\n        The ID of the node to delete.\n\n    Returns\n    -------\n    None\n\n    Examples\n    --------\n    You can delete a node from the document store using the `delete_node` method by providing the `node_id`:\n    ```\n    &gt;&gt;&gt; store = Storage.load(\"examples/paul-graham-essay-storage\")\n    &gt;&gt;&gt; node_id = store.node_id_list()[0]\n    &gt;&gt;&gt; print(node_id)\n    cadde590b82362fc7a5f8ce0751c5b30b11c0f81369df7d83a76956bf22765b7\n    &gt;&gt;&gt; store.delete_node(node_id)\n\n    ```\n    \"\"\"\n    self.docstore.delete_document(node_id)\n</code></pre>"},{"location":"api/storage.html#llama_utils.retrieval.storage.Storage.document_metadata","title":"<code>document_metadata(as_dataframe: Optional[bool] = False) -&gt; Union[Dict[str, RefDocInfo], DataFrame]</code>","text":"<p>Document metadata.</p> <p>Get the metadata of all the documents in the docstore.</p> <p>Parameters:</p> Name Type Description Default <code>as_dataframe</code> <code>Optional[bool]</code> <p>True to return the metadata as a DataFrame.</p> <code>False</code> <p>Returns:</p> Type Description <code>Dict[str, RefDocInfo] or DataFrame</code> <p>The metadata of all the documents in the docstore.</p> <p>Examples:</p> <p>You can get the document metadata as a dictionary using the <code>metadata</code> method with the default parameter values: <pre><code>&gt;&gt;&gt; store = Storage.load(\"examples/paul-graham-essay-storage\")\n&gt;&gt;&gt; metadata = store.document_metadata()\n</code></pre> The <code>metadata</code> is a dictionary with the document ID as the key and the document metadata as the value: <pre><code>&gt;&gt;&gt; documents_id = list(metadata.keys())\n&gt;&gt;&gt; print(documents_id) # doctest: +SKIP\n['a25111e2e59f81bb7a0e3efb48255f4a5d4f722aaf13ffd112463fb98c227092']\n&gt;&gt;&gt; print(metadata) # doctest: +SKIP\n{\n    'a25111e2e59f81bb7a0e3efb48255f4a5d4f722aaf13ffd112463fb98c227092':\n        RefDocInfo(\n            node_ids=[\n                'cadde590b82362fc7a5f8ce0751c5b30b11c0f81369df7d83a76956bf22765b7',\n                '0567f3a9756983e1d040ec332255db94521ed5dc1b03fc7312f653c0e670a0bf',\n                'd5542515414f1bf30f6c21f0796af8bde4c513f2e72a2df21f0810f10826252f',\n                '120b69658a6c69ab8de3167b5ed0db77941a2b487e94d5d0e64a0d2d2805a4b7'\n            ],\n            metadata={\n                'file_path': 'examples\\\\data\\\\paul_graham_essay.txt',\n                'file_name': 'paul_graham_essay.txt',\n                'file_type': 'text/plain',\n                'file_size': 75395,\n                'creation_date': '2024-10-24',\n                'last_modified_date': '2024-09-16',\n                'document_title': 'Based on the candidate titles and content, I would suggest a***.'\n            }\n        )\n    }\n</code></pre> To get the metadata as a DataFrame, you can set the <code>as_dataframe</code> parameter to True: <pre><code>&gt;&gt;&gt; metadata = store.document_metadata(as_dataframe=True)\n&gt;&gt;&gt; print(metadata) # doctest: +SKIP\n                                               doc_id                                            node_id\n0   a25111e2e59f81bb7a0e3efb48255f4a5d4f722aaf13ff...  cadde590b82362fc7a5f8ce0751c5b30b11c0f81369df7...\n1   a25111e2e59f81bb7a0e3efb48255f4a5d4f722aaf13ff...  0567f3a9756983e1d040ec332255db94521ed5dc1b03fc...\n2   a25111e2e59f81bb7a0e3efb48255f4a5d4f722aaf13ff...  d5542515414f1bf30f6c21f0796af8bde4c513f2e72a2d...\n</code></pre></p> Source code in <code>src/llama_utils/retrieval/storage.py</code> <pre><code>def document_metadata(\n    self, as_dataframe: Optional[bool] = False\n) -&gt; Union[Dict[str, RefDocInfo], DataFrame]:\n    r\"\"\"Document metadata.\n\n    Get the metadata of all the documents in the docstore.\n\n    Parameters\n    ----------\n    as_dataframe: bool, optional, default is False.\n        True to return the metadata as a DataFrame.\n\n    Returns\n    -------\n    Dict[str, RefDocInfo] or DataFrame\n        The metadata of all the documents in the docstore.\n\n    Examples\n    --------\n    You can get the document metadata as a dictionary using the `metadata` method with the default parameter values:\n    ```python\n    &gt;&gt;&gt; store = Storage.load(\"examples/paul-graham-essay-storage\")\n    &gt;&gt;&gt; metadata = store.document_metadata()\n\n    ```\n    The `metadata` is a dictionary with the document ID as the key and the document metadata as the value:\n    ```python\n    &gt;&gt;&gt; documents_id = list(metadata.keys())\n    &gt;&gt;&gt; print(documents_id) # doctest: +SKIP\n    ['a25111e2e59f81bb7a0e3efb48255f4a5d4f722aaf13ffd112463fb98c227092']\n    &gt;&gt;&gt; print(metadata) # doctest: +SKIP\n    {\n        'a25111e2e59f81bb7a0e3efb48255f4a5d4f722aaf13ffd112463fb98c227092':\n            RefDocInfo(\n                node_ids=[\n                    'cadde590b82362fc7a5f8ce0751c5b30b11c0f81369df7d83a76956bf22765b7',\n                    '0567f3a9756983e1d040ec332255db94521ed5dc1b03fc7312f653c0e670a0bf',\n                    'd5542515414f1bf30f6c21f0796af8bde4c513f2e72a2df21f0810f10826252f',\n                    '120b69658a6c69ab8de3167b5ed0db77941a2b487e94d5d0e64a0d2d2805a4b7'\n                ],\n                metadata={\n                    'file_path': 'examples\\\\data\\\\paul_graham_essay.txt',\n                    'file_name': 'paul_graham_essay.txt',\n                    'file_type': 'text/plain',\n                    'file_size': 75395,\n                    'creation_date': '2024-10-24',\n                    'last_modified_date': '2024-09-16',\n                    'document_title': 'Based on the candidate titles and content, I would suggest a***.'\n                }\n            )\n        }\n    ```\n    To get the metadata as a DataFrame, you can set the `as_dataframe` parameter to True:\n    ```python\n    &gt;&gt;&gt; metadata = store.document_metadata(as_dataframe=True)\n    &gt;&gt;&gt; print(metadata) # doctest: +SKIP\n                                                   doc_id                                            node_id\n    0   a25111e2e59f81bb7a0e3efb48255f4a5d4f722aaf13ff...  cadde590b82362fc7a5f8ce0751c5b30b11c0f81369df7...\n    1   a25111e2e59f81bb7a0e3efb48255f4a5d4f722aaf13ff...  0567f3a9756983e1d040ec332255db94521ed5dc1b03fc...\n    2   a25111e2e59f81bb7a0e3efb48255f4a5d4f722aaf13ff...  d5542515414f1bf30f6c21f0796af8bde4c513f2e72a2d...\n    ```\n    \"\"\"\n    ref_doc_info: dict = self.docstore.get_all_ref_doc_info()\n    if as_dataframe:\n        doct_node_ids_dict = {}\n        file_name_doc = {}\n        doc_ids = list(ref_doc_info.keys())\n        for doc_id in doc_ids:\n            # get the DocRefInfo object for the first document\n            doc_ref = ref_doc_info[doc_id].to_dict()\n            # get the node ids for the first document\n            node_ids = doc_ref[\"node_ids\"]\n            file_name_doc[doc_id] = doc_ref[\"metadata\"].get(\"file_name\")\n            doct_node_ids_dict[doc_id] = node_ids\n\n        df = pd.DataFrame(\n            list(doct_node_ids_dict.items()), columns=[\"doc_id\", \"node_id\"]\n        )\n        df = df.explode(\"node_id\", ignore_index=True)\n\n        # merge the file name with the doc_id\n        file_name_df = pd.DataFrame(\n            file_name_doc.items(), columns=[\"doc_id\", \"file_name\"]\n        )\n        df = df.merge(file_name_df, on=\"doc_id\", how=\"left\", validate=\"many_to_one\")\n        data = df\n    else:\n        data = ref_doc_info\n    return data\n</code></pre>"},{"location":"api/storage.html#llama_utils.retrieval.storage.Storage.get_nodes_by_file_name","title":"<code>get_nodes_by_file_name(file_name: str, exact_match: bool = False) -&gt; List[BaseNode]</code>","text":"<p>Get nodes by file name.</p> <p>Parameters:</p> Name Type Description Default <code>file_name</code> <code>str</code> <p>The file name to search for.</p> required <code>exact_match</code> <code>bool</code> <p>True to search for an exact match, False to search for a partial match.</p> <code>False</code> <p>Returns:</p> Type Description <code>List[TextNode]</code> <p>The nodes with the specified file name.</p> <p>Examples:</p> <ul> <li>First read the storage context from a directory: <pre><code>&gt;&gt;&gt; storage_dir = \"examples/paul-graham-essay-storage\"\n&gt;&gt;&gt; store = Storage.load(storage_dir)\n&gt;&gt;&gt; print(store)\n&lt;BLANKLINE&gt;\n        Documents: 53\n        Indexes: 2\n&lt;BLANKLINE&gt;\n\n- The storage context contains the following data:\n\n&gt;&gt;&gt; print(store.node_metadata.head(3))\n               file_name                                            node_id\n0  paul_graham_essay.txt  cadde590b82362fc7a5f8ce0751c5b30b11c0f81369df7...\n1  paul_graham_essay.txt  0567f3a9756983e1d040ec332255db94521ed5dc1b03fc...\n2  paul_graham_essay.txt  d5542515414f1bf30f6c21f0796af8bde4c513f2e72a2d...\n\n\nYou can get all the nodes for file `paul_graham_essay.txt` as follows:\n\n\n&gt;&gt;&gt; nodes = store.get_nodes_by_file_name(\"paul_graham_essay.txt\")\n&gt;&gt;&gt; nodes[0] # doctest: +SKIP\nTextNode(\n    id_='cadde590b82362fc7a5f8ce0751c5b30b11c0f81369df7d83a76956bf22765b7',\n    embedding=None,\n    metadata={\n        'file_path': 'examples\\\\data\\\\paul_graham_essay.txt',\n        'file_name': 'paul_graham_essay.txt',\n        'file_type': 'text/plain',\n        'file_size': 75395,\n        'creation_date': '2024-10-24',\n        'last_modified_date': '2024-09-16',\n        'document_title': 'Based on the candidate titles and content, I would suggest a comprehensive title\n            that captures the essence of the text. Here\\'s a potential title:\\n\\n\"From Early Days ***'\n    },\n    excluded_embed_metadata_keys=['file_name'],\n    excluded_llm_metadata_keys=['file_name'],\n    relationships={\n        &lt;NodeRelationship.SOURCE: '1'&gt;:\n        RelatedNodeInfo(\n            node_id='a25111e2e59f81bb7a0e3efb48255f4a5d4f722aaf13ffd112463fb98c227092',\n            node_type=&lt;ObjectType.DOCUMENT: '4'&gt;,\n            metadata={\n                'file_path': 'examples\\\\data\\\\paul_graham_essay.txt',\n                'file_name': 'paul_graham_essay.txt',\n                'file_type': 'text/plain',\n                'file_size': 75395,\n                'creation_date': '2024-10-24',\n                'last_modified_date': '2024-09-16'\n            },\n            hash='2a494d84cd0ab1e73396773258b809a47739482c90b80d5f61d374e754c3ef06'\n        ),\n        &lt;NodeRelationship.NEXT: '3'&gt;: RelatedNodeInfo(node_id='15478c7a-fdab-40c8-92e7-42973b9d3b28', node_type=&lt;ObjectType.TEXT: '1'&gt;, metadata={}, hash='424546c0aa78015988ced235522cdd238633d5edc1b92667cbdcda44d72613ec')}, text='What I Worked On\\r\\n\\r\\nFebruary 2021\\r\\n\\r\\nBefore college the two main things I worked on, outside of school, were writing and programming. I didn\\'t write essays. I wrote what beginning writers were supposed to write then, and probably still are: short stories. My stories were awful. They had hardly any plot, just characters with strong feelings, which I imagined made them deep.\\r\\n\\r\\nThe first programs I tried writing were on the IBM 1401 that our school district used for what was then called \"data processing.\" This was in 9th grade, so I was 13 or 14. The school district\\'s 1401 happened to be in the basement of our junior high school, and my friend Rich Draves and I got permission to use it. It was like a mini Bond villain\\'s lair down there, with all these alien-looking machines \u2014 CPU, disk drives, printer, card reader \u2014 sitting up on a raised floor under bright fluorescent lights.\\r\\n\\r\\nThe language we used was an early version of Fortran. You had to type programs on punch cards, then stack them in the card reader and press a button to load the program into memory and run it. The result would ordinarily be to print something on the spectacularly loud printer.\\r\\n\\r\\nI was puzzled by the 1401. I couldn\\'t figure out what to do with it. And in retrospect there\\'s not much I could have',\n        mimetype='text/plain',\n        start_char_idx=4,\n        end_char_idx=2027,\n        text_template='[Excerpt from document]\\n{metadata_str}\\nExcerpt:\\n-----\\n{content}\\n-----\\n',\n        metadata_template='{key}: {value}', metadata_seperator='\\n'\n        )\n</code></pre></li> </ul> Source code in <code>src/llama_utils/retrieval/storage.py</code> <pre><code>def get_nodes_by_file_name(\n    self, file_name: str, exact_match: bool = False\n) -&gt; List[BaseNode]:\n    r\"\"\"Get nodes by file name.\n\n    Parameters\n    ----------\n    file_name: str\n        The file name to search for.\n    exact_match: bool, optional, default is False\n        True to search for an exact match, False to search for a partial match.\n\n    Returns\n    -------\n    List[TextNode]\n        The nodes with the specified file name.\n\n    Examples\n    --------\n    - First read the storage context from a directory:\n    ```python\n    &gt;&gt;&gt; storage_dir = \"examples/paul-graham-essay-storage\"\n    &gt;&gt;&gt; store = Storage.load(storage_dir)\n    &gt;&gt;&gt; print(store)\n    &lt;BLANKLINE&gt;\n            Documents: 53\n            Indexes: 2\n    &lt;BLANKLINE&gt;\n\n    - The storage context contains the following data:\n\n    &gt;&gt;&gt; print(store.node_metadata.head(3))\n                   file_name                                            node_id\n    0  paul_graham_essay.txt  cadde590b82362fc7a5f8ce0751c5b30b11c0f81369df7...\n    1  paul_graham_essay.txt  0567f3a9756983e1d040ec332255db94521ed5dc1b03fc...\n    2  paul_graham_essay.txt  d5542515414f1bf30f6c21f0796af8bde4c513f2e72a2d...\n\n\n    You can get all the nodes for file `paul_graham_essay.txt` as follows:\n\n\n    &gt;&gt;&gt; nodes = store.get_nodes_by_file_name(\"paul_graham_essay.txt\")\n    &gt;&gt;&gt; nodes[0] # doctest: +SKIP\n    TextNode(\n        id_='cadde590b82362fc7a5f8ce0751c5b30b11c0f81369df7d83a76956bf22765b7',\n        embedding=None,\n        metadata={\n            'file_path': 'examples\\\\data\\\\paul_graham_essay.txt',\n            'file_name': 'paul_graham_essay.txt',\n            'file_type': 'text/plain',\n            'file_size': 75395,\n            'creation_date': '2024-10-24',\n            'last_modified_date': '2024-09-16',\n            'document_title': 'Based on the candidate titles and content, I would suggest a comprehensive title\n                that captures the essence of the text. Here\\'s a potential title:\\n\\n\"From Early Days ***'\n        },\n        excluded_embed_metadata_keys=['file_name'],\n        excluded_llm_metadata_keys=['file_name'],\n        relationships={\n            &lt;NodeRelationship.SOURCE: '1'&gt;:\n            RelatedNodeInfo(\n                node_id='a25111e2e59f81bb7a0e3efb48255f4a5d4f722aaf13ffd112463fb98c227092',\n                node_type=&lt;ObjectType.DOCUMENT: '4'&gt;,\n                metadata={\n                    'file_path': 'examples\\\\data\\\\paul_graham_essay.txt',\n                    'file_name': 'paul_graham_essay.txt',\n                    'file_type': 'text/plain',\n                    'file_size': 75395,\n                    'creation_date': '2024-10-24',\n                    'last_modified_date': '2024-09-16'\n                },\n                hash='2a494d84cd0ab1e73396773258b809a47739482c90b80d5f61d374e754c3ef06'\n            ),\n            &lt;NodeRelationship.NEXT: '3'&gt;: RelatedNodeInfo(node_id='15478c7a-fdab-40c8-92e7-42973b9d3b28', node_type=&lt;ObjectType.TEXT: '1'&gt;, metadata={}, hash='424546c0aa78015988ced235522cdd238633d5edc1b92667cbdcda44d72613ec')}, text='What I Worked On\\r\\n\\r\\nFebruary 2021\\r\\n\\r\\nBefore college the two main things I worked on, outside of school, were writing and programming. I didn\\'t write essays. I wrote what beginning writers were supposed to write then, and probably still are: short stories. My stories were awful. They had hardly any plot, just characters with strong feelings, which I imagined made them deep.\\r\\n\\r\\nThe first programs I tried writing were on the IBM 1401 that our school district used for what was then called \"data processing.\" This was in 9th grade, so I was 13 or 14. The school district\\'s 1401 happened to be in the basement of our junior high school, and my friend Rich Draves and I got permission to use it. It was like a mini Bond villain\\'s lair down there, with all these alien-looking machines \u2014 CPU, disk drives, printer, card reader \u2014 sitting up on a raised floor under bright fluorescent lights.\\r\\n\\r\\nThe language we used was an early version of Fortran. You had to type programs on punch cards, then stack them in the card reader and press a button to load the program into memory and run it. The result would ordinarily be to print something on the spectacularly loud printer.\\r\\n\\r\\nI was puzzled by the 1401. I couldn\\'t figure out what to do with it. And in retrospect there\\'s not much I could have',\n            mimetype='text/plain',\n            start_char_idx=4,\n            end_char_idx=2027,\n            text_template='[Excerpt from document]\\n{metadata_str}\\nExcerpt:\\n-----\\n{content}\\n-----\\n',\n            metadata_template='{key}: {value}', metadata_seperator='\\n'\n            )\n    ```\n    \"\"\"\n    metadata_index = self.node_metadata\n    if exact_match:\n        doc_ids = metadata_index.loc[\n            metadata_index[\"file_name\"] == file_name, \"node_id\"\n        ].values\n    else:\n        doc_ids = metadata_index.loc[\n            metadata_index[\"file_name\"].str.contains(file_name, regex=True),\n            \"node_id\",\n        ].values\n    docs = self.docstore.get_nodes(doc_ids)\n    return docs\n</code></pre>"},{"location":"api/storage.html#llama_utils.retrieval.storage.Storage.load","title":"<code>load(store_dir: str) -&gt; Storage</code>  <code>classmethod</code>","text":"<p>Load the store from a directory.</p> <p>Parameters:</p> Name Type Description Default <code>store_dir</code> <code>str</code> <p>The directory containing the store.</p> required <p>Returns:</p> Name Type Description <code>Storage</code> <code>Storage</code> <p>The loaded storage.</p> <p>Raises:</p> Type Description <code>StorageNotFoundError</code> <p>If the storage is not found at the specified directory.</p> <p>Examples:</p> <p>You can load a storage from a directory as follows: <pre><code>&gt;&gt;&gt; store = Storage.load(\"examples/paul-graham-essay-storage\")\n&gt;&gt;&gt; print(store) # doctest: +SKIP\n&lt;BLANKLINE&gt;\n            Documents: 53\n            Indexes: 2\n&lt;BLANKLINE&gt;\n&gt;&gt;&gt; metadata = store.document_metadata(as_dataframe=True)\n&gt;&gt;&gt; print(metadata.head()) # doctest: +SKIP\n                             doc_id                              node_id              file_name\n0   a25111e2e59f81bb7a0e3efb4825...  cadde590b82362fc7a5f8ce0751c5b30b...  paul_graham_essay.txt\n1   a25111e2e59f81bb7a0e3efb4825...  0567f3a9756983e1d040ec332255db945...  paul_graham_essay.txt\n2   a25111e2e59f81bb7a0e3efb4825...  d5542515414f1bf30f6c21f0796af8bde...  paul_graham_essay.txt\n3   a25111e2e59f81bb7a0e3efb4825...  120b69658a6c69ab8de3167b5ed0db779...  paul_graham_essay.txt\n&gt;&gt;&gt; docstore = store.docstore # doctest: +SKIP\n&lt;llama_index.core.storage.docstore.simple_docstore.SimpleDocumentStore at 0x20444d31be0&gt;\n&gt;&gt;&gt; vector_store = store.vector_store\n&gt;&gt;&gt; print(type(vector_store))\n&lt;class 'llama_index.core.vector_stores.simple.SimpleVectorStore'&gt;\n</code></pre></p> Source code in <code>src/llama_utils/retrieval/storage.py</code> <pre><code>@classmethod\ndef load(cls, store_dir: str) -&gt; \"Storage\":\n    \"\"\"Load the store from a directory.\n\n    Parameters\n    ----------\n    store_dir: str\n        The directory containing the store.\n\n    Returns\n    -------\n    Storage:\n        The loaded storage.\n\n    Raises\n    ------\n    StorageNotFoundError\n        If the storage is not found at the specified directory.\n\n    Examples\n    --------\n    You can load a storage from a directory as follows:\n    ```python\n    &gt;&gt;&gt; store = Storage.load(\"examples/paul-graham-essay-storage\")\n    &gt;&gt;&gt; print(store) # doctest: +SKIP\n    &lt;BLANKLINE&gt;\n                Documents: 53\n                Indexes: 2\n    &lt;BLANKLINE&gt;\n    &gt;&gt;&gt; metadata = store.document_metadata(as_dataframe=True)\n    &gt;&gt;&gt; print(metadata.head()) # doctest: +SKIP\n                                 doc_id                              node_id              file_name\n    0   a25111e2e59f81bb7a0e3efb4825...  cadde590b82362fc7a5f8ce0751c5b30b...  paul_graham_essay.txt\n    1   a25111e2e59f81bb7a0e3efb4825...  0567f3a9756983e1d040ec332255db945...  paul_graham_essay.txt\n    2   a25111e2e59f81bb7a0e3efb4825...  d5542515414f1bf30f6c21f0796af8bde...  paul_graham_essay.txt\n    3   a25111e2e59f81bb7a0e3efb4825...  120b69658a6c69ab8de3167b5ed0db779...  paul_graham_essay.txt\n    &gt;&gt;&gt; docstore = store.docstore # doctest: +SKIP\n    &lt;llama_index.core.storage.docstore.simple_docstore.SimpleDocumentStore at 0x20444d31be0&gt;\n    &gt;&gt;&gt; vector_store = store.vector_store\n    &gt;&gt;&gt; print(type(vector_store))\n    &lt;class 'llama_index.core.vector_stores.simple.SimpleVectorStore'&gt;\n\n    ```\n    \"\"\"\n    if not Path(store_dir).exists():\n        raise StorageNotFoundError(f\"Storage not found at {store_dir}\")\n    storage = StorageContext.from_defaults(persist_dir=store_dir)\n    return cls(storage)\n</code></pre>"},{"location":"api/storage.html#llama_utils.retrieval.storage.Storage.node_id_list","title":"<code>node_id_list() -&gt; List[str]</code>","text":"<p>Get the metadata of the nodes in the docstore.</p> <p>Returns:</p> Type Description <code>Dict[str, Dict[str, Any]]</code> <p>The metadata of the nodes in the docstore.</p> <p>Examples:</p> <p>You can get the metadata of the nodes in the docstore using the <code>nodes_metadata</code> method: <pre><code>&gt;&gt;&gt; store = Storage.load(\"examples/paul-graham-essay-storage\")\n&gt;&gt;&gt; nodes_metadata = store.node_id_list()\n&gt;&gt;&gt; print(nodes_metadata) # doctest: +SKIP\n[\n    'cadde590b82362fc7a5f8ce0751c5b30b11c0f81369df7d83a76956bf22765b7',\n    '0567f3a9756983e1d040ec332255db94521ed5dc1b03fc7312f653c0e670a0bf',\n    'd5542515414f1bf30f6c21f0796af8bde4c513f2e72a2df21f0810f10826252f',\n    ...\n]\n</code></pre></p> Source code in <code>src/llama_utils/retrieval/storage.py</code> <pre><code>def node_id_list(self) -&gt; List[str]:\n    \"\"\"Get the metadata of the nodes in the docstore.\n\n    Returns\n    -------\n    Dict[str, Dict[str, Any]]\n        The metadata of the nodes in the docstore.\n\n    Examples\n    --------\n    You can get the metadata of the nodes in the docstore using the `nodes_metadata` method:\n    ```python\n    &gt;&gt;&gt; store = Storage.load(\"examples/paul-graham-essay-storage\")\n    &gt;&gt;&gt; nodes_metadata = store.node_id_list()\n    &gt;&gt;&gt; print(nodes_metadata) # doctest: +SKIP\n    [\n        'cadde590b82362fc7a5f8ce0751c5b30b11c0f81369df7d83a76956bf22765b7',\n        '0567f3a9756983e1d040ec332255db94521ed5dc1b03fc7312f653c0e670a0bf',\n        'd5542515414f1bf30f6c21f0796af8bde4c513f2e72a2df21f0810f10826252f',\n        ...\n    ]\n    ```\n    \"\"\"\n    return list(self.docstore.docs.keys())\n</code></pre>"},{"location":"api/storage.html#llama_utils.retrieval.storage.Storage.read_documents","title":"<code>read_documents(path: Union[str, Path], split_into_nodes: bool = False, chunk_size: int = 1024, chunk_overlap: int = 100, show_progress: bool = False, num_workers: int = None, recursive: bool = False, **kwargs) -&gt; List[Union[Document, TextNode]]</code>  <code>staticmethod</code>","text":"<p>Read documents from a directory and optionally splits them into TextNodes.</p> <p>the <code>read_documents</code> method reads documents from a directory and returns a list of documents. the <code>doc_id</code> is sha256 hash number generated based on the document's text content.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Union[str, Path]</code> <p>path to the directory containing the documents. or a single file path.</p> required <code>split_into_nodes</code> <code>bool</code> <p>If True, splits documents into smaller TextNodes (default: False).</p> <code>False</code> <code>chunk_size</code> <code>int</code> <p>The size of each text chunk. The <code>chunk_size</code> Defines the size of each split chunk (in characters). - Larger values preserve more context but increase memory usage. - Smaller values improve retrieval specificity but may lose context.</p> <code>is 1024</code> <code>chunk_overlap</code> <code>int</code> <p>The overlap size between chunks. The <code>chunk_overlap</code> ensures adjacent chunks have overlapping content to preserve context. - Higher overlap improves retrieval coherence but increases redundancy. - Lower overlap minimizes redundancy but might break context.</p> <code>is 100.</code> <code>show_progress</code> <code>bool</code> <p>True to show progress bar.</p> <code>False</code> <code>num_workers</code> <code>int</code> <p>The number of workers to use for loading the data.</p> <code>None</code> <code>recursive</code> <code>bool</code> <p>True to read from subdirectories.</p> <code>False</code> <p>Returns:</p> Type Description <code>Sequence[Union[Document, TextNode]]</code> <p>The documents/nodes read from the store.</p> <p>Raises:</p> Type Description <code>FileNotFoundError</code> <p>If the directory is not found.</p> Notes <p>The best values for <code>chunk_size</code> and <code>chunk_overlap</code> depend on the type of documents and retrieval needs.</p> Use Case Recommended <code>chunk_size</code> Recommended <code>chunk_overlap</code> Short documents (FAQs, structured text, emails) <code>256 - 512</code> <code>50</code> General-purpose (news articles, reports, blog posts) <code>512 - 1024</code> <code>50 - 100</code> Long documents (PDFs, research papers, books) <code>1024 - 2048</code> <code>100 - 200</code> Dense technical/scientific papers <code>1500 - 2500</code> <code>200 - 300</code> Conversational AI (chat context memory) <code>512 - 1024</code> <code>50 - 150</code> Legal/contract documents (precise context retention) <code>2048 - 4096</code> <code>200 - 400</code> <p>Best Practices: - For most cases, <code>chunk_size=1024</code> and <code>chunk_overlap=100</code> work well. - If working with FAQs, decrease <code>chunk_size</code> to <code>512</code>. - If preserving long-form LLM context, use <code>2048+</code> with higher overlap.</p> <p>Examples:</p> <p>You can read documents from a directory as follows: <pre><code>&gt;&gt;&gt; from llama_utils.retrieval.storage import Storage\n&gt;&gt;&gt; data_path = \"examples/data/essay\"\n&gt;&gt;&gt; docs = Storage.read_documents(data_path)\n&gt;&gt;&gt; print(docs) # doctest: +SKIP\n[\n    Document(\n        id_='a25111e2e59f81bb7a0e3efb48255**',\n        embedding=None,\n        metadata={\n            'file_path': 'examples/data/essay/paul-graham-essay.txt',\n            'file_name': 'paul-graham-essay.txt',\n            'file_type': 'text/plain',\n            'file_size': 75395,\n            'creation_date': '2024-10-25',\n            'last_modified_date': '2024-09-16'\n        },\n        excluded_embed_metadata_keys=['file_name'],\n        excluded_llm_metadata_keys=['file_name'],\n        relationships={},\n        text='What I Worked On\\n\\nFebruary 2021\\n\\nBefore college the two main things ****',\n        mimetype='text/plain',\n        start_char_idx=None,\n        end_char_idx=None,\n4        text_template='{metadata_str}\\n\\n{content}',\n        metadata_template='{key}: {value}',\n        metadata_seperator='\\n'\n    )\n]\n</code></pre></p> <p>You can also use the <code>split_into_nodes</code> parameter to split the documents into smaller nodes:</p> <pre><code>&gt;&gt;&gt; docs = Storage.read_documents(data_path, split_into_nodes=True)\n&gt;&gt;&gt; print(len(docs))\n20\n&gt;&gt;&gt; print(docs[0]) # doctest: +SKIP\nNode ID: bfdf48ff-3c2b-49a8-ae25-7a837158d2dc\nText: What I Worked On    February 2021    Before college the two main\nthings I worked on, outside of school, were writing and programming. I\ndidn't write essays. I wrote what beginning writers were supposed to\nwrite then, and probably still are: short stories. My stories were\nawful. They had hardly any plot, just characters with strong feelings,\nwhic...\n</code></pre> Source code in <code>src/llama_utils/retrieval/storage.py</code> <pre><code>@staticmethod\ndef read_documents(\n    path: Union[str, Path],\n    split_into_nodes: bool = False,\n    chunk_size: int = 1024,\n    chunk_overlap: int = 100,\n    show_progress: bool = False,\n    num_workers: int = None,\n    recursive: bool = False,\n    **kwargs,\n) -&gt; List[Union[Document, TextNode]]:\n    r\"\"\"Read documents from a directory and optionally splits them into TextNodes.\n\n    the `read_documents` method reads documents from a directory and returns a list of documents.\n    the `doc_id` is sha256 hash number generated based on the document's text content.\n\n    Parameters\n    ----------\n    path: str\n        path to the directory containing the documents. or a single file path.\n    split_into_nodes : bool, optional\n        If True, splits documents into smaller TextNodes (default: False).\n    chunk_size : int, optional, default is 1024\n        The size of each text chunk. The `chunk_size` Defines the size of each split chunk (in characters).\n        - Larger values preserve more context but increase memory usage.\n        - Smaller values improve retrieval specificity but may lose context.\n    chunk_overlap : int, optional, default is 100.\n        The overlap size between chunks. The `chunk_overlap` ensures adjacent chunks have overlapping content to\n        preserve context.\n        - Higher overlap improves retrieval coherence but increases redundancy.\n        - Lower overlap minimizes redundancy but might break context.\n    show_progress: bool, optional, default is False.\n        True to show progress bar.\n    num_workers: int, optional, default is None.\n        The number of workers to use for loading the data.\n    recursive: bool, optional, default is False.\n        True to read from subdirectories.\n\n    Returns\n    -------\n    Sequence[Union[Document, TextNode]]\n        The documents/nodes read from the store.\n\n    Raises\n    ------\n    FileNotFoundError\n        If the directory is not found.\n\n    Notes\n    -----\n    The best values for `chunk_size` and `chunk_overlap` depend on the type of documents and retrieval needs.\n\n    | **Use Case**                                              | **Recommended `chunk_size`** | **Recommended `chunk_overlap`** |\n    |-----------------------------------------------------------|------------------------------|---------------------------------|\n    | **Short documents (FAQs, structured text, emails)**       | `256 - 512`                  | `50`                           |\n    | **General-purpose (news articles, reports, blog posts)**  | `512 - 1024`                 | `50 - 100`                     |\n    | **Long documents (PDFs, research papers, books)**         | `1024 - 2048`                | `100 - 200`                    |\n    | **Dense technical/scientific papers**                     | `1500 - 2500`                | `200 - 300`                    |\n    | **Conversational AI (chat context memory)**               | `512 - 1024`                 | `50 - 150`                     |\n    | **Legal/contract documents (precise context retention)**  | `2048 - 4096`                | `200 - 400`                    |\n\n    Best Practices:\n    - For most cases, `chunk_size=1024` and `chunk_overlap=100` work well.\n    - If working with FAQs, decrease `chunk_size` to `512`.\n    - If preserving long-form LLM context, use `2048+` with higher overlap.\n\n    Examples\n    --------\n    You can read documents from a directory as follows:\n    ```python\n    &gt;&gt;&gt; from llama_utils.retrieval.storage import Storage\n    &gt;&gt;&gt; data_path = \"examples/data/essay\"\n    &gt;&gt;&gt; docs = Storage.read_documents(data_path)\n    &gt;&gt;&gt; print(docs) # doctest: +SKIP\n    [\n        Document(\n            id_='a25111e2e59f81bb7a0e3efb48255**',\n            embedding=None,\n            metadata={\n                'file_path': 'examples/data/essay/paul-graham-essay.txt',\n                'file_name': 'paul-graham-essay.txt',\n                'file_type': 'text/plain',\n                'file_size': 75395,\n                'creation_date': '2024-10-25',\n                'last_modified_date': '2024-09-16'\n            },\n            excluded_embed_metadata_keys=['file_name'],\n            excluded_llm_metadata_keys=['file_name'],\n            relationships={},\n            text='What I Worked On\\n\\nFebruary 2021\\n\\nBefore college the two main things ****',\n            mimetype='text/plain',\n            start_char_idx=None,\n            end_char_idx=None,\n    4        text_template='{metadata_str}\\n\\n{content}',\n            metadata_template='{key}: {value}',\n            metadata_seperator='\\n'\n        )\n    ]\n    ```\n\n    You can also use the `split_into_nodes` parameter to split the documents into smaller nodes:\n\n    ```python\n    &gt;&gt;&gt; docs = Storage.read_documents(data_path, split_into_nodes=True)\n    &gt;&gt;&gt; print(len(docs))\n    20\n    &gt;&gt;&gt; print(docs[0]) # doctest: +SKIP\n    Node ID: bfdf48ff-3c2b-49a8-ae25-7a837158d2dc\n    Text: What I Worked On    February 2021    Before college the two main\n    things I worked on, outside of school, were writing and programming. I\n    didn't write essays. I wrote what beginning writers were supposed to\n    write then, and probably still are: short stories. My stories were\n    awful. They had hardly any plot, just characters with strong feelings,\n    whic...\n    ```\n    \"\"\"\n    if isinstance(path, str):\n        path = Path(path)\n\n    if not path.exists():\n        raise FileNotFoundError(f\"Directory not found: {path}\")\n\n    if path.is_file():\n        reader = SimpleDirectoryReader(input_files=[path])\n    else:\n        reader = SimpleDirectoryReader(path, recursive=recursive, **kwargs)\n\n    documents = reader.load_data(\n        show_progress=show_progress, num_workers=num_workers, **kwargs\n    )\n\n    if split_into_nodes:\n        # Split documents into nodes.\n        splitter = SentenceSplitter(\n            chunk_size=chunk_size, chunk_overlap=chunk_overlap\n        )\n        documents = splitter.get_nodes_from_documents(documents)\n\n    for doc in documents:\n        # exclude the file name from the llm metadata to avoid affecting the llm by weird file names\n        doc.excluded_llm_metadata_keys = [\"file_name\"]\n        # exclude the file name from the embeddings' metadata to avoid affecting the llm by weird file names\n        doc.excluded_embed_metadata_keys = [\"file_name\"]\n        # Generate a hash based on the document's text content\n        content_hash = generate_content_hash(doc.text)\n        # Assign the hash as the doc_id\n        doc.metadata[\"content-hash\"] = content_hash\n\n    return documents\n</code></pre>"},{"location":"api/storage.html#llama_utils.retrieval.storage.Storage.save","title":"<code>save(store_dir: str)</code>","text":"<p>Save the storage to a directory.</p> <p>Parameters:</p> Name Type Description Default <code>store_dir</code> <code>str</code> <p>The directory to save the store.</p> required <p>Examples:</p> <p>You can save a storage to a directory as follows: <pre><code>&gt;&gt;&gt; store = Storage.create()\n&gt;&gt;&gt; store.save(\"examples/paul-graham-essay-storage-example\")\n</code></pre> The following files will be created in the specified directory: - metadata_index.csv - docstore.json - default__vector_store.json - index_store.json - graph_store.json - image__vector_store.json</p> Source code in <code>src/llama_utils/retrieval/storage.py</code> <pre><code>def save(self, store_dir: str):\n    \"\"\"Save the storage to a directory.\n\n    Parameters\n    ----------\n    store_dir: str\n        The directory to save the store.\n\n    Examples\n    --------\n    You can save a storage to a directory as follows:\n    ```python\n    &gt;&gt;&gt; store = Storage.create()\n    &gt;&gt;&gt; store.save(\"examples/paul-graham-essay-storage-example\")\n\n    ```\n    The following files will be created in the specified directory:\n    - metadata_index.csv\n    - docstore.json\n    - default__vector_store.json\n    - index_store.json\n    - graph_store.json\n    - image__vector_store.json\n    \"\"\"\n    self.store.persist(persist_dir=store_dir)\n    file_path = os.path.join(store_dir, ID_MAPPING_FILE)\n    save_metadata_index(self.document_metadata(as_dataframe=True), file_path)\n</code></pre>"},{"location":"api/storage.html#llama_utils.retrieval.storage.create_metadata_index_existing_docs","title":"<code>create_metadata_index_existing_docs(docs: Dict[str, BaseNode])</code>","text":"<p>Create a metadata index for existing documents.</p> Source code in <code>src/llama_utils/retrieval/storage.py</code> <pre><code>def create_metadata_index_existing_docs(docs: Dict[str, BaseNode]):\n    \"\"\"Create a metadata index for existing documents.\"\"\"\n    metadata_index = {}\n    i = 0\n    for key, val in docs.items():\n        if \"file_name\" in val.metadata:\n            file_name = val.metadata[\"file_name\"]\n        elif \"file_path\" in val.metadata:\n            file_name = Path(val.metadata[\"file_path\"]).name\n        else:\n            file_name = f\"doc_{i}\"\n\n        metadata_index[i] = {\n            \"file_name\": file_name,\n            \"node_id\": generate_content_hash(val.text),\n        }\n        i += 1\n    df = pd.DataFrame.from_dict(metadata_index, orient=\"index\")\n    return df\n</code></pre>"},{"location":"api/storage.html#llama_utils.retrieval.storage.read_metadata_index","title":"<code>read_metadata_index(path: str) -&gt; pd.DataFrame</code>","text":"<p>Read the ID mapping from a JSON file.</p> Source code in <code>src/llama_utils/retrieval/storage.py</code> <pre><code>def read_metadata_index(path: str) -&gt; pd.DataFrame:\n    \"\"\"Read the ID mapping from a JSON file.\"\"\"\n    file_path = os.path.join(path, ID_MAPPING_FILE)\n    data = pd.read_csv(file_path, index_col=0)\n    return data\n</code></pre>"},{"location":"api/storage.html#llama_utils.retrieval.storage.save_metadata_index","title":"<code>save_metadata_index(data: pd.DataFrame, path: str)</code>","text":"<p>Save the ID mapping to a JSON file.</p> Source code in <code>src/llama_utils/retrieval/storage.py</code> <pre><code>def save_metadata_index(data: pd.DataFrame, path: str):\n    \"\"\"Save the ID mapping to a JSON file.\"\"\"\n    data.to_csv(path, index=True)\n</code></pre>"},{"location":"api/utils.html","title":"Utils","text":""},{"location":"api/utils.html#llm-models","title":"LLM models","text":""},{"location":"api/utils.html#llama_utils.utils.models","title":"<code>llama_utils.utils.models</code>","text":"<p>LLMs and embedding models.</p>"},{"location":"api/utils.html#llama_utils.utils.models.LLMModel","title":"<code>LLMModel</code>","text":"<p>Abstraction layer for different LLM providers: AzureOpenAI, Ollama, and HuggingFace.</p> <p>Parameters:</p> Name Type Description Default <code>model_type</code> <code>str</code> <p>Type of the model ('azure', 'ollama', 'huggingface').</p> required <code>**kwargs</code> <code>dict</code> <p>Additional parameters for the model initialization.</p> <code>{}</code> <p>Examples:</p> <p>Initialize an Azure OpenAI model:     &gt;&gt;&gt; from llama_utils.utils.models import LLMModel     &gt;&gt;&gt; from dotenv import load_dotenv     &gt;&gt;&gt; load_dotenv() # doctest: +SKIP     &gt;&gt;&gt; model = LLMModel(model_type='azure', model_id='gpt-4o', engine='4o') # doctest: +SKIP     &gt;&gt;&gt; print(model.base_model.model) # doctest: +SKIP     gpt-4o     &gt;&gt;&gt; response = model.generate_response(\"Hello, how are you?\") # doctest: +SKIP     &gt;&gt;&gt; print(response) # doctest: +SKIP     Hello! I'm just a computer program, so I don't have feelings, but I'm here and ready to help you. How can I assist you today?</p> <p>Initialize an Ollama model:     &gt;&gt;&gt; model = LLMModel(model_type='ollama', model_id='llama3.1')     &gt;&gt;&gt; response = model.generate_response(\"Hello, how are you?\") # doctest: +SKIP     &gt;&gt;&gt; print(response) # doctest: +SKIP     I'm just a language model, I don't have emotions or feelings like humans do, so I don't have good or bad days. However, I'm functioning properly and ready to help with any questions or tasks you may have! How about you? How's your day going?</p> <p>Initialize a HuggingFace model:     &gt;&gt;&gt; import os     &gt;&gt;&gt; cache_dir = os.getenv(\"CACHE_DIR\")     &gt;&gt;&gt; model_kwargs = {}     &gt;&gt;&gt; model_kwargs[\"cache_dir\"] = cache_dir     &gt;&gt;&gt; model_name = \"distilgpt2\"     &gt;&gt;&gt; model = LLMModel(     ...     model_type='huggingface', model_name=model_name, tokenizer_name=model_name, model_kwargs=model_kwargs     ... )     &gt;&gt;&gt; response = model.generate_response(\"Hello, how are you?\") # doctest: +SKIP     &gt;&gt;&gt; print(response) # doctest: +SKIP</p> Source code in <code>src/llama_utils/utils/models.py</code> <pre><code>class LLMModel:\n    r\"\"\"Abstraction layer for different LLM providers: AzureOpenAI, Ollama, and HuggingFace.\n\n    Parameters\n    ----------\n    model_type : str\n        Type of the model ('azure', 'ollama', 'huggingface').\n    **kwargs : dict\n        Additional parameters for the model initialization.\n\n    Examples\n    --------\n    Initialize an Azure OpenAI model:\n        &gt;&gt;&gt; from llama_utils.utils.models import LLMModel\n        &gt;&gt;&gt; from dotenv import load_dotenv\n        &gt;&gt;&gt; load_dotenv() # doctest: +SKIP\n        &gt;&gt;&gt; model = LLMModel(model_type='azure', model_id='gpt-4o', engine='4o') # doctest: +SKIP\n        &gt;&gt;&gt; print(model.base_model.model) # doctest: +SKIP\n        gpt-4o\n        &gt;&gt;&gt; response = model.generate_response(\"Hello, how are you?\") # doctest: +SKIP\n        &gt;&gt;&gt; print(response) # doctest: +SKIP\n        Hello! I'm just a computer program, so I don't have feelings, but I'm here and ready to help you. How can I assist you today?\n\n    Initialize an Ollama model:\n        &gt;&gt;&gt; model = LLMModel(model_type='ollama', model_id='llama3.1')\n        &gt;&gt;&gt; response = model.generate_response(\"Hello, how are you?\") # doctest: +SKIP\n        &gt;&gt;&gt; print(response) # doctest: +SKIP\n        I'm just a language model, I don't have emotions or feelings like humans do, so I don't have good or bad days. However, I'm functioning properly and ready to help with any questions or tasks you may have! How about you? How's your day going?\n\n    Initialize a HuggingFace model:\n        &gt;&gt;&gt; import os\n        &gt;&gt;&gt; cache_dir = os.getenv(\"CACHE_DIR\")\n        &gt;&gt;&gt; model_kwargs = {}\n        &gt;&gt;&gt; model_kwargs[\"cache_dir\"] = cache_dir\n        &gt;&gt;&gt; model_name = \"distilgpt2\"\n        &gt;&gt;&gt; model = LLMModel(\n        ...     model_type='huggingface', model_name=model_name, tokenizer_name=model_name, model_kwargs=model_kwargs\n        ... )\n        &gt;&gt;&gt; response = model.generate_response(\"Hello, how are you?\") # doctest: +SKIP\n        &gt;&gt;&gt; print(response) # doctest: +SKIP\n    \"\"\"\n\n    def __init__(self, model_type: str, **kwargs):\n        \"\"\"Initialize the LLM model.\"\"\"\n        self._model_type = model_type.lower()\n        self._base_model = self._initialize_model(**kwargs)\n\n    @property\n    def base_model(self):\n        \"\"\"Get the base model.\"\"\"\n        return self._base_model\n\n    @property\n    def model_type(self):\n        \"\"\"Get the model type.\"\"\"\n        return self._model_type\n\n    def _initialize_model(self, **kwargs):\n        if self.model_type == \"azure\":\n            return azure_open_ai(\n                model_id=kwargs.get(\"model_id\", \"gpt-4o\"),\n                engine=kwargs.get(\"engine\", \"4o\"),\n            )\n        elif self.model_type == \"ollama\":\n            return get_ollama_llm(**kwargs)\n        elif self.model_type == \"huggingface\":\n            return get_huggingface_llm(**kwargs)\n        else:\n            raise ValueError(f\"Unsupported model type: {self.model_type}\")\n\n    def generate_response(self, prompt: str, **kwargs):\n        \"\"\"Generate a response from the model.\n\n        Parameters\n        ----------\n        prompt : str\n            The input prompt.\n        **kwargs : dict\n            Additional parameters for generation.\n\n        Returns\n        -------\n        str\n            Generated response.\n\n        Examples\n        --------\n        Generate response using Azure OpenAI:\n\n        &gt;&gt;&gt; model = LLMModel(model_type='azure', model_id='gpt-4o')\n        &gt;&gt;&gt; response = model.generate_response(\"What is AI?\") # doctest: +SKIP\n        &gt;&gt;&gt; print(response) # doctest: +SKIP\n\n        Generate response using Ollama:\n\n        &gt;&gt;&gt; model = LLMModel(model_type='ollama', model_id='llama3')\n        &gt;&gt;&gt; response = model.generate_response(\"Explain quantum mechanics.\") # doctest: +SKIP\n        &gt;&gt;&gt; print(response) # doctest: +SKIP\n\n        Generate response using HuggingFace:\n\n        &gt;&gt;&gt; model = LLMModel(model_type='huggingface', model_name='distilgpt2') # doctest: +SKIP\n        &gt;&gt;&gt; response = model.generate_response(\"Write a poem about the sea.\") # doctest: +SKIP\n        &gt;&gt;&gt; print(response) # doctest: +SKIP\n        \"\"\"\n        if self.model_type in [\"azure\", \"ollama\", \"huggingface\"]:\n            return self.base_model.complete(prompt, **kwargs)\n        else:\n            raise ValueError(\"Invalid model type\")\n</code></pre>"},{"location":"api/utils.html#llama_utils.utils.models.LLMModel.base_model","title":"<code>base_model</code>  <code>property</code>","text":"<p>Get the base model.</p>"},{"location":"api/utils.html#llama_utils.utils.models.LLMModel.model_type","title":"<code>model_type</code>  <code>property</code>","text":"<p>Get the model type.</p>"},{"location":"api/utils.html#llama_utils.utils.models.LLMModel.__init__","title":"<code>__init__(model_type: str, **kwargs)</code>","text":"<p>Initialize the LLM model.</p> Source code in <code>src/llama_utils/utils/models.py</code> <pre><code>def __init__(self, model_type: str, **kwargs):\n    \"\"\"Initialize the LLM model.\"\"\"\n    self._model_type = model_type.lower()\n    self._base_model = self._initialize_model(**kwargs)\n</code></pre>"},{"location":"api/utils.html#llama_utils.utils.models.LLMModel.generate_response","title":"<code>generate_response(prompt: str, **kwargs)</code>","text":"<p>Generate a response from the model.</p> <p>Parameters:</p> Name Type Description Default <code>prompt</code> <code>str</code> <p>The input prompt.</p> required <code>**kwargs</code> <code>dict</code> <p>Additional parameters for generation.</p> <code>{}</code> <p>Returns:</p> Type Description <code>str</code> <p>Generated response.</p> <p>Examples:</p> <p>Generate response using Azure OpenAI:</p> <pre><code>&gt;&gt;&gt; model = LLMModel(model_type='azure', model_id='gpt-4o')\n&gt;&gt;&gt; response = model.generate_response(\"What is AI?\")\n&gt;&gt;&gt; print(response)\n</code></pre> <p>Generate response using Ollama:</p> <pre><code>&gt;&gt;&gt; model = LLMModel(model_type='ollama', model_id='llama3')\n&gt;&gt;&gt; response = model.generate_response(\"Explain quantum mechanics.\")\n&gt;&gt;&gt; print(response)\n</code></pre> <p>Generate response using HuggingFace:</p> <pre><code>&gt;&gt;&gt; model = LLMModel(model_type='huggingface', model_name='distilgpt2')\n&gt;&gt;&gt; response = model.generate_response(\"Write a poem about the sea.\")\n&gt;&gt;&gt; print(response)\n</code></pre> Source code in <code>src/llama_utils/utils/models.py</code> <pre><code>def generate_response(self, prompt: str, **kwargs):\n    \"\"\"Generate a response from the model.\n\n    Parameters\n    ----------\n    prompt : str\n        The input prompt.\n    **kwargs : dict\n        Additional parameters for generation.\n\n    Returns\n    -------\n    str\n        Generated response.\n\n    Examples\n    --------\n    Generate response using Azure OpenAI:\n\n    &gt;&gt;&gt; model = LLMModel(model_type='azure', model_id='gpt-4o')\n    &gt;&gt;&gt; response = model.generate_response(\"What is AI?\") # doctest: +SKIP\n    &gt;&gt;&gt; print(response) # doctest: +SKIP\n\n    Generate response using Ollama:\n\n    &gt;&gt;&gt; model = LLMModel(model_type='ollama', model_id='llama3')\n    &gt;&gt;&gt; response = model.generate_response(\"Explain quantum mechanics.\") # doctest: +SKIP\n    &gt;&gt;&gt; print(response) # doctest: +SKIP\n\n    Generate response using HuggingFace:\n\n    &gt;&gt;&gt; model = LLMModel(model_type='huggingface', model_name='distilgpt2') # doctest: +SKIP\n    &gt;&gt;&gt; response = model.generate_response(\"Write a poem about the sea.\") # doctest: +SKIP\n    &gt;&gt;&gt; print(response) # doctest: +SKIP\n    \"\"\"\n    if self.model_type in [\"azure\", \"ollama\", \"huggingface\"]:\n        return self.base_model.complete(prompt, **kwargs)\n    else:\n        raise ValueError(\"Invalid model type\")\n</code></pre>"},{"location":"api/utils.html#llama_utils.utils.models.azure_open_ai","title":"<code>azure_open_ai(model_id: str = 'gpt-4o', engine: str = '4o')</code>","text":"<p>Get the Azure OpenAI model.</p> <p>Parameters:</p> Name Type Description Default <code>model_id</code> <code>str</code> <p>The model ID.</p> <code>'gpt-4o'</code> <code>engine</code> <code>str</code> <p>The engine.</p> <code>'4o'</code> <p>Returns:</p> Type Description <code>AzureOpenAI</code> <p>The Azure OpenAI model.</p> <p>Raises:</p> Type Description <code>ImportError</code> <p>If the <code>llama-index-llms-azure-openai</code> package is not installed.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from llama_utils.utils.models import azure_open_ai\n&gt;&gt;&gt; from dotenv import load_dotenv\n&gt;&gt;&gt; load_dotenv()\n&gt;&gt;&gt; llm = azure_open_ai()\n&gt;&gt;&gt; print(llm.model)\ngpt-4o\n&gt;&gt;&gt; print(llm.metadata)\ncontext_window=128000 num_output=-1 is_chat_model=True is_function_calling_model=True model_name='gpt-4o' system_role=&lt;MessageRole.SYSTEM: 'system'&gt;\n</code></pre> Source code in <code>src/llama_utils/utils/models.py</code> <pre><code>def azure_open_ai(model_id: str = \"gpt-4o\", engine: str = \"4o\"):\n    \"\"\"Get the Azure OpenAI model.\n\n    Parameters\n    ----------\n    model_id: str, optional, default is \"gpt-4o\"\n        The model ID.\n    engine: str, optional, default is \"4o\"\n        The engine.\n\n    Returns\n    -------\n    AzureOpenAI\n        The Azure OpenAI model.\n\n    Raises\n    ------\n    ImportError\n        If the `llama-index-llms-azure-openai` package is not installed.\n\n    Examples\n    --------\n    &gt;&gt;&gt; from llama_utils.utils.models import azure_open_ai\n    &gt;&gt;&gt; from dotenv import load_dotenv\n    &gt;&gt;&gt; load_dotenv() # doctest: +SKIP\n    &gt;&gt;&gt; llm = azure_open_ai() # doctest: +SKIP\n    &gt;&gt;&gt; print(llm.model) # doctest: +SKIP\n    gpt-4o\n    &gt;&gt;&gt; print(llm.metadata) # doctest: +SKIP\n    context_window=128000 num_output=-1 is_chat_model=True is_function_calling_model=True model_name='gpt-4o' system_role=&lt;MessageRole.SYSTEM: 'system'&gt;\n    \"\"\"\n    try:\n        from llama_index.llms.azure_openai import AzureOpenAI\n    except ImportError:\n        raise ImportError(\n            \"Please install the `llama-index-llms-azure-openai` package to use the Azure OpenAI model.\"\n        )\n    endpoint = os.environ.get(\"AZURE_OPENAI_ENDPOINT\")\n    api_key = os.environ.get(\"AZURE_OPENAI_API_KEY\")\n    api_version = os.environ.get(\"AZURE_OPENAI_API_VERSION\")\n\n    if endpoint is None or api_key is None or api_version is None:\n        warn(\"Azure OpenAI environment variables are not set.\")\n\n    llm = AzureOpenAI(\n        engine=\"4o\" if engine is None else engine,\n        model=\"gpt-4o\" if model_id is None else model_id,  # o1-preview\n        temperature=0.0,\n        azure_endpoint=endpoint,\n        api_key=api_key,\n        api_version=api_version,\n    )\n\n    return llm\n</code></pre>"},{"location":"api/utils.html#llama_utils.utils.models.get_hugging_face_embedding","title":"<code>get_hugging_face_embedding(model_name: str = 'BAAI/bge-small-en-v1.5', cache_folder: str = None)</code>","text":"<p>Get the hugging face embedding model.</p> <p>Parameters:</p> Name Type Description Default <code>model_name</code> <code>str</code> <p>Name of the hugging face embedding model.</p> <code>'BAAI/bge-small-en-v1.5'</code> <code>cache_folder</code> <code>str</code> <p>Folder to cache the model. If not provided the function will search for - <code>LLAMA_INDEX_CACHE_DIR</code> in your environment variables. - <code>~/tmp/llama_index</code> if your OS is Linux. - <code>~/Library/Caches/llama_index</code> if your OS is MacOS. - <code>~/AppData/Local/llama_index</code> if your OS is Windows.</p> <code>None</code> <p>Returns:</p> Type Description <code>HuggingFaceEmbedding</code> <p>The hugging face embedding model.</p> <p>Raises:</p> Type Description <code>ImportError</code> <p>If the <code>llama-index-embeddings-huggingface</code> package is not installed.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from llama_utils.utils.models import get_hugging_face_embedding\n&gt;&gt;&gt; embedding = get_hugging_face_embedding()\n&gt;&gt;&gt; print(embedding.model_name)\nBAAI/bge-small-en-v1.5\n&gt;&gt;&gt; print(embedding.max_length)\n512\n&gt;&gt;&gt; print(embedding.embed_batch_size)\n10\n</code></pre> Source code in <code>src/llama_utils/utils/models.py</code> <pre><code>def get_hugging_face_embedding(\n    model_name: str = \"BAAI/bge-small-en-v1.5\", cache_folder: str = None\n):\n    \"\"\"Get the hugging face embedding model.\n\n    Parameters\n    ----------\n    model_name: str, optional, default is \"BAAI/bge-small-en-v1.5\"\n        Name of the hugging face embedding model.\n    cache_folder: str, optional, default is None\n        Folder to cache the model. If not provided the function will search for\n        - `LLAMA_INDEX_CACHE_DIR` in your environment variables.\n        - `~/tmp/llama_index` if your OS is Linux.\n        - `~/Library/Caches/llama_index` if your OS is MacOS.\n        - `~/AppData/Local/llama_index` if your OS is Windows.\n\n    Returns\n    -------\n    HuggingFaceEmbedding\n        The hugging face embedding model.\n\n    Raises\n    ------\n    ImportError\n        If the `llama-index-embeddings-huggingface` package is not installed.\n\n    Examples\n    --------\n    &gt;&gt;&gt; from llama_utils.utils.models import get_hugging_face_embedding\n    &gt;&gt;&gt; embedding = get_hugging_face_embedding()\n    &gt;&gt;&gt; print(embedding.model_name)\n    BAAI/bge-small-en-v1.5\n    &gt;&gt;&gt; print(embedding.max_length)\n    512\n    &gt;&gt;&gt; print(embedding.embed_batch_size)\n    10\n    \"\"\"\n    try:\n        from llama_index.embeddings.huggingface import HuggingFaceEmbedding\n    except ImportError:\n        raise ImportError(\n            \"Please install the `llama-index-embeddings-huggingface` package to use the Hugging Face embedding model.\"\n        )\n\n    embedding = HuggingFaceEmbedding(model_name=model_name, cache_folder=cache_folder)\n    return embedding\n</code></pre>"},{"location":"api/utils.html#llama_utils.utils.models.get_huggingface_llm","title":"<code>get_huggingface_llm(**kwargs)</code>","text":"<p>Initializes and returns a HuggingFaceLLM instance with specified parameters.</p> <p>Parameters:</p> Name Type Description Default <code>kwargs</code> <p>context_window : int, optional     The maximum context window size, by default DEFAULT_CONTEXT_WINDOW. max_new_tokens : int, optional     The maximum number of new tokens to generate, by default DEFAULT_NUM_OUTPUTS. generate_kwargs : dict, optional     Additional arguments for text generation, by default {\"temperature\": 0.75, \"do_sample\": False}. query_wrapper_prompt : str, optional     The wrapper prompt for query execution, by default \"Answer the following question succinctly and informatively.\". tokenizer_name : str, optional     The tokenizer model name, by default DEFAULT_HUGGINGFACE_MODEL. model_name : str, optional     The model name, by default DEFAULT_HUGGINGFACE_MODEL. device_map : str, optional     The device mapping strategy, by default \"auto\". tokenizer_kwargs : dict, optional     Additional tokenizer arguments, by default {\"max_length\": 2048}. model_kwargs : dict, optional     Additional model arguments, by default {\"torch_dtype\": torch.float16}.</p> <code>{}</code> <p>Returns:</p> Type Description <code>HuggingFaceLLM</code> <p>An instance of the HuggingFaceLLM class.</p> Source code in <code>src/llama_utils/utils/models.py</code> <pre><code>def get_huggingface_llm(**kwargs):\n    \"\"\"Initializes and returns a HuggingFaceLLM instance with specified parameters.\n\n    Parameters\n    ----------\n    kwargs: dict\n        context_window : int, optional\n            The maximum context window size, by default DEFAULT_CONTEXT_WINDOW.\n        max_new_tokens : int, optional\n            The maximum number of new tokens to generate, by default DEFAULT_NUM_OUTPUTS.\n        generate_kwargs : dict, optional\n            Additional arguments for text generation, by default {\"temperature\": 0.75, \"do_sample\": False}.\n        query_wrapper_prompt : str, optional\n            The wrapper prompt for query execution, by default \"Answer the following question succinctly and informatively.\".\n        tokenizer_name : str, optional\n            The tokenizer model name, by default DEFAULT_HUGGINGFACE_MODEL.\n        model_name : str, optional\n            The model name, by default DEFAULT_HUGGINGFACE_MODEL.\n        device_map : str, optional\n            The device mapping strategy, by default \"auto\".\n        tokenizer_kwargs : dict, optional\n            Additional tokenizer arguments, by default {\"max_length\": 2048}.\n        model_kwargs : dict, optional\n            Additional model arguments, by default {\"torch_dtype\": torch.float16}.\n\n    Returns\n    -------\n    HuggingFaceLLM\n        An instance of the HuggingFaceLLM class.\n    \"\"\"\n    try:\n        import torch\n        from llama_index.llms.huggingface import HuggingFaceLLM\n    except ImportError:\n        raise ImportError(\n            \"Please install the `llama-index-llms-huggingface` package to use the HuggingFaceLLM model.\"\n        )\n\n    return HuggingFaceLLM(\n        context_window=kwargs.get(\"context_window\", DEFAULT_CONTEXT_WINDOW),\n        max_new_tokens=kwargs.get(\"max_new_tokens\", DEFAULT_NUM_OUTPUTS),\n        generate_kwargs=kwargs.get(\n            \"generate_kwargs\", {\"temperature\": 0.75, \"do_sample\": False}\n        ),\n        query_wrapper_prompt=kwargs.get(\n            \"query_wrapper_prompt\",\n            \"Answer the following question succinctly and informatively.\",\n        ),\n        tokenizer_name=kwargs.get(\"tokenizer_name\", DEFAULT_HUGGINGFACE_MODEL),\n        model_name=kwargs.get(\"model_name\", DEFAULT_HUGGINGFACE_MODEL),\n        device_map=kwargs.get(\"device_map\", \"auto\"),\n        tokenizer_kwargs=kwargs.get(\"tokenizer_kwargs\", {\"max_length\": 2048}),\n        model_kwargs=kwargs.get(\n            \"model_kwargs\",\n            {\"torch_dtype\": torch.float16},\n        ),\n    )\n</code></pre>"},{"location":"api/utils.html#llama_utils.utils.models.get_ollama_llm","title":"<code>get_ollama_llm(model_id: str = 'llama3', base_url: str = 'http://localhost:11434', temperature: float = 0.75, context_window: int = DEFAULT_CONTEXT_WINDOW, request_timeout: float = 360.0, prompt_key: str = 'prompt', json_mode: bool = False, additional_kwargs: Dict[str, Any] = {}, is_function_calling_model: bool = True, keep_alive: Optional[Union[float, str]] = None)</code>","text":"<p>Get the Ollama LLM with flexible parameters.</p> <p>Parameters:</p> Name Type Description Default <code>model_id</code> <code>str</code> <p>The model ID to use.</p> <code>'llama3'</code> <code>base_url</code> <code>str</code> <p>The base URL of the Ollama API.</p> <code>'http://localhost:11434'</code> <code>temperature</code> <code>float</code> <p>The temperature setting for response randomness.</p> <code>0.75</code> <code>context_window</code> <code>int</code> <p>Maximum token window for context.</p> <code>DEFAULT_CONTEXT_WINDOW</code> <code>request_timeout</code> <code>float</code> <p>Timeout for requests.</p> <code>360.0</code> <code>prompt_key</code> <code>str</code> <p>Key for the prompt in requests.</p> <code>'prompt'</code> <code>json_mode</code> <code>bool</code> <p>Whether to return responses in JSON mode.</p> <code>False</code> <code>additional_kwargs</code> <code>dict</code> <p>Additional model-specific parameters.</p> <code>{}</code> <code>is_function_calling_model</code> <code>bool</code> <p>Whether the model supports function calling.</p> <code>True</code> <code>keep_alive</code> <code>Optional[Union[float, str]]</code> <p>Keep-alive duration.</p> <code>None</code> <p>Returns:</p> Type Description <code>Ollama</code> <p>An instance of the Ollama LLM.</p> <p>Raises:</p> Type Description <code>ImportError</code> <p>If the <code>llama-index-llms-ollama</code> package is not installed.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from llama_utils.utils.models import get_ollama_llm\n&gt;&gt;&gt; llm = get_ollama_llm()\n&gt;&gt;&gt; print(llm.model)\nllama3\n&gt;&gt;&gt; print(llm.base_url)\nhttp://localhost:11434\n&gt;&gt;&gt; print(llm.metadata)\ncontext_window=3900 num_output=256 is_chat_model=True is_function_calling_model=True model_name='llama3' system_role=&lt;MessageRole.SYSTEM: 'system'&gt;\n</code></pre> Source code in <code>src/llama_utils/utils/models.py</code> <pre><code>def get_ollama_llm(\n    model_id: str = \"llama3\",\n    base_url: str = \"http://localhost:11434\",\n    temperature: float = 0.75,\n    context_window: int = DEFAULT_CONTEXT_WINDOW,\n    request_timeout: float = 360.0,\n    prompt_key: str = \"prompt\",\n    json_mode: bool = False,\n    additional_kwargs: Dict[str, Any] = {},\n    is_function_calling_model: bool = True,\n    keep_alive: Optional[Union[float, str]] = None,\n):\n    \"\"\"Get the Ollama LLM with flexible parameters.\n\n    Parameters\n    ----------\n    model_id : str\n        The model ID to use.\n    base_url : str, optional\n        The base URL of the Ollama API.\n    temperature : float, optional\n        The temperature setting for response randomness.\n    context_window : int, optional\n        Maximum token window for context.\n    request_timeout : float, optional\n        Timeout for requests.\n    prompt_key : str, optional\n        Key for the prompt in requests.\n    json_mode : bool, optional\n        Whether to return responses in JSON mode.\n    additional_kwargs : dict, optional\n        Additional model-specific parameters.\n    is_function_calling_model : bool, optional\n        Whether the model supports function calling.\n    keep_alive : Optional[Union[float, str]], optional\n        Keep-alive duration.\n\n    Returns\n    -------\n    Ollama\n        An instance of the Ollama LLM.\n\n    Raises\n    ------\n    ImportError\n        If the `llama-index-llms-ollama` package is not installed.\n\n    Examples\n    --------\n    &gt;&gt;&gt; from llama_utils.utils.models import get_ollama_llm\n    &gt;&gt;&gt; llm = get_ollama_llm()\n    &gt;&gt;&gt; print(llm.model)\n    llama3\n    &gt;&gt;&gt; print(llm.base_url)\n    http://localhost:11434\n    &gt;&gt;&gt; print(llm.metadata)\n    context_window=3900 num_output=256 is_chat_model=True is_function_calling_model=True model_name='llama3' system_role=&lt;MessageRole.SYSTEM: 'system'&gt;\n    \"\"\"\n    try:\n        from llama_index.llms.ollama import Ollama\n    except ImportError:\n        raise ImportError(\n            \"Please install the `llama-index-llms-ollama` package to use the Ollama model.\"\n        )\n\n    return Ollama(\n        model=model_id,\n        base_url=base_url,\n        temperature=temperature,\n        context_window=context_window,\n        request_timeout=request_timeout,\n        prompt_key=prompt_key,\n        json_mode=json_mode,\n        additional_kwargs=additional_kwargs,\n        is_function_calling_model=is_function_calling_model,\n        keep_alive=keep_alive,\n    )\n</code></pre>"},{"location":"api/utils.html#config_loader","title":"config_loader","text":""},{"location":"api/utils.html#llama_utils.utils.config_loader","title":"<code>llama_utils.utils.config_loader</code>","text":"<p>A class or function to load configuration.</p>"},{"location":"api/utils.html#llama_utils.utils.config_loader.ConfigLoader","title":"<code>ConfigLoader</code>","text":"<p>A class or function to load configuration.</p> Source code in <code>src/llama_utils/utils/config_loader.py</code> <pre><code>class ConfigLoader:\n    \"\"\"A class or function to load configuration.\"\"\"\n\n    def __init__(\n        self,\n        llm: Any = None,\n        embedding: Any = None,\n    ):\n        \"\"\"Initialize the ConfigLoader class.\n\n        Parameters\n        ----------\n        llm: Any, optional, default is llama3\n            llm model to use.\n        embedding: Any, optional, default is BAAI/bge-small-en-v1.5\n            Embedding model to use.\n\n        Examples\n        --------\n        ```python\n        &gt;&gt;&gt; from llama_utils.utils.config_loader import ConfigLoader\n        &gt;&gt;&gt; config = ConfigLoader() # doctest: +SKIP\n        &gt;&gt;&gt; print(config.embedding) # doctest: +SKIP\n        model_name='BAAI/bge-small-en-v1.5' embed_batch_size=10 callback_manager=&lt;llama_index.core.callbacks.base.CallbackManager object at 0x000002919C16BD40&gt; num_workers=None max_length=512 normalize=True query_instruction=None text_instruction=None cache_folder=None\n        &gt;&gt;&gt; print(config.llm.model) # doctest: +SKIP\n        llama3\n\n        ```\n        \"\"\"\n        if llm is None:\n            llm = get_ollama_llm()\n        if embedding is None:\n            embedding = get_hugging_face_embedding()\n\n        Settings.embed_model = embedding\n        Settings.llm = llm\n        Settings.text_splitter = SentenceSplitter(chunk_size=1024, chunk_overlap=20)\n        self._settings = Settings\n        self._embedding = embedding\n        self._llm = llm\n\n    @property\n    def settings(self):\n        \"\"\"Get the settings.\"\"\"\n        return self._settings\n\n    @property\n    def llm(self):\n        \"\"\"Get the llm model.\"\"\"\n        return self._llm\n\n    @llm.setter\n    def llm(self, value):\n        self._llm = value\n        Settings.llm = value\n\n    @property\n    def embedding(self):\n        \"\"\"Get the embedding model.\"\"\"\n        return self._embedding\n\n    @embedding.setter\n    def embedding(self, value):\n        self._embedding = value\n        Settings.embed_model = value\n</code></pre>"},{"location":"api/utils.html#llama_utils.utils.config_loader.ConfigLoader.embedding","title":"<code>embedding</code>  <code>property</code> <code>writable</code>","text":"<p>Get the embedding model.</p>"},{"location":"api/utils.html#llama_utils.utils.config_loader.ConfigLoader.llm","title":"<code>llm</code>  <code>property</code> <code>writable</code>","text":"<p>Get the llm model.</p>"},{"location":"api/utils.html#llama_utils.utils.config_loader.ConfigLoader.settings","title":"<code>settings</code>  <code>property</code>","text":"<p>Get the settings.</p>"},{"location":"api/utils.html#llama_utils.utils.config_loader.ConfigLoader.__init__","title":"<code>__init__(llm: Any = None, embedding: Any = None)</code>","text":"<p>Initialize the ConfigLoader class.</p> <p>Parameters:</p> Name Type Description Default <code>llm</code> <code>Any</code> <p>llm model to use.</p> <code>None</code> <code>embedding</code> <code>Any</code> <p>Embedding model to use.</p> <code>None</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from llama_utils.utils.config_loader import ConfigLoader\n&gt;&gt;&gt; config = ConfigLoader() # doctest: +SKIP\n&gt;&gt;&gt; print(config.embedding) # doctest: +SKIP\nmodel_name='BAAI/bge-small-en-v1.5' embed_batch_size=10 callback_manager=&lt;llama_index.core.callbacks.base.CallbackManager object at 0x000002919C16BD40&gt; num_workers=None max_length=512 normalize=True query_instruction=None text_instruction=None cache_folder=None\n&gt;&gt;&gt; print(config.llm.model) # doctest: +SKIP\nllama3\n</code></pre> Source code in <code>src/llama_utils/utils/config_loader.py</code> <pre><code>def __init__(\n    self,\n    llm: Any = None,\n    embedding: Any = None,\n):\n    \"\"\"Initialize the ConfigLoader class.\n\n    Parameters\n    ----------\n    llm: Any, optional, default is llama3\n        llm model to use.\n    embedding: Any, optional, default is BAAI/bge-small-en-v1.5\n        Embedding model to use.\n\n    Examples\n    --------\n    ```python\n    &gt;&gt;&gt; from llama_utils.utils.config_loader import ConfigLoader\n    &gt;&gt;&gt; config = ConfigLoader() # doctest: +SKIP\n    &gt;&gt;&gt; print(config.embedding) # doctest: +SKIP\n    model_name='BAAI/bge-small-en-v1.5' embed_batch_size=10 callback_manager=&lt;llama_index.core.callbacks.base.CallbackManager object at 0x000002919C16BD40&gt; num_workers=None max_length=512 normalize=True query_instruction=None text_instruction=None cache_folder=None\n    &gt;&gt;&gt; print(config.llm.model) # doctest: +SKIP\n    llama3\n\n    ```\n    \"\"\"\n    if llm is None:\n        llm = get_ollama_llm()\n    if embedding is None:\n        embedding = get_hugging_face_embedding()\n\n    Settings.embed_model = embedding\n    Settings.llm = llm\n    Settings.text_splitter = SentenceSplitter(chunk_size=1024, chunk_overlap=20)\n    self._settings = Settings\n    self._embedding = embedding\n    self._llm = llm\n</code></pre>"},{"location":"api/utils.html#helper_functions","title":"helper_functions","text":""},{"location":"api/utils.html#llama_utils.utils.helper_functions","title":"<code>llama_utils.utils.helper_functions</code>","text":"<p>A collection of helper functions used across different modules (e.g., text preprocessing, validation).</p>"},{"location":"api/utils.html#llama_utils.utils.helper_functions.HelperFunctions","title":"<code>HelperFunctions</code>","text":"<p>A collection of helper functions used across different modules (e.g., text preprocessing, validation).</p> Source code in <code>src/llama_utils/utils/helper_functions.py</code> <pre><code>class HelperFunctions:\n    \"\"\"A collection of helper functions used across different modules (e.g., text preprocessing, validation).\"\"\"\n\n    def __init__(self):\n        \"\"\"Initialize the helper functions.\"\"\"\n        pass\n</code></pre>"},{"location":"api/utils.html#llama_utils.utils.helper_functions.HelperFunctions.__init__","title":"<code>__init__()</code>","text":"<p>Initialize the helper functions.</p> Source code in <code>src/llama_utils/utils/helper_functions.py</code> <pre><code>def __init__(self):\n    \"\"\"Initialize the helper functions.\"\"\"\n    pass\n</code></pre>"},{"location":"api/utils.html#llama_utils.utils.helper_functions.generate_content_hash","title":"<code>generate_content_hash(content: str)</code>","text":"<p>Generate a hash for the document content using SHA-256.</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>str</code> <p>The content of the document.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The SHA-256 hash of the content.</p> Source code in <code>src/llama_utils/utils/helper_functions.py</code> <pre><code>def generate_content_hash(content: str):\n    \"\"\"Generate a hash for the document content using SHA-256.\n\n    Parameters\n    ----------\n    content: str\n        The content of the document.\n\n    Returns\n    -------\n    str\n        The SHA-256 hash of the content.\n    \"\"\"\n    return hashlib.sha256(content.encode(\"utf-8\")).hexdigest()\n</code></pre>"},{"location":"api/utils.html#llama_utils.utils.helper_functions.is_sha256","title":"<code>is_sha256(string: str) -&gt; bool</code>","text":"<p>Check if a string is a valid SHA-256 hash.</p> <p>Parameters:</p> Name Type Description Default <code>string</code> <code>str</code> <p>The string to check.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the string is a valid SHA-256 hash, False otherwise.</p> Source code in <code>src/llama_utils/utils/helper_functions.py</code> <pre><code>def is_sha256(string: str) -&gt; bool:\n    \"\"\"Check if a string is a valid SHA-256 hash.\n\n    Parameters\n    ----------\n    string: str\n        The string to check.\n\n    Returns\n    -------\n    bool\n        True if the string is a valid SHA-256 hash, False otherwise.\n    \"\"\"\n    # SHA-256 hash must be 64 characters long and contain only hexadecimal characters\n    return bool(re.fullmatch(r\"[a-fA-F0-9]{64}\", string))\n</code></pre>"},{"location":"api/utils.html#loggers","title":"loggers","text":""},{"location":"api/utils.html#llama_utils.utils.logger","title":"<code>llama_utils.utils.logger</code>","text":"<p>Logger.</p>"},{"location":"api/utils.html#llama_utils.utils.logger.Logger","title":"<code>Logger</code>","text":"<p>Logger class.</p> Source code in <code>src/llama_utils/utils/logger.py</code> <pre><code>class Logger:\n    \"\"\"Logger class.\"\"\"\n\n    def __init__(self, name: str, level: int = logging.INFO, file_name: str = None):\n        \"\"\"Initialize the logger.\"\"\"\n        logging.basicConfig(\n            level=level,\n            format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\",\n            filename=file_name if not None else \"llama-utils.log\",\n        )\n        self.logger = logging.getLogger(name)\n        self.logger.addHandler(logging.StreamHandler(stream=sys.stdout))\n</code></pre>"},{"location":"api/utils.html#llama_utils.utils.logger.Logger.__init__","title":"<code>__init__(name: str, level: int = logging.INFO, file_name: str = None)</code>","text":"<p>Initialize the logger.</p> Source code in <code>src/llama_utils/utils/logger.py</code> <pre><code>def __init__(self, name: str, level: int = logging.INFO, file_name: str = None):\n    \"\"\"Initialize the logger.\"\"\"\n    logging.basicConfig(\n        level=level,\n        format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\",\n        filename=file_name if not None else \"llama-utils.log\",\n    )\n    self.logger = logging.getLogger(name)\n    self.logger.addHandler(logging.StreamHandler(stream=sys.stdout))\n</code></pre>"},{"location":"api/utils.html#errors","title":"errors","text":""},{"location":"api/utils.html#llama_utils.utils.errors","title":"<code>llama_utils.utils.errors</code>","text":"<p>Errors module.</p>"},{"location":"api/utils.html#llama_utils.utils.errors.StorageNotFoundError","title":"<code>StorageNotFoundError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>ReadOnlyError.</p> Source code in <code>src/llama_utils/utils/errors.py</code> <pre><code>class StorageNotFoundError(Exception):\n    \"\"\"ReadOnlyError.\"\"\"\n\n    def __init__(self, error_message: str):\n        \"\"\"__init__.\"\"\"\n</code></pre>"},{"location":"api/utils.html#llama_utils.utils.errors.StorageNotFoundError.__init__","title":"<code>__init__(error_message: str)</code>","text":"<p>init.</p> Source code in <code>src/llama_utils/utils/errors.py</code> <pre><code>def __init__(self, error_message: str):\n    \"\"\"__init__.\"\"\"\n</code></pre>"},{"location":"dev/installation.html","title":"Installation","text":"<p>To install unicloud, run this command in your terminal:</p> <pre><code>     pip install llama-utils\n</code></pre>"},{"location":"examples/retrieval/build-storage.html","title":"Building a Storage from Text File","text":"<p>In LlamaIndex, <code>Storage</code> is a central component that manages how documents, embeddings, and indexes are stored and retrieved from disk or memory. It acts as an interface between different storage layers, allowing for efficient data persistence and retrieval.</p> <p>The <code>Storage</code> enables you to:</p> <ul> <li>Store indexes, documents, and embeddings to disk.</li> <li>Load stored indexes and embeddings back into memory.</li> <li>Use different storage backends, such as in-memory storage, local disk storage, or cloud-based solutions.</li> </ul> In\u00a0[1]: Copied! <pre>from llama_utils.retrieval.storage import Storage\nfrom pathlib import Path\n</pre> from llama_utils.retrieval.storage import Storage from pathlib import Path In\u00a0[2]: Copied! <pre>import os\nCACHE_DIR = os.getenv(\"HUGGINGFACE_CACHE_DIR\")\nr_dir = \"../../../\"\nstorage_dir = f\"{r_dir}/examples/notebooks/storage/paul-graham-essay-storage\"\nDATA_PATH = f\"{r_dir}/examples/data/essay\"\n</pre> import os CACHE_DIR = os.getenv(\"HUGGINGFACE_CACHE_DIR\") r_dir = \"../../../\" storage_dir = f\"{r_dir}/examples/notebooks/storage/paul-graham-essay-storage\" DATA_PATH = f\"{r_dir}/examples/data/essay\" In\u00a0[6]: Copied! <pre>storage = Storage.create()\nprint(storage)\n</pre> storage = Storage.create() print(storage) <pre>\n        Documents: 0\n        Indexes: 0\n        \n</pre> <ul> <li>The <code>read_documents</code> method reads the documents from the specified path and returns a list of documents.</li> <li>The <code>read_documents</code> can take a directory path or a file path as input.</li> <li>The <code>split_into_nodes</code> parameter is used to split the documents into nodes.</li> <li>The <code>split_into_nodes</code> uses the following default parameters to split the document, <code>chunk_size=1024</code>, <code>chunk_overlap=100</code>.</li> </ul> In\u00a0[7]: Copied! <pre># The `DATA_PATH` directory has one file `paul-graham-essay.txt`\nlist(Path(DATA_PATH).iterdir())\n</pre> # The `DATA_PATH` directory has one file `paul-graham-essay.txt` list(Path(DATA_PATH).iterdir()) Out[7]: <pre>[WindowsPath('../../../examples/data/essay/paul-graham-essay.txt')]</pre> In\u00a0[9]: Copied! <pre># NBVAL_IGNORE_OUTPUT\ndocuments = storage.read_documents(DATA_PATH, split_into_nodes=True)\nprint(len(documents))\nprint(documents[0])\n</pre> # NBVAL_IGNORE_OUTPUT documents = storage.read_documents(DATA_PATH, split_into_nodes=True) print(len(documents)) print(documents[0]) <pre>20\nNode ID: 12996ced-831c-4926-8be3-6a84a49f6e7b\nText: What I Worked On    February 2021    Before college the two main\nthings I worked on, outside of school, were writing and programming. I\ndidn't write essays. I wrote what beginning writers were supposed to\nwrite then, and probably still are: short stories. My stories were\nawful. They had hardly any plot, just characters with strong feelings,\nwhic...\n</pre> <ul> <li>If you want to use a path to a certain document you can use the same method with the file path.</li> </ul> In\u00a0[10]: Copied! <pre># NBVAL_IGNORE_OUTPUT\nfile_path = f\"{DATA_PATH}/paul-graham-essay.txt\"\ndocuments = storage.read_documents(file_path, split_into_nodes=True)\nprint(f\"Number of documents: {len(documents)}\")\nprint(documents[0])\n</pre> # NBVAL_IGNORE_OUTPUT file_path = f\"{DATA_PATH}/paul-graham-essay.txt\" documents = storage.read_documents(file_path, split_into_nodes=True) print(f\"Number of documents: {len(documents)}\") print(documents[0]) <pre>Number of documents: 19\nNode ID: 1cfa95e5-8663-466e-91aa-5276a669f773\nText: What I Worked On    February 2021    Before college the two main\nthings I worked on, outside of school, were writing and programming. I\ndidn't write essays. I wrote what beginning writers were supposed to\nwrite then, and probably still are: short stories. My stories were\nawful. They had hardly any plot, just characters with strong feelings,\nwhic...\n</pre> In\u00a0[11]: Copied! <pre>storage.add_documents(documents)\nprint(storage)\n</pre> storage.add_documents(documents) print(storage) <pre>\n        Documents: 19\n        Indexes: 0\n        \n</pre> <p>As you see the storage object has the documents added to it.</p> In\u00a0[12]: Copied! <pre>node_id_list =storage.node_id_list()\nnode_id_list\n</pre> node_id_list =storage.node_id_list() node_id_list Out[12]: <pre>['c3c1026486ce099d6e2009463d6aa28e5ed2de38aa104fc0d62fdc51f07defe8',\n 'f670b5a18ea03a062d03b6ca6f41052eaa16bfebff5d2ed3e244c691a22f6550',\n 'ea09a6b38c5e26510bfccee3e598f41128d1d62c1c44c7fdd18e730269aebe21',\n '51c5863f38ba057bfd708e00d84ef775b9d310a720615c5dfab0301b8a7cac4c',\n '39d0d972087a0a27d1d78373a523e54b422ff1a09927e806a1f8e79c3e0d21b0',\n '27016ad9d966c839714639240dab8d24659d0cfb80fbdcb4af80a0e81b3d894c',\n 'b9e6206f6fd191db1529b9204072776dd57ea631a0de162019b6f4e308a3e1b4',\n '0840f760932d975914e4b7e7e664c68673b52077db88c34c338378a9e7f0b630',\n 'e75cae1d3d75c3180e79b23fff57c163ee2e02653e0dc393a4b47155b1202513',\n '60f93919033099369f277d230e6c8e5167c599aa0616b90f17f16a85b9de4fe1',\n 'f564c2c3268d56432b2ab94b2b2ed6d65060451418e510695d4fe2014226264e',\n 'c389b1ad61a8c1fbd5a396679a7e1661aabcb6e323ef4fbfa815065e84cdebf7',\n '8e897d50fbf2c6e0dd117d22428ec63fa43a55ccc7dd8a777034b6651204f1b8',\n '039515cdd3a336166767ce31fb3e71fad518f28a8924af171b57fdd00fd96383',\n '20fc5f0a9f5e2597faea5e3aae6cd72a7cb20e1ff45aa578a9fb564244519356',\n 'b0dea2603a0d95b528d1c70e954c45a670d43ad7abcd72834196f538c0649cb7',\n '137d977c2f2db8de725f8c0cc4a373fb9fc354ad934441b93806dae5fabd6d35',\n '66064e0d4d6d3c79052410187680600adba09d4fa0dbd4ba103de12087ab9e96',\n '1d9fdad2ba19763eb58380eac190d5839f288d6c7a98d167b95e5b59a271ceb4']</pre> In\u00a0[13]: Copied! <pre># NBVAL_IGNORE_OUTPUT\nnodes_metadata = storage.node_metadata\nnodes_metadata\n</pre> # NBVAL_IGNORE_OUTPUT nodes_metadata = storage.node_metadata nodes_metadata Out[13]: file_name node_id 0 paul-graham-essay.txt c3c1026486ce099d6e2009463d6aa28e5ed2de38aa104f... 1 paul-graham-essay.txt f670b5a18ea03a062d03b6ca6f41052eaa16bfebff5d2e... 2 paul-graham-essay.txt ea09a6b38c5e26510bfccee3e598f41128d1d62c1c44c7... 3 paul-graham-essay.txt 51c5863f38ba057bfd708e00d84ef775b9d310a720615c... 4 paul-graham-essay.txt 39d0d972087a0a27d1d78373a523e54b422ff1a09927e8... 5 paul-graham-essay.txt 27016ad9d966c839714639240dab8d24659d0cfb80fbdc... 6 paul-graham-essay.txt b9e6206f6fd191db1529b9204072776dd57ea631a0de16... 7 paul-graham-essay.txt 0840f760932d975914e4b7e7e664c68673b52077db88c3... 8 paul-graham-essay.txt e75cae1d3d75c3180e79b23fff57c163ee2e02653e0dc3... 9 paul-graham-essay.txt 60f93919033099369f277d230e6c8e5167c599aa0616b9... 10 paul-graham-essay.txt f564c2c3268d56432b2ab94b2b2ed6d65060451418e510... 11 paul-graham-essay.txt c389b1ad61a8c1fbd5a396679a7e1661aabcb6e323ef4f... 12 paul-graham-essay.txt 8e897d50fbf2c6e0dd117d22428ec63fa43a55ccc7dd8a... 13 paul-graham-essay.txt 039515cdd3a336166767ce31fb3e71fad518f28a8924af... 14 paul-graham-essay.txt 20fc5f0a9f5e2597faea5e3aae6cd72a7cb20e1ff45aa5... 15 paul-graham-essay.txt b0dea2603a0d95b528d1c70e954c45a670d43ad7abcd72... 16 paul-graham-essay.txt 137d977c2f2db8de725f8c0cc4a373fb9fc354ad934441... 17 paul-graham-essay.txt 66064e0d4d6d3c79052410187680600adba09d4fa0dbd4... 18 paul-graham-essay.txt 1d9fdad2ba19763eb58380eac190d5839f288d6c7a98d1... In\u00a0[14]: Copied! <pre>len(nodes_metadata)\n</pre> len(nodes_metadata) Out[14]: <pre>19</pre> In\u00a0[15]: Copied! <pre>nodes = storage.get_nodes_by_file_name(\"paul-graham-essay.txt\")\nlen(nodes)\n</pre> nodes = storage.get_nodes_by_file_name(\"paul-graham-essay.txt\") len(nodes) Out[15]: <pre>19</pre> <ul> <li>We can delete a node by using the <code>delete_node</code> method, which takes the <code>node_id</code> as input.</li> </ul> In\u00a0[16]: Copied! <pre>print(f\"The number of Nodes before the deletion: {len(storage.node_id_list())}\")\nstorage.delete_node(node_id_list[0])\nprint(f\"The number of Nodes after the deletion: {len(storage.node_id_list())}\")\n</pre> print(f\"The number of Nodes before the deletion: {len(storage.node_id_list())}\") storage.delete_node(node_id_list[0]) print(f\"The number of Nodes after the deletion: {len(storage.node_id_list())}\") <pre>The number of Nodes before the deletion: 19\nThe number of Nodes after the deletion: 18\n</pre> <ul> <li>Now if we check the <code>node_id_list</code> or the <code>node_metadata</code> we will see that the deleted node is not there.</li> </ul> In\u00a0[17]: Copied! <pre>len(storage.node_id_list())\n</pre> len(storage.node_id_list()) Out[17]: <pre>18</pre> In\u00a0[18]: Copied! <pre>file_name = \"paul-graham-essay.txt\"\nnodes = storage.get_nodes_by_file_name(file_name)\nprint(len(nodes))\nprint(nodes[0])\n</pre> file_name = \"paul-graham-essay.txt\" nodes = storage.get_nodes_by_file_name(file_name) print(len(nodes)) print(nodes[0]) <pre>18\nNode ID: f670b5a18ea03a062d03b6ca6f41052eaa16bfebff5d2ed3e244c691a22f6550\nText: I haven't tried rereading The Moon is a Harsh Mistress, so I\ndon't know how well it has aged, but when I read it I was drawn\nentirely into its world. It seemed only a matter of time before we'd\nhave Mike, and when I saw Winograd using SHRDLU, it seemed like that\ntime would be a few years at most. All you had to do was teach SHRDLU\nmore words.   ...\n</pre> <ul> <li>The <code>document_metadata</code> is a list of dictionaries that contain the metadata of the documents.</li> <li>Each document has the following metadata:</li> <li><code>node_ids</code>: a list of ids of the nodes that belong to the document.</li> <li><code>file_name</code>: the name of the file.</li> <li><code>metadata</code>: a dictionary that contains the original metadata from LlamaIndex.</li> </ul> <p>If you want to get the metadata as a dataframe you can use the <code>as_dataframe</code> parameter.</p> In\u00a0[19]: Copied! <pre># NBVAL_IGNORE_OUTPUT\ndocument_metadata = storage.document_metadata()\ndocument_metadata\n</pre> # NBVAL_IGNORE_OUTPUT document_metadata = storage.document_metadata() document_metadata Out[19]: <pre>{'05f5a125-612f-4398-87e1-07179ff75f62': RefDocInfo(node_ids=['f670b5a18ea03a062d03b6ca6f41052eaa16bfebff5d2ed3e244c691a22f6550', 'ea09a6b38c5e26510bfccee3e598f41128d1d62c1c44c7fdd18e730269aebe21', '51c5863f38ba057bfd708e00d84ef775b9d310a720615c5dfab0301b8a7cac4c', '39d0d972087a0a27d1d78373a523e54b422ff1a09927e806a1f8e79c3e0d21b0', '27016ad9d966c839714639240dab8d24659d0cfb80fbdcb4af80a0e81b3d894c', 'b9e6206f6fd191db1529b9204072776dd57ea631a0de162019b6f4e308a3e1b4', '0840f760932d975914e4b7e7e664c68673b52077db88c34c338378a9e7f0b630', 'e75cae1d3d75c3180e79b23fff57c163ee2e02653e0dc393a4b47155b1202513', '60f93919033099369f277d230e6c8e5167c599aa0616b90f17f16a85b9de4fe1', 'f564c2c3268d56432b2ab94b2b2ed6d65060451418e510695d4fe2014226264e', 'c389b1ad61a8c1fbd5a396679a7e1661aabcb6e323ef4fbfa815065e84cdebf7', '8e897d50fbf2c6e0dd117d22428ec63fa43a55ccc7dd8a777034b6651204f1b8', '039515cdd3a336166767ce31fb3e71fad518f28a8924af171b57fdd00fd96383', '20fc5f0a9f5e2597faea5e3aae6cd72a7cb20e1ff45aa578a9fb564244519356', 'b0dea2603a0d95b528d1c70e954c45a670d43ad7abcd72834196f538c0649cb7', '137d977c2f2db8de725f8c0cc4a373fb9fc354ad934441b93806dae5fabd6d35', '66064e0d4d6d3c79052410187680600adba09d4fa0dbd4ba103de12087ab9e96', '1d9fdad2ba19763eb58380eac190d5839f288d6c7a98d167b95e5b59a271ceb4'], metadata={'file_path': '..\\\\..\\\\..\\\\examples\\\\data\\\\essay\\\\paul-graham-essay.txt', 'file_name': 'paul-graham-essay.txt', 'file_type': 'text/plain', 'file_size': 75395, 'creation_date': '2024-10-25', 'last_modified_date': '2024-09-16', 'content-hash': 'c3c1026486ce099d6e2009463d6aa28e5ed2de38aa104fc0d62fdc51f07defe8'})}</pre> In\u00a0[20]: Copied! <pre># NBVAL_IGNORE_OUTPUT\ndocument_metadata = storage.document_metadata(as_dataframe=True)\ndocument_metadata\n</pre> # NBVAL_IGNORE_OUTPUT document_metadata = storage.document_metadata(as_dataframe=True) document_metadata Out[20]: doc_id node_id file_name 0 05f5a125-612f-4398-87e1-07179ff75f62 f670b5a18ea03a062d03b6ca6f41052eaa16bfebff5d2e... paul-graham-essay.txt 1 05f5a125-612f-4398-87e1-07179ff75f62 ea09a6b38c5e26510bfccee3e598f41128d1d62c1c44c7... paul-graham-essay.txt 2 05f5a125-612f-4398-87e1-07179ff75f62 51c5863f38ba057bfd708e00d84ef775b9d310a720615c... paul-graham-essay.txt 3 05f5a125-612f-4398-87e1-07179ff75f62 39d0d972087a0a27d1d78373a523e54b422ff1a09927e8... paul-graham-essay.txt 4 05f5a125-612f-4398-87e1-07179ff75f62 27016ad9d966c839714639240dab8d24659d0cfb80fbdc... paul-graham-essay.txt 5 05f5a125-612f-4398-87e1-07179ff75f62 b9e6206f6fd191db1529b9204072776dd57ea631a0de16... paul-graham-essay.txt 6 05f5a125-612f-4398-87e1-07179ff75f62 0840f760932d975914e4b7e7e664c68673b52077db88c3... paul-graham-essay.txt 7 05f5a125-612f-4398-87e1-07179ff75f62 e75cae1d3d75c3180e79b23fff57c163ee2e02653e0dc3... paul-graham-essay.txt 8 05f5a125-612f-4398-87e1-07179ff75f62 60f93919033099369f277d230e6c8e5167c599aa0616b9... paul-graham-essay.txt 9 05f5a125-612f-4398-87e1-07179ff75f62 f564c2c3268d56432b2ab94b2b2ed6d65060451418e510... paul-graham-essay.txt 10 05f5a125-612f-4398-87e1-07179ff75f62 c389b1ad61a8c1fbd5a396679a7e1661aabcb6e323ef4f... paul-graham-essay.txt 11 05f5a125-612f-4398-87e1-07179ff75f62 8e897d50fbf2c6e0dd117d22428ec63fa43a55ccc7dd8a... paul-graham-essay.txt 12 05f5a125-612f-4398-87e1-07179ff75f62 039515cdd3a336166767ce31fb3e71fad518f28a8924af... paul-graham-essay.txt 13 05f5a125-612f-4398-87e1-07179ff75f62 20fc5f0a9f5e2597faea5e3aae6cd72a7cb20e1ff45aa5... paul-graham-essay.txt 14 05f5a125-612f-4398-87e1-07179ff75f62 b0dea2603a0d95b528d1c70e954c45a670d43ad7abcd72... paul-graham-essay.txt 15 05f5a125-612f-4398-87e1-07179ff75f62 137d977c2f2db8de725f8c0cc4a373fb9fc354ad934441... paul-graham-essay.txt 16 05f5a125-612f-4398-87e1-07179ff75f62 66064e0d4d6d3c79052410187680600adba09d4fa0dbd4... paul-graham-essay.txt 17 05f5a125-612f-4398-87e1-07179ff75f62 1d9fdad2ba19763eb58380eac190d5839f288d6c7a98d1... paul-graham-essay.txt <ul> <li>To delete a document from the storage, we can use the <code>delete_document</code> method, which takes the <code>doc_id</code> as input. and deletes the document and its nodes.</li> </ul> In\u00a0[21]: Copied! <pre>doc_id = document_metadata.loc[0, \"doc_id\"]\nstorage.delete_document(doc_id)\n</pre> doc_id = document_metadata.loc[0, \"doc_id\"] storage.delete_document(doc_id) <ul> <li>As you see the document is deleted from the storage. and if we check the <code>document_metadata</code> we will see that the deleted document is not there. and also the nodes related to the document are deleted.</li> </ul> In\u00a0[22]: Copied! <pre>storage.document_metadata()\n</pre> storage.document_metadata() Out[22]: <pre>{}</pre> In\u00a0[23]: Copied! <pre>storage.node_id_list()\n</pre> storage.node_id_list() Out[23]: <pre>[]</pre> <ul> <li>We will add the document again to the storage.</li> </ul> In\u00a0[24]: Copied! <pre># NBVAL_IGNORE_OUTPUT\nstorage.add_documents(documents)\nstorage.document_metadata(as_dataframe=True)\n</pre> # NBVAL_IGNORE_OUTPUT storage.add_documents(documents) storage.document_metadata(as_dataframe=True) Out[24]: doc_id node_id file_name 0 05f5a125-612f-4398-87e1-07179ff75f62 c3c1026486ce099d6e2009463d6aa28e5ed2de38aa104f... paul-graham-essay.txt 1 05f5a125-612f-4398-87e1-07179ff75f62 f670b5a18ea03a062d03b6ca6f41052eaa16bfebff5d2e... paul-graham-essay.txt 2 05f5a125-612f-4398-87e1-07179ff75f62 ea09a6b38c5e26510bfccee3e598f41128d1d62c1c44c7... paul-graham-essay.txt 3 05f5a125-612f-4398-87e1-07179ff75f62 51c5863f38ba057bfd708e00d84ef775b9d310a720615c... paul-graham-essay.txt 4 05f5a125-612f-4398-87e1-07179ff75f62 39d0d972087a0a27d1d78373a523e54b422ff1a09927e8... paul-graham-essay.txt 5 05f5a125-612f-4398-87e1-07179ff75f62 27016ad9d966c839714639240dab8d24659d0cfb80fbdc... paul-graham-essay.txt 6 05f5a125-612f-4398-87e1-07179ff75f62 b9e6206f6fd191db1529b9204072776dd57ea631a0de16... paul-graham-essay.txt 7 05f5a125-612f-4398-87e1-07179ff75f62 0840f760932d975914e4b7e7e664c68673b52077db88c3... paul-graham-essay.txt 8 05f5a125-612f-4398-87e1-07179ff75f62 e75cae1d3d75c3180e79b23fff57c163ee2e02653e0dc3... paul-graham-essay.txt 9 05f5a125-612f-4398-87e1-07179ff75f62 60f93919033099369f277d230e6c8e5167c599aa0616b9... paul-graham-essay.txt 10 05f5a125-612f-4398-87e1-07179ff75f62 f564c2c3268d56432b2ab94b2b2ed6d65060451418e510... paul-graham-essay.txt 11 05f5a125-612f-4398-87e1-07179ff75f62 c389b1ad61a8c1fbd5a396679a7e1661aabcb6e323ef4f... paul-graham-essay.txt 12 05f5a125-612f-4398-87e1-07179ff75f62 8e897d50fbf2c6e0dd117d22428ec63fa43a55ccc7dd8a... paul-graham-essay.txt 13 05f5a125-612f-4398-87e1-07179ff75f62 039515cdd3a336166767ce31fb3e71fad518f28a8924af... paul-graham-essay.txt 14 05f5a125-612f-4398-87e1-07179ff75f62 20fc5f0a9f5e2597faea5e3aae6cd72a7cb20e1ff45aa5... paul-graham-essay.txt 15 05f5a125-612f-4398-87e1-07179ff75f62 b0dea2603a0d95b528d1c70e954c45a670d43ad7abcd72... paul-graham-essay.txt 16 05f5a125-612f-4398-87e1-07179ff75f62 137d977c2f2db8de725f8c0cc4a373fb9fc354ad934441... paul-graham-essay.txt 17 05f5a125-612f-4398-87e1-07179ff75f62 66064e0d4d6d3c79052410187680600adba09d4fa0dbd4... paul-graham-essay.txt 18 05f5a125-612f-4398-87e1-07179ff75f62 1d9fdad2ba19763eb58380eac190d5839f288d6c7a98d1... paul-graham-essay.txt In\u00a0[25]: Copied! <pre># NBVAL_IGNORE_OUTPUT\ndocstore = storage.docstore\nprint(f\"Number of Documents:{len(docstore.docs)}\")\nprint(docstore.docs)\n</pre> # NBVAL_IGNORE_OUTPUT docstore = storage.docstore print(f\"Number of Documents:{len(docstore.docs)}\") print(docstore.docs) <pre>Number of Documents:19\n{'c3c1026486ce099d6e2009463d6aa28e5ed2de38aa104fc0d62fdc51f07defe8': TextNode(id_='c3c1026486ce099d6e2009463d6aa28e5ed2de38aa104fc0d62fdc51f07defe8', embedding=None, metadata={'file_path': '..\\\\..\\\\..\\\\examples\\\\data\\\\essay\\\\paul-graham-essay.txt', 'file_name': 'paul-graham-essay.txt', 'file_type': 'text/plain', 'file_size': 75395, 'creation_date': '2024-10-25', 'last_modified_date': '2024-09-16', 'content-hash': 'c3c1026486ce099d6e2009463d6aa28e5ed2de38aa104fc0d62fdc51f07defe8'}, excluded_embed_metadata_keys=['file_name'], excluded_llm_metadata_keys=['file_name'], relationships={&lt;NodeRelationship.SOURCE: '1'&gt;: RelatedNodeInfo(node_id='05f5a125-612f-4398-87e1-07179ff75f62', node_type='4', metadata={'file_path': '..\\\\..\\\\..\\\\examples\\\\data\\\\essay\\\\paul-graham-essay.txt', 'file_name': 'paul-graham-essay.txt', 'file_type': 'text/plain', 'file_size': 75395, 'creation_date': '2024-10-25', 'last_modified_date': '2024-09-16'}, hash='b782bb2fb6802c1f0d21b68ab4fda7b88c64a6ebeaf5c06f1eb297ca11e14b9c'), &lt;NodeRelationship.NEXT: '3'&gt;: RelatedNodeInfo(node_id='2d802509-e5a9-4b33-8c57-a3ad5add40d4', node_type='1', metadata={}, hash='67368249c5f907977b130e3cca9acdc389d53cba7d3ba0381402bddaa05d1d39')}, metadata_template='{key}: {value}', metadata_separator='\\n', text='What I Worked On\\r\\n\\r\\nFebruary 2021\\r\\n\\r\\nBefore college the two main things I worked on, outside of school, were writing and programming. I didn\\'t write essays. I wrote what beginning writers were supposed to write then, and probably still are: short stories. My stories were awful. They had hardly any plot, just characters with strong feelings, which I imagined made them deep.\\r\\n\\r\\nThe first programs I tried writing were on the IBM 1401 that our school district used for what was then called \"data processing.\" This was in 9th grade, so I was 13 or 14. The school district\\'s 1401 happened to be in the basement of our junior high school, and my friend Rich Draves and I got permission to use it. It was like a mini Bond villain\\'s lair down there, with all these alien-looking machines \u2014 CPU, disk drives, printer, card reader \u2014 sitting up on a raised floor under bright fluorescent lights.\\r\\n\\r\\nThe language we used was an early version of Fortran. You had to type programs on punch cards, then stack them in the card reader and press a button to load the program into memory and run it. The result would ordinarily be to print something on the spectacularly loud printer.\\r\\n\\r\\nI was puzzled by the 1401. I couldn\\'t figure out what to do with it. And in retrospect there\\'s not much I could have done with it. The only form of input to programs was data stored on punched cards, and I didn\\'t have any data stored on punched cards. The only other option was to do things that didn\\'t rely on any input, like calculate approximations of pi, but I didn\\'t know enough math to do anything interesting of that type. So I\\'m not surprised I can\\'t remember any programs I wrote, because they can\\'t have done much. My clearest memory is of the moment I learned it was possible for programs not to terminate, when one of mine didn\\'t. On a machine without time-sharing, this was a social as well as a technical error, as the data center manager\\'s expression made clear.\\r\\n\\r\\nWith microcomputers, everything changed. Now you could have a computer sitting right in front of you, on a desk, that could respond to your keystrokes as it was running instead of just churning through a stack of punch cards and then stopping. [1]\\r\\n\\r\\nThe first of my friends to get a microcomputer built it himself. It was sold as a kit by Heathkit. I remember vividly how impressed and envious I felt watching him sitting in front of it, typing programs right into the computer.\\r\\n\\r\\nComputers were expensive in those days and it took me years of nagging before I convinced my father to buy one, a TRS-80, in about 1980. The gold standard then was the Apple II, but a TRS-80 was good enough. This was when I really started programming. I wrote simple games, a program to predict how high my model rockets would fly, and a word processor that my father used to write at least one book. There was only room in memory for about 2 pages of text, so he\\'d write 2 pages at a time and then print them out, but it was a lot better than a typewriter.\\r\\n\\r\\nThough I liked programming, I didn\\'t plan to study it in college. In college I was going to study philosophy, which sounded much more powerful. It seemed, to my naive high school self, to be the study of the ultimate truths, compared to which the things studied in other fields would be mere domain knowledge. What I discovered when I got to college was that the other fields took up so much of the space of ideas that there wasn\\'t much left for these supposed ultimate truths. All that seemed left for philosophy were edge cases that people in other fields felt could safely be ignored.\\r\\n\\r\\nI couldn\\'t have put this into words when I was 18. All I knew at the time was that I kept taking philosophy courses and they kept being boring. So I decided to switch to AI.\\r\\n\\r\\nAI was in the air in the mid 1980s, but there were two things especially that made me want to work on it: a novel by Heinlein called The Moon is a Harsh Mistress, which featured an intelligent computer called Mike, and a PBS documentary that showed Terry Winograd using SHRDLU. I haven\\'t tried rereading The Moon is a Harsh Mistress, so I don\\'t know how well it has aged, but when I read it I was drawn entirely into its world. It seemed only a matter of time before we\\'d have Mike, and when I saw Winograd using SHRDLU, it seemed like that time would be a few years at most.', mimetype='text/plain', start_char_idx=0, end_char_idx=4340, metadata_seperator='\\n', text_template='{metadata_str}\\n\\n{content}'), 'f670b5a18ea03a062d03b6ca6f41052eaa16bfebff5d2ed3e244c691a22f6550': TextNode(id_='f670b5a18ea03a062d03b6ca6f41052eaa16bfebff5d2ed3e244c691a22f6550', embedding=None, metadata={'file_path': '..\\\\..\\\\..\\\\examples\\\\data\\\\essay\\\\paul-graham-essay.txt', 'file_name': 'paul-graham-essay.txt', 'file_type': 'text/plain', 'file_size': 75395, 'creation_date': '2024-10-25', 'last_modified_date': '2024-09-16', 'content-hash': 'f670b5a18ea03a062d03b6ca6f41052eaa16bfebff5d2ed3e244c691a22f6550'}, excluded_embed_metadata_keys=['file_name'], excluded_llm_metadata_keys=['file_name'], relationships={&lt;NodeRelationship.SOURCE: '1'&gt;: RelatedNodeInfo(node_id='05f5a125-612f-4398-87e1-07179ff75f62', node_type='4', metadata={'file_path': '..\\\\..\\\\..\\\\examples\\\\data\\\\essay\\\\paul-graham-essay.txt', 'file_name': 'paul-graham-essay.txt', 'file_type': 'text/plain', 'file_size': 75395, 'creation_date': '2024-10-25', 'last_modified_date': '2024-09-16'}, hash='b782bb2fb6802c1f0d21b68ab4fda7b88c64a6ebeaf5c06f1eb297ca11e14b9c'), &lt;NodeRelationship.PREVIOUS: '2'&gt;: RelatedNodeInfo(node_id='1cfa95e5-8663-466e-91aa-5276a669f773', node_type='1', metadata={'file_path': '..\\\\..\\\\..\\\\examples\\\\data\\\\essay\\\\paul-graham-essay.txt', 'file_name': 'paul-graham-essay.txt', 'file_type': 'text/plain', 'file_size': 75395, 'creation_date': '2024-10-25', 'last_modified_date': '2024-09-16'}, hash='35dced5cbad89c075d461ca0bdcc642a40641691e853a83632a3540a1446b5fc'), &lt;NodeRelationship.NEXT: '3'&gt;: RelatedNodeInfo(node_id='ab07f313-1024-44fd-a2b2-f2b351ba2029', node_type='1', metadata={}, hash='47a2a5de64b8e5f8cb4d0f35aecd225713c7dc0666b86f6944527a36618c3c10')}, metadata_template='{key}: {value}', metadata_separator='\\n', text='I haven\\'t tried rereading The Moon is a Harsh Mistress, so I don\\'t know how well it has aged, but when I read it I was drawn entirely into its world. It seemed only a matter of time before we\\'d have Mike, and when I saw Winograd using SHRDLU, it seemed like that time would be a few years at most. All you had to do was teach SHRDLU more words.\\r\\n\\r\\nThere weren\\'t any classes in AI at Cornell then, not even graduate classes, so I started trying to teach myself. Which meant learning Lisp, since in those days Lisp was regarded as the language of AI. The commonly used programming languages then were pretty primitive, and programmers\\' ideas correspondingly so. The default language at Cornell was a Pascal-like language called PL/I, and the situation was similar elsewhere. Learning Lisp expanded my concept of a program so fast that it was years before I started to have a sense of where the new limits were. This was more like it; this was what I had expected college to do. It wasn\\'t happening in a class, like it was supposed to, but that was ok. For the next couple years I was on a roll. I knew what I was going to do.\\r\\n\\r\\nFor my undergraduate thesis, I reverse-engineered SHRDLU. My God did I love working on that program. It was a pleasing bit of code, but what made it even more exciting was my belief \u2014 hard to imagine now, but not unique in 1985 \u2014 that it was already climbing the lower slopes of intelligence.\\r\\n\\r\\nI had gotten into a program at Cornell that didn\\'t make you choose a major. You could take whatever classes you liked, and choose whatever you liked to put on your degree. I of course chose \"Artificial Intelligence.\" When I got the actual physical diploma, I was dismayed to find that the quotes had been included, which made them read as scare-quotes. At the time this bothered me, but now it seems amusingly accurate, for reasons I was about to discover.\\r\\n\\r\\nI applied to 3 grad schools: MIT and Yale, which were renowned for AI at the time, and Harvard, which I\\'d visited because Rich Draves went there, and was also home to Bill Woods, who\\'d invented the type of parser I used in my SHRDLU clone. Only Harvard accepted me, so that was where I went.\\r\\n\\r\\nI don\\'t remember the moment it happened, or if there even was a specific moment, but during the first year of grad school I realized that AI, as practiced at the time, was a hoax. By which I mean the sort of AI in which a program that\\'s told \"the dog is sitting on the chair\" translates this into some formal representation and adds it to the list of things it knows.\\r\\n\\r\\nWhat these programs really showed was that there\\'s a subset of natural language that\\'s a formal language. But a very proper subset. It was clear that there was an unbridgeable gap between what they could do and actually understanding natural language. It was not, in fact, simply a matter of teaching SHRDLU more words. That whole way of doing AI, with explicit data structures representing concepts, was not going to work. Its brokenness did, as so often happens, generate a lot of opportunities to write papers about various band-aids that could be applied to it, but it was never going to get us Mike.\\r\\n\\r\\nSo I looked around to see what I could salvage from the wreckage of my plans, and there was Lisp. I knew from experience that Lisp was interesting for its own sake and not just for its association with AI, even though that was the main reason people cared about it at the time. So I decided to focus on Lisp. In fact, I decided to write a book about Lisp hacking. It\\'s scary to think how little I knew about Lisp hacking when I started writing that book. But there\\'s nothing like writing a book about something to help you learn it. The book, On Lisp, wasn\\'t published till 1993, but I wrote much of it in grad school.\\r\\n\\r\\nComputer Science is an uneasy alliance between two halves, theory and systems. The theory people prove things, and the systems people build things. I wanted to build things. I had plenty of respect for theory \u2014 indeed, a sneaking suspicion that it was the more admirable of the two halves \u2014 but building things seemed so much more exciting.\\r\\n\\r\\nThe problem with systems work, though, was that it didn\\'t last. Any program you wrote today, no matter how good, would be obsolete in a couple decades at best. People might mention your software in footnotes, but no one would actually use it. And indeed, it would seem very feeble work.', mimetype='text/plain', start_char_idx=4043, end_char_idx=8452, metadata_seperator='\\n', text_template='{metadata_str}\\n\\n{content}'), 'ea09a6b38c5e26510bfccee3e598f41128d1d62c1c44c7fdd18e730269aebe21': TextNode(id_='ea09a6b38c5e26510bfccee3e598f41128d1d62c1c44c7fdd18e730269aebe21', embedding=None, metadata={'file_path': '..\\\\..\\\\..\\\\examples\\\\data\\\\essay\\\\paul-graham-essay.txt', 'file_name': 'paul-graham-essay.txt', 'file_type': 'text/plain', 'file_size': 75395, 'creation_date': '2024-10-25', 'last_modified_date': '2024-09-16', 'content-hash': 'ea09a6b38c5e26510bfccee3e598f41128d1d62c1c44c7fdd18e730269aebe21'}, excluded_embed_metadata_keys=['file_name'], excluded_llm_metadata_keys=['file_name'], relationships={&lt;NodeRelationship.SOURCE: '1'&gt;: RelatedNodeInfo(node_id='05f5a125-612f-4398-87e1-07179ff75f62', node_type='4', metadata={'file_path': '..\\\\..\\\\..\\\\examples\\\\data\\\\essay\\\\paul-graham-essay.txt', 'file_name': 'paul-graham-essay.txt', 'file_type': 'text/plain', 'file_size': 75395, 'creation_date': '2024-10-25', 'last_modified_date': '2024-09-16'}, hash='b782bb2fb6802c1f0d21b68ab4fda7b88c64a6ebeaf5c06f1eb297ca11e14b9c'), &lt;NodeRelationship.PREVIOUS: '2'&gt;: RelatedNodeInfo(node_id='2d802509-e5a9-4b33-8c57-a3ad5add40d4', node_type='1', metadata={'file_path': '..\\\\..\\\\..\\\\examples\\\\data\\\\essay\\\\paul-graham-essay.txt', 'file_name': 'paul-graham-essay.txt', 'file_type': 'text/plain', 'file_size': 75395, 'creation_date': '2024-10-25', 'last_modified_date': '2024-09-16'}, hash='c151b2b2e9c972e3be0763ccc497b2d1bec04bb8c6af1d2adedb8d5dada23a09'), &lt;NodeRelationship.NEXT: '3'&gt;: RelatedNodeInfo(node_id='85c64154-149d-4d48-9c04-17f87981a20d', node_type='1', metadata={}, hash='fe35d6edb6085662b2c49a472eee6848efe0daac235708b8998fa98906945b40')}, metadata_template='{key}: {value}', metadata_separator='\\n', text='The problem with systems work, though, was that it didn\\'t last. Any program you wrote today, no matter how good, would be obsolete in a couple decades at best. People might mention your software in footnotes, but no one would actually use it. And indeed, it would seem very feeble work. Only people with a sense of the history of the field would even realize that, in its time, it had been good.\\r\\n\\r\\nThere were some surplus Xerox Dandelions floating around the computer lab at one point. Anyone who wanted one to play around with could have one. I was briefly tempted, but they were so slow by present standards; what was the point? No one else wanted one either, so off they went. That was what happened to systems work.\\r\\n\\r\\nI wanted not just to build things, but to build things that would last.\\r\\n\\r\\nIn this dissatisfied state I went in 1988 to visit Rich Draves at CMU, where he was in grad school. One day I went to visit the Carnegie Institute, where I\\'d spent a lot of time as a kid. While looking at a painting there I realized something that might seem obvious, but was a big surprise to me. There, right on the wall, was something you could make that would last. Paintings didn\\'t become obsolete. Some of the best ones were hundreds of years old.\\r\\n\\r\\nAnd moreover this was something you could make a living doing. Not as easily as you could by writing software, of course, but I thought if you were really industrious and lived really cheaply, it had to be possible to make enough to survive. And as an artist you could be truly independent. You wouldn\\'t have a boss, or even need to get research funding.\\r\\n\\r\\nI had always liked looking at paintings. Could I make them? I had no idea. I\\'d never imagined it was even possible. I knew intellectually that people made art \u2014 that it didn\\'t just appear spontaneously \u2014 but it was as if the people who made it were a different species. They either lived long ago or were mysterious geniuses doing strange things in profiles in Life magazine. The idea of actually being able to make art, to put that verb before that noun, seemed almost miraculous.\\r\\n\\r\\nThat fall I started taking art classes at Harvard. Grad students could take classes in any department, and my advisor, Tom Cheatham, was very easy going. If he even knew about the strange classes I was taking, he never said anything.\\r\\n\\r\\nSo now I was in a PhD program in computer science, yet planning to be an artist, yet also genuinely in love with Lisp hacking and working away at On Lisp. In other words, like many a grad student, I was working energetically on multiple projects that were not my thesis.\\r\\n\\r\\nI didn\\'t see a way out of this situation. I didn\\'t want to drop out of grad school, but how else was I going to get out? I remember when my friend Robert Morris got kicked out of Cornell for writing the internet worm of 1988, I was envious that he\\'d found such a spectacular way to get out of grad school.\\r\\n\\r\\nThen one day in April 1990 a crack appeared in the wall. I ran into professor Cheatham and he asked if I was far enough along to graduate that June. I didn\\'t have a word of my dissertation written, but in what must have been the quickest bit of thinking in my life, I decided to take a shot at writing one in the 5 weeks or so that remained before the deadline, reusing parts of On Lisp where I could, and I was able to respond, with no perceptible delay \"Yes, I think so. I\\'ll give you something to read in a few days.\"\\r\\n\\r\\nI picked applications of continuations as the topic. In retrospect I should have written about macros and embedded languages. There\\'s a whole world there that\\'s barely been explored. But all I wanted was to get out of grad school, and my rapidly written dissertation sufficed, just barely.\\r\\n\\r\\nMeanwhile I was applying to art schools. I applied to two: RISD in the US, and the Accademia di Belli Arti in Florence, which, because it was the oldest art school, I imagined would be good. RISD accepted me, and I never heard back from the Accademia, so off to Providence I went.\\r\\n\\r\\nI\\'d applied for the BFA program at RISD, which meant in effect that I had to go to college again. This was not as strange as it sounds, because I was only 25, and art schools are full of people of different ages. RISD counted me as a transfer sophomore and said I had to do the foundation that summer.', mimetype='text/plain', start_char_idx=8166, end_char_idx=12487, metadata_seperator='\\n', text_template='{metadata_str}\\n\\n{content}'), '51c5863f38ba057bfd708e00d84ef775b9d310a720615c5dfab0301b8a7cac4c': TextNode(id_='51c5863f38ba057bfd708e00d84ef775b9d310a720615c5dfab0301b8a7cac4c', embedding=None, metadata={'file_path': '..\\\\..\\\\..\\\\examples\\\\data\\\\essay\\\\paul-graham-essay.txt', 'file_name': 'paul-graham-essay.txt', 'file_type': 'text/plain', 'file_size': 75395, 'creation_date': '2024-10-25', 'last_modified_date': '2024-09-16', 'content-hash': '51c5863f38ba057bfd708e00d84ef775b9d310a720615c5dfab0301b8a7cac4c'}, excluded_embed_metadata_keys=['file_name'], excluded_llm_metadata_keys=['file_name'], relationships={&lt;NodeRelationship.SOURCE: '1'&gt;: RelatedNodeInfo(node_id='05f5a125-612f-4398-87e1-07179ff75f62', node_type='4', metadata={'file_path': '..\\\\..\\\\..\\\\examples\\\\data\\\\essay\\\\paul-graham-essay.txt', 'file_name': 'paul-graham-essay.txt', 'file_type': 'text/plain', 'file_size': 75395, 'creation_date': '2024-10-25', 'last_modified_date': '2024-09-16'}, hash='b782bb2fb6802c1f0d21b68ab4fda7b88c64a6ebeaf5c06f1eb297ca11e14b9c'), &lt;NodeRelationship.PREVIOUS: '2'&gt;: RelatedNodeInfo(node_id='ab07f313-1024-44fd-a2b2-f2b351ba2029', node_type='1', metadata={'file_path': '..\\\\..\\\\..\\\\examples\\\\data\\\\essay\\\\paul-graham-essay.txt', 'file_name': 'paul-graham-essay.txt', 'file_type': 'text/plain', 'file_size': 75395, 'creation_date': '2024-10-25', 'last_modified_date': '2024-09-16'}, hash='acde997cb684eea75a8a94d500ffa4ecdc45e1e7932e2349d5329e2cf17dd4c9'), &lt;NodeRelationship.NEXT: '3'&gt;: RelatedNodeInfo(node_id='efa68ec6-2cca-41a1-9086-c91ec621387b', node_type='1', metadata={}, hash='4e186eebc04c7cf2d7df3f4e6ab60ff780c578c99482ea5c293d18734205501b')}, metadata_template='{key}: {value}', metadata_separator='\\n', text='RISD accepted me, and I never heard back from the Accademia, so off to Providence I went.\\r\\n\\r\\nI\\'d applied for the BFA program at RISD, which meant in effect that I had to go to college again. This was not as strange as it sounds, because I was only 25, and art schools are full of people of different ages. RISD counted me as a transfer sophomore and said I had to do the foundation that summer. The foundation means the classes that everyone has to take in fundamental subjects like drawing, color, and design.\\r\\n\\r\\nToward the end of the summer I got a big surprise: a letter from the Accademia, which had been delayed because they\\'d sent it to Cambridge England instead of Cambridge Massachusetts, inviting me to take the entrance exam in Florence that fall. This was now only weeks away. My nice landlady let me leave my stuff in her attic. I had some money saved from consulting work I\\'d done in grad school; there was probably enough to last a year if I lived cheaply. Now all I had to do was learn Italian.\\r\\n\\r\\nOnly stranieri (foreigners) had to take this entrance exam. In retrospect it may well have been a way of excluding them, because there were so many stranieri attracted by the idea of studying art in Florence that the Italian students would otherwise have been outnumbered. I was in decent shape at painting and drawing from the RISD foundation that summer, but I still don\\'t know how I managed to pass the written exam. I remember that I answered the essay question by writing about Cezanne, and that I cranked up the intellectual level as high as I could to make the most of my limited vocabulary. [2]\\r\\n\\r\\nI\\'m only up to age 25 and already there are such conspicuous patterns. Here I was, yet again about to attend some august institution in the hopes of learning about some prestigious subject, and yet again about to be disappointed. The students and faculty in the painting department at the Accademia were the nicest people you could imagine, but they had long since arrived at an arrangement whereby the students wouldn\\'t require the faculty to teach anything, and in return the faculty wouldn\\'t require the students to learn anything. And at the same time all involved would adhere outwardly to the conventions of a 19th century atelier. We actually had one of those little stoves, fed with kindling, that you see in 19th century studio paintings, and a nude model sitting as close to it as possible without getting burned. Except hardly anyone else painted her besides me. The rest of the students spent their time chatting or occasionally trying to imitate things they\\'d seen in American art magazines.\\r\\n\\r\\nOur model turned out to live just down the street from me. She made a living from a combination of modelling and making fakes for a local antique dealer. She\\'d copy an obscure old painting out of a book, and then he\\'d take the copy and maltreat it to make it look old. [3]\\r\\n\\r\\nWhile I was a student at the Accademia I started painting still lives in my bedroom at night. These paintings were tiny, because the room was, and because I painted them on leftover scraps of canvas, which was all I could afford at the time. Painting still lives is different from painting people, because the subject, as its name suggests, can\\'t move. People can\\'t sit for more than about 15 minutes at a time, and when they do they don\\'t sit very still. So the traditional m.o. for painting people is to know how to paint a generic person, which you then modify to match the specific person you\\'re painting. Whereas a still life you can, if you want, copy pixel by pixel from what you\\'re seeing. You don\\'t want to stop there, of course, or you get merely photographic accuracy, and what makes a still life interesting is that it\\'s been through a head. You want to emphasize the visual cues that tell you, for example, that the reason the color changes suddenly at a certain point is that it\\'s the edge of an object. By subtly emphasizing such things you can make paintings that are more realistic than photographs not just in some metaphorical sense, but in the strict information-theoretic sense. [4]\\r\\n\\r\\nI liked painting still lives because I was curious about what I was seeing. In everyday life, we aren\\'t consciously aware of much we\\'re seeing. Most visual perception is handled by low-level processes that merely tell your brain \"that\\'s a water droplet\" without telling you details like where the lightest and darkest points are, or \"that\\'s a bush\" without telling you the shape and position of every leaf.', mimetype='text/plain', start_char_idx=12093, end_char_idx=16609, metadata_seperator='\\n', text_template='{metadata_str}\\n\\n{content}'), '39d0d972087a0a27d1d78373a523e54b422ff1a09927e806a1f8e79c3e0d21b0': TextNode(id_='39d0d972087a0a27d1d78373a523e54b422ff1a09927e806a1f8e79c3e0d21b0', embedding=None, metadata={'file_path': '..\\\\..\\\\..\\\\examples\\\\data\\\\essay\\\\paul-graham-essay.txt', 'file_name': 'paul-graham-essay.txt', 'file_type': 'text/plain', 'file_size': 75395, 'creation_date': '2024-10-25', 'last_modified_date': '2024-09-16', 'content-hash': '39d0d972087a0a27d1d78373a523e54b422ff1a09927e806a1f8e79c3e0d21b0'}, excluded_embed_metadata_keys=['file_name'], excluded_llm_metadata_keys=['file_name'], relationships={&lt;NodeRelationship.SOURCE: '1'&gt;: RelatedNodeInfo(node_id='05f5a125-612f-4398-87e1-07179ff75f62', node_type='4', metadata={'file_path': '..\\\\..\\\\..\\\\examples\\\\data\\\\essay\\\\paul-graham-essay.txt', 'file_name': 'paul-graham-essay.txt', 'file_type': 'text/plain', 'file_size': 75395, 'creation_date': '2024-10-25', 'last_modified_date': '2024-09-16'}, hash='b782bb2fb6802c1f0d21b68ab4fda7b88c64a6ebeaf5c06f1eb297ca11e14b9c'), &lt;NodeRelationship.PREVIOUS: '2'&gt;: RelatedNodeInfo(node_id='85c64154-149d-4d48-9c04-17f87981a20d', node_type='1', metadata={'file_path': '..\\\\..\\\\..\\\\examples\\\\data\\\\essay\\\\paul-graham-essay.txt', 'file_name': 'paul-graham-essay.txt', 'file_type': 'text/plain', 'file_size': 75395, 'creation_date': '2024-10-25', 'last_modified_date': '2024-09-16'}, hash='f307e317b8be60fa6c5e1905a5cbc83d130ab37cb06d267e44b83e2987d28bb4'), &lt;NodeRelationship.NEXT: '3'&gt;: RelatedNodeInfo(node_id='4efdb4b0-4b4a-4344-a1d5-992ab7f55f0e', node_type='1', metadata={}, hash='a9f5112abd53f9fabe2af8052d535efba706864aaf6eb7a97be6516d7336c35d')}, metadata_template='{key}: {value}', metadata_separator='\\n', text='[4]\\r\\n\\r\\nI liked painting still lives because I was curious about what I was seeing. In everyday life, we aren\\'t consciously aware of much we\\'re seeing. Most visual perception is handled by low-level processes that merely tell your brain \"that\\'s a water droplet\" without telling you details like where the lightest and darkest points are, or \"that\\'s a bush\" without telling you the shape and position of every leaf. This is a feature of brains, not a bug. In everyday life it would be distracting to notice every leaf on every bush. But when you have to paint something, you have to look more closely, and when you do there\\'s a lot to see. You can still be noticing new things after days of trying to paint something people usually take for granted, just as you can after days of trying to write an essay about something people usually take for granted.\\r\\n\\r\\nThis is not the only way to paint. I\\'m not 100% sure it\\'s even a good way to paint. But it seemed a good enough bet to be worth trying.\\r\\n\\r\\nOur teacher, professor Ulivi, was a nice guy. He could see I worked hard, and gave me a good grade, which he wrote down in a sort of passport each student had. But the Accademia wasn\\'t teaching me anything except Italian, and my money was running out, so at the end of the first year I went back to the US.\\r\\n\\r\\nI wanted to go back to RISD, but I was now broke and RISD was very expensive, so I decided to get a job for a year and then return to RISD the next fall. I got one at a company called Interleaf, which made software for creating documents. You mean like Microsoft Word? Exactly. That was how I learned that low end software tends to eat high end software. But Interleaf still had a few years to live yet. [5]\\r\\n\\r\\nInterleaf had done something pretty bold. Inspired by Emacs, they\\'d added a scripting language, and even made the scripting language a dialect of Lisp. Now they wanted a Lisp hacker to write things in it. This was the closest thing I\\'ve had to a normal job, and I hereby apologize to my boss and coworkers, because I was a bad employee. Their Lisp was the thinnest icing on a giant C cake, and since I didn\\'t know C and didn\\'t want to learn it, I never understood most of the software. Plus I was terribly irresponsible. This was back when a programming job meant showing up every day during certain working hours. That seemed unnatural to me, and on this point the rest of the world is coming around to my way of thinking, but at the time it caused a lot of friction. Toward the end of the year I spent much of my time surreptitiously working on On Lisp, which I had by this time gotten a contract to publish.\\r\\n\\r\\nThe good part was that I got paid huge amounts of money, especially by art student standards. In Florence, after paying my part of the rent, my budget for everything else had been $7 a day. Now I was getting paid more than 4 times that every hour, even when I was just sitting in a meeting. By living cheaply I not only managed to save enough to go back to RISD, but also paid off my college loans.\\r\\n\\r\\nI learned some useful things at Interleaf, though they were mostly about what not to do. I learned that it\\'s better for technology companies to be run by product people than sales people (though sales is a real skill and people who are good at it are really good at it), that it leads to bugs when code is edited by too many people, that cheap office space is no bargain if it\\'s depressing, that planned meetings are inferior to corridor conversations, that big, bureaucratic customers are a dangerous source of money, and that there\\'s not much overlap between conventional office hours and the optimal time for hacking, or conventional offices and the optimal place for it.\\r\\n\\r\\nBut the most important thing I learned, and which I used in both Viaweb and Y Combinator, is that the low end eats the high end: that it\\'s good to be the \"entry level\" option, even though that will be less prestigious, because if you\\'re not, someone else will be, and will squash you against the ceiling. Which in turn means that prestige is a danger sign.\\r\\n\\r\\nWhen I left to go back to RISD the next fall, I arranged to do freelance work for the group that did projects for customers, and this was how I survived for the next several years.', mimetype='text/plain', start_char_idx=16196, end_char_idx=20445, metadata_seperator='\\n', text_template='{metadata_str}\\n\\n{content}'), '27016ad9d966c839714639240dab8d24659d0cfb80fbdcb4af80a0e81b3d894c': TextNode(id_='27016ad9d966c839714639240dab8d24659d0cfb80fbdcb4af80a0e81b3d894c', embedding=None, metadata={'file_path': '..\\\\..\\\\..\\\\examples\\\\data\\\\essay\\\\paul-graham-essay.txt', 'file_name': 'paul-graham-essay.txt', 'file_type': 'text/plain', 'file_size': 75395, 'creation_date': '2024-10-25', 'last_modified_date': '2024-09-16', 'content-hash': '27016ad9d966c839714639240dab8d24659d0cfb80fbdcb4af80a0e81b3d894c'}, excluded_embed_metadata_keys=['file_name'], excluded_llm_metadata_keys=['file_name'], relationships={&lt;NodeRelationship.SOURCE: '1'&gt;: RelatedNodeInfo(node_id='05f5a125-612f-4398-87e1-07179ff75f62', node_type='4', metadata={'file_path': '..\\\\..\\\\..\\\\examples\\\\data\\\\essay\\\\paul-graham-essay.txt', 'file_name': 'paul-graham-essay.txt', 'file_type': 'text/plain', 'file_size': 75395, 'creation_date': '2024-10-25', 'last_modified_date': '2024-09-16'}, hash='b782bb2fb6802c1f0d21b68ab4fda7b88c64a6ebeaf5c06f1eb297ca11e14b9c'), &lt;NodeRelationship.PREVIOUS: '2'&gt;: RelatedNodeInfo(node_id='efa68ec6-2cca-41a1-9086-c91ec621387b', node_type='1', metadata={'file_path': '..\\\\..\\\\..\\\\examples\\\\data\\\\essay\\\\paul-graham-essay.txt', 'file_name': 'paul-graham-essay.txt', 'file_type': 'text/plain', 'file_size': 75395, 'creation_date': '2024-10-25', 'last_modified_date': '2024-09-16'}, hash='6468670277aaf7ad98c04a25c8b660404f040d38ce15d37599eca61e92db64f7'), &lt;NodeRelationship.NEXT: '3'&gt;: RelatedNodeInfo(node_id='d9c1eabb-35b0-4c0e-a9f1-63cfeddd60f3', node_type='1', metadata={}, hash='1bb5c5aef4b07a0cb1c5a62f29862e7b979eab72664f60ffb136ead8b5ad7ad6')}, metadata_template='{key}: {value}', metadata_separator='\\n', text='Which in turn means that prestige is a danger sign.\\r\\n\\r\\nWhen I left to go back to RISD the next fall, I arranged to do freelance work for the group that did projects for customers, and this was how I survived for the next several years. When I came back to visit for a project later on, someone told me about a new thing called HTML, which was, as he described it, a derivative of SGML. Markup language enthusiasts were an occupational hazard at Interleaf and I ignored him, but this HTML thing later became a big part of my life.\\r\\n\\r\\nIn the fall of 1992 I moved back to Providence to continue at RISD. The foundation had merely been intro stuff, and the Accademia had been a (very civilized) joke. Now I was going to see what real art school was like. But alas it was more like the Accademia than not. Better organized, certainly, and a lot more expensive, but it was now becoming clear that art school did not bear the same relationship to art that medical school bore to medicine. At least not the painting department. The textile department, which my next door neighbor belonged to, seemed to be pretty rigorous. No doubt illustration and architecture were too. But painting was post-rigorous. Painting students were supposed to express themselves, which to the more worldly ones meant to try to cook up some sort of distinctive signature style.\\r\\n\\r\\nA signature style is the visual equivalent of what in show business is known as a \"schtick\": something that immediately identifies the work as yours and no one else\\'s. For example, when you see a painting that looks like a certain kind of cartoon, you know it\\'s by Roy Lichtenstein. So if you see a big painting of this type hanging in the apartment of a hedge fund manager, you know he paid millions of dollars for it. That\\'s not always why artists have a signature style, but it\\'s usually why buyers pay a lot for such work. [6]\\r\\n\\r\\nThere were plenty of earnest students too: kids who \"could draw\" in high school, and now had come to what was supposed to be the best art school in the country, to learn to draw even better. They tended to be confused and demoralized by what they found at RISD, but they kept going, because painting was what they did. I was not one of the kids who could draw in high school, but at RISD I was definitely closer to their tribe than the tribe of signature style seekers.\\r\\n\\r\\nI learned a lot in the color class I took at RISD, but otherwise I was basically teaching myself to paint, and I could do that for free. So in 1993 I dropped out. I hung around Providence for a bit, and then my college friend Nancy Parmet did me a big favor. A rent-controlled apartment in a building her mother owned in New York was becoming vacant. Did I want it? It wasn\\'t much more than my current place, and New York was supposed to be where the artists were. So yes, I wanted it! [7]\\r\\n\\r\\nAsterix comics begin by zooming in on a tiny corner of Roman Gaul that turns out not to be controlled by the Romans. You can do something similar on a map of New York City: if you zoom in on the Upper East Side, there\\'s a tiny corner that\\'s not rich, or at least wasn\\'t in 1993. It\\'s called Yorkville, and that was my new home. Now I was a New York artist \u2014 in the strictly technical sense of making paintings and living in New York.\\r\\n\\r\\nI was nervous about money, because I could sense that Interleaf was on the way down. Freelance Lisp hacking work was very rare, and I didn\\'t want to have to program in another language, which in those days would have meant C++ if I was lucky. So with my unerring nose for financial opportunity, I decided to write another book on Lisp. This would be a popular book, the sort of book that could be used as a textbook. I imagined myself living frugally off the royalties and spending all my time painting. (The painting on the cover of this book, ANSI Common Lisp, is one that I painted around this time.)\\r\\n\\r\\nThe best thing about New York for me was the presence of Idelle and Julian Weber. Idelle Weber was a painter, one of the early photorealists, and I\\'d taken her painting class at Harvard. I\\'ve never known a teacher more beloved by her students. Large numbers of former students kept in touch with her, including me. After I moved to New York I became her de facto studio assistant.', mimetype='text/plain', start_char_idx=20210, end_char_idx=24485, metadata_seperator='\\n', text_template='{metadata_str}\\n\\n{content}'), 'b9e6206f6fd191db1529b9204072776dd57ea631a0de162019b6f4e308a3e1b4': TextNode(id_='b9e6206f6fd191db1529b9204072776dd57ea631a0de162019b6f4e308a3e1b4', embedding=None, metadata={'file_path': '..\\\\..\\\\..\\\\examples\\\\data\\\\essay\\\\paul-graham-essay.txt', 'file_name': 'paul-graham-essay.txt', 'file_type': 'text/plain', 'file_size': 75395, 'creation_date': '2024-10-25', 'last_modified_date': '2024-09-16', 'content-hash': 'b9e6206f6fd191db1529b9204072776dd57ea631a0de162019b6f4e308a3e1b4'}, excluded_embed_metadata_keys=['file_name'], excluded_llm_metadata_keys=['file_name'], relationships={&lt;NodeRelationship.SOURCE: '1'&gt;: RelatedNodeInfo(node_id='05f5a125-612f-4398-87e1-07179ff75f62', node_type='4', metadata={'file_path': '..\\\\..\\\\..\\\\examples\\\\data\\\\essay\\\\paul-graham-essay.txt', 'file_name': 'paul-graham-essay.txt', 'file_type': 'text/plain', 'file_size': 75395, 'creation_date': '2024-10-25', 'last_modified_date': '2024-09-16'}, hash='b782bb2fb6802c1f0d21b68ab4fda7b88c64a6ebeaf5c06f1eb297ca11e14b9c'), &lt;NodeRelationship.PREVIOUS: '2'&gt;: RelatedNodeInfo(node_id='4efdb4b0-4b4a-4344-a1d5-992ab7f55f0e', node_type='1', metadata={'file_path': '..\\\\..\\\\..\\\\examples\\\\data\\\\essay\\\\paul-graham-essay.txt', 'file_name': 'paul-graham-essay.txt', 'file_type': 'text/plain', 'file_size': 75395, 'creation_date': '2024-10-25', 'last_modified_date': '2024-09-16'}, hash='5f5b77d523fef5568a042d5e84dd5e48c9cb080df251be4efe44a78662b22956'), &lt;NodeRelationship.NEXT: '3'&gt;: RelatedNodeInfo(node_id='a3d8faa7-8234-4533-acf3-b665ddc9cf7b', node_type='1', metadata={}, hash='7bf528231d94690840d8508caa53e1ed0e499f1f0bdcfd6560a67d3368e37f94')}, metadata_template='{key}: {value}', metadata_separator='\\n', text='The best thing about New York for me was the presence of Idelle and Julian Weber. Idelle Weber was a painter, one of the early photorealists, and I\\'d taken her painting class at Harvard. I\\'ve never known a teacher more beloved by her students. Large numbers of former students kept in touch with her, including me. After I moved to New York I became her de facto studio assistant.\\r\\n\\r\\nShe liked to paint on big, square canvases, 4 to 5 feet on a side. One day in late 1994 as I was stretching one of these monsters there was something on the radio about a famous fund manager. He wasn\\'t that much older than me, and was super rich. The thought suddenly occurred to me: why don\\'t I become rich? Then I\\'ll be able to work on whatever I want.\\r\\n\\r\\nMeanwhile I\\'d been hearing more and more about this new thing called the World Wide Web. Robert Morris showed it to me when I visited him in Cambridge, where he was now in grad school at Harvard. It seemed to me that the web would be a big deal. I\\'d seen what graphical user interfaces had done for the popularity of microcomputers. It seemed like the web would do the same for the internet.\\r\\n\\r\\nIf I wanted to get rich, here was the next train leaving the station. I was right about that part. What I got wrong was the idea. I decided we should start a company to put art galleries online. I can\\'t honestly say, after reading so many Y Combinator applications, that this was the worst startup idea ever, but it was up there. Art galleries didn\\'t want to be online, and still don\\'t, not the fancy ones. That\\'s not how they sell. I wrote some software to generate web sites for galleries, and Robert wrote some to resize images and set up an http server to serve the pages. Then we tried to sign up galleries. To call this a difficult sale would be an understatement. It was difficult to give away. A few galleries let us make sites for them for free, but none paid us.\\r\\n\\r\\nThen some online stores started to appear, and I realized that except for the order buttons they were identical to the sites we\\'d been generating for galleries. This impressive-sounding thing called an \"internet storefront\" was something we already knew how to build.\\r\\n\\r\\nSo in the summer of 1995, after I submitted the camera-ready copy of ANSI Common Lisp to the publishers, we started trying to write software to build online stores. At first this was going to be normal desktop software, which in those days meant Windows software. That was an alarming prospect, because neither of us knew how to write Windows software or wanted to learn. We lived in the Unix world. But we decided we\\'d at least try writing a prototype store builder on Unix. Robert wrote a shopping cart, and I wrote a new site generator for stores \u2014 in Lisp, of course.\\r\\n\\r\\nWe were working out of Robert\\'s apartment in Cambridge. His roommate was away for big chunks of time, during which I got to sleep in his room. For some reason there was no bed frame or sheets, just a mattress on the floor. One morning as I was lying on this mattress I had an idea that made me sit up like a capital L. What if we ran the software on the server, and let users control it by clicking on links? Then we\\'d never have to write anything to run on users\\' computers. We could generate the sites on the same server we\\'d serve them from. Users wouldn\\'t need anything more than a browser.\\r\\n\\r\\nThis kind of software, known as a web app, is common now, but at the time it wasn\\'t clear that it was even possible. To find out, we decided to try making a version of our store builder that you could control through the browser. A couple days later, on August 12, we had one that worked. The UI was horrible, but it proved you could build a whole store through the browser, without any client software or typing anything into the command line on the server.\\r\\n\\r\\nNow we felt like we were really onto something. I had visions of a whole new generation of software working this way. You wouldn\\'t need versions, or ports, or any of that crap. At Interleaf there had been a whole group called Release Engineering that seemed to be at least as big as the group that actually wrote the software. Now you could just update the software right on the server.\\r\\n\\r\\nWe started a new company we called Viaweb, after the fact that our software worked via the web, and we got $10,000 in seed funding from Idelle\\'s husband Julian.', mimetype='text/plain', start_char_idx=24105, end_char_idx=28474, metadata_seperator='\\n', text_template='{metadata_str}\\n\\n{content}'), '0840f760932d975914e4b7e7e664c68673b52077db88c34c338378a9e7f0b630': TextNode(id_='0840f760932d975914e4b7e7e664c68673b52077db88c34c338378a9e7f0b630', embedding=None, metadata={'file_path': '..\\\\..\\\\..\\\\examples\\\\data\\\\essay\\\\paul-graham-essay.txt', 'file_name': 'paul-graham-essay.txt', 'file_type': 'text/plain', 'file_size': 75395, 'creation_date': '2024-10-25', 'last_modified_date': '2024-09-16', 'content-hash': '0840f760932d975914e4b7e7e664c68673b52077db88c34c338378a9e7f0b630'}, excluded_embed_metadata_keys=['file_name'], excluded_llm_metadata_keys=['file_name'], relationships={&lt;NodeRelationship.SOURCE: '1'&gt;: RelatedNodeInfo(node_id='05f5a125-612f-4398-87e1-07179ff75f62', node_type='4', metadata={'file_path': '..\\\\..\\\\..\\\\examples\\\\data\\\\essay\\\\paul-graham-essay.txt', 'file_name': 'paul-graham-essay.txt', 'file_type': 'text/plain', 'file_size': 75395, 'creation_date': '2024-10-25', 'last_modified_date': '2024-09-16'}, hash='b782bb2fb6802c1f0d21b68ab4fda7b88c64a6ebeaf5c06f1eb297ca11e14b9c'), &lt;NodeRelationship.PREVIOUS: '2'&gt;: RelatedNodeInfo(node_id='d9c1eabb-35b0-4c0e-a9f1-63cfeddd60f3', node_type='1', metadata={'file_path': '..\\\\..\\\\..\\\\examples\\\\data\\\\essay\\\\paul-graham-essay.txt', 'file_name': 'paul-graham-essay.txt', 'file_type': 'text/plain', 'file_size': 75395, 'creation_date': '2024-10-25', 'last_modified_date': '2024-09-16'}, hash='681b823dc23d094fd075a98f6cecabb052f82e69fa16da7edb94f72c91ff8906'), &lt;NodeRelationship.NEXT: '3'&gt;: RelatedNodeInfo(node_id='92f9be70-684d-4f1c-8989-3366885e08d1', node_type='1', metadata={}, hash='4300d0e685130840d73fa3f218135d698017e7556462926a9b03e8ab09c680e9')}, metadata_template='{key}: {value}', metadata_separator='\\n', text='You wouldn\\'t need versions, or ports, or any of that crap. At Interleaf there had been a whole group called Release Engineering that seemed to be at least as big as the group that actually wrote the software. Now you could just update the software right on the server.\\r\\n\\r\\nWe started a new company we called Viaweb, after the fact that our software worked via the web, and we got $10,000 in seed funding from Idelle\\'s husband Julian. In return for that and doing the initial legal work and giving us business advice, we gave him 10% of the company. Ten years later this deal became the model for Y Combinator\\'s. We knew founders needed something like this, because we\\'d needed it ourselves.\\r\\n\\r\\nAt this stage I had a negative net worth, because the thousand dollars or so I had in the bank was more than counterbalanced by what I owed the government in taxes. (Had I diligently set aside the proper proportion of the money I\\'d made consulting for Interleaf? No, I had not.) So although Robert had his graduate student stipend, I needed that seed funding to live on.\\r\\n\\r\\nWe originally hoped to launch in September, but we got more ambitious about the software as we worked on it. Eventually we managed to build a WYSIWYG site builder, in the sense that as you were creating pages, they looked exactly like the static ones that would be generated later, except that instead of leading to static pages, the links all referred to closures stored in a hash table on the server.\\r\\n\\r\\nIt helped to have studied art, because the main goal of an online store builder is to make users look legit, and the key to looking legit is high production values. If you get page layouts and fonts and colors right, you can make a guy running a store out of his bedroom look more legit than a big company.\\r\\n\\r\\n(If you\\'re curious why my site looks so old-fashioned, it\\'s because it\\'s still made with this software. It may look clunky today, but in 1996 it was the last word in slick.)\\r\\n\\r\\nIn September, Robert rebelled. \"We\\'ve been working on this for a month,\" he said, \"and it\\'s still not done.\" This is funny in retrospect, because he would still be working on it almost 3 years later. But I decided it might be prudent to recruit more programmers, and I asked Robert who else in grad school with him was really good. He recommended Trevor Blackwell, which surprised me at first, because at that point I knew Trevor mainly for his plan to reduce everything in his life to a stack of notecards, which he carried around with him. But Rtm was right, as usual. Trevor turned out to be a frighteningly effective hacker.\\r\\n\\r\\nIt was a lot of fun working with Robert and Trevor. They\\'re the two most independent-minded people I know, and in completely different ways. If you could see inside Rtm\\'s brain it would look like a colonial New England church, and if you could see inside Trevor\\'s it would look like the worst excesses of Austrian Rococo.\\r\\n\\r\\nWe opened for business, with 6 stores, in January 1996. It was just as well we waited a few months, because although we worried we were late, we were actually almost fatally early. There was a lot of talk in the press then about ecommerce, but not many people actually wanted online stores. [8]\\r\\n\\r\\nThere were three main parts to the software: the editor, which people used to build sites and which I wrote, the shopping cart, which Robert wrote, and the manager, which kept track of orders and statistics, and which Trevor wrote. In its time, the editor was one of the best general-purpose site builders. I kept the code tight and didn\\'t have to integrate with any other software except Robert\\'s and Trevor\\'s, so it was quite fun to work on. If all I\\'d had to do was work on this software, the next 3 years would have been the easiest of my life. Unfortunately I had to do a lot more, all of it stuff I was worse at than programming, and the next 3 years were instead the most stressful.\\r\\n\\r\\nThere were a lot of startups making ecommerce software in the second half of the 90s. We were determined to be the Microsoft Word, not the Interleaf. Which meant being easy to use and inexpensive. It was lucky for us that we were poor, because that caused us to make Viaweb even more inexpensive than we realized. We charged $100 a month for a small store and $300 a month for a big one.', mimetype='text/plain', start_char_idx=28042, end_char_idx=32337, metadata_seperator='\\n', text_template='{metadata_str}\\n\\n{content}'), 'e75cae1d3d75c3180e79b23fff57c163ee2e02653e0dc393a4b47155b1202513': TextNode(id_='e75cae1d3d75c3180e79b23fff57c163ee2e02653e0dc393a4b47155b1202513', embedding=None, metadata={'file_path': '..\\\\..\\\\..\\\\examples\\\\data\\\\essay\\\\paul-graham-essay.txt', 'file_name': 'paul-graham-essay.txt', 'file_type': 'text/plain', 'file_size': 75395, 'creation_date': '2024-10-25', 'last_modified_date': '2024-09-16', 'content-hash': 'e75cae1d3d75c3180e79b23fff57c163ee2e02653e0dc393a4b47155b1202513'}, excluded_embed_metadata_keys=['file_name'], excluded_llm_metadata_keys=['file_name'], relationships={&lt;NodeRelationship.SOURCE: '1'&gt;: RelatedNodeInfo(node_id='05f5a125-612f-4398-87e1-07179ff75f62', node_type='4', metadata={'file_path': '..\\\\..\\\\..\\\\examples\\\\data\\\\essay\\\\paul-graham-essay.txt', 'file_name': 'paul-graham-essay.txt', 'file_type': 'text/plain', 'file_size': 75395, 'creation_date': '2024-10-25', 'last_modified_date': '2024-09-16'}, hash='b782bb2fb6802c1f0d21b68ab4fda7b88c64a6ebeaf5c06f1eb297ca11e14b9c'), &lt;NodeRelationship.PREVIOUS: '2'&gt;: RelatedNodeInfo(node_id='a3d8faa7-8234-4533-acf3-b665ddc9cf7b', node_type='1', metadata={'file_path': '..\\\\..\\\\..\\\\examples\\\\data\\\\essay\\\\paul-graham-essay.txt', 'file_name': 'paul-graham-essay.txt', 'file_type': 'text/plain', 'file_size': 75395, 'creation_date': '2024-10-25', 'last_modified_date': '2024-09-16'}, hash='871a03cbc4a00c4a3e86b629520cd84ff69f992115aba1db5f50f31b62a33730'), &lt;NodeRelationship.NEXT: '3'&gt;: RelatedNodeInfo(node_id='36cdd6c2-1b83-43db-b347-9e62bd897cee', node_type='1', metadata={}, hash='5725a6e19577fbcce91177511aea20a46de8c189cdfa88c3fdfef56f04368c85')}, metadata_template='{key}: {value}', metadata_separator='\\n', text='There were a lot of startups making ecommerce software in the second half of the 90s. We were determined to be the Microsoft Word, not the Interleaf. Which meant being easy to use and inexpensive. It was lucky for us that we were poor, because that caused us to make Viaweb even more inexpensive than we realized. We charged $100 a month for a small store and $300 a month for a big one. This low price was a big attraction, and a constant thorn in the sides of competitors, but it wasn\\'t because of some clever insight that we set the price low. We had no idea what businesses paid for things. $300 a month seemed like a lot of money to us.\\r\\n\\r\\nWe did a lot of things right by accident like that. For example, we did what\\'s now called \"doing things that don\\'t scale,\" although at the time we would have described it as \"being so lame that we\\'re driven to the most desperate measures to get users.\" The most common of which was building stores for them. This seemed particularly humiliating, since the whole raison d\\'etre of our software was that people could use it to make their own stores. But anything to get users.\\r\\n\\r\\nWe learned a lot more about retail than we wanted to know. For example, that if you could only have a small image of a man\\'s shirt (and all images were small then by present standards), it was better to have a closeup of the collar than a picture of the whole shirt. The reason I remember learning this was that it meant I had to rescan about 30 images of men\\'s shirts. My first set of scans were so beautiful too.\\r\\n\\r\\nThough this felt wrong, it was exactly the right thing to be doing. Building stores for users taught us about retail, and about how it felt to use our software. I was initially both mystified and repelled by \"business\" and thought we needed a \"business person\" to be in charge of it, but once we started to get users, I was converted, in much the same way I was converted to fatherhood once I had kids. Whatever users wanted, I was all theirs. Maybe one day we\\'d have so many users that I couldn\\'t scan their images for them, but in the meantime there was nothing more important to do.\\r\\n\\r\\nAnother thing I didn\\'t get at the time is that growth rate is the ultimate test of a startup. Our growth rate was fine. We had about 70 stores at the end of 1996 and about 500 at the end of 1997. I mistakenly thought the thing that mattered was the absolute number of users. And that is the thing that matters in the sense that that\\'s how much money you\\'re making, and if you\\'re not making enough, you might go out of business. But in the long term the growth rate takes care of the absolute number. If we\\'d been a startup I was advising at Y Combinator, I would have said: Stop being so stressed out, because you\\'re doing fine. You\\'re growing 7x a year. Just don\\'t hire too many more people and you\\'ll soon be profitable, and then you\\'ll control your own destiny.\\r\\n\\r\\nAlas I hired lots more people, partly because our investors wanted me to, and partly because that\\'s what startups did during the Internet Bubble. A company with just a handful of employees would have seemed amateurish. So we didn\\'t reach breakeven until about when Yahoo bought us in the summer of 1998. Which in turn meant we were at the mercy of investors for the entire life of the company. And since both we and our investors were noobs at startups, the result was a mess even by startup standards.\\r\\n\\r\\nIt was a huge relief when Yahoo bought us. In principle our Viaweb stock was valuable. It was a share in a business that was profitable and growing rapidly. But it didn\\'t feel very valuable to me; I had no idea how to value a business, but I was all too keenly aware of the near-death experiences we seemed to have every few months. Nor had I changed my grad student lifestyle significantly since we started. So when Yahoo bought us it felt like going from rags to riches. Since we were going to California, I bought a car, a yellow 1998 VW GTI. I remember thinking that its leather seats alone were by far the most luxurious thing I owned.\\r\\n\\r\\nThe next year, from the summer of 1998 to the summer of 1999, must have been the least productive of my life. I didn\\'t realize it at the time, but I was worn out from the effort and stress of running Viaweb.', mimetype='text/plain', start_char_idx=31950, end_char_idx=36204, metadata_seperator='\\n', text_template='{metadata_str}\\n\\n{content}'), '60f93919033099369f277d230e6c8e5167c599aa0616b90f17f16a85b9de4fe1': TextNode(id_='60f93919033099369f277d230e6c8e5167c599aa0616b90f17f16a85b9de4fe1', embedding=None, metadata={'file_path': '..\\\\..\\\\..\\\\examples\\\\data\\\\essay\\\\paul-graham-essay.txt', 'file_name': 'paul-graham-essay.txt', 'file_type': 'text/plain', 'file_size': 75395, 'creation_date': '2024-10-25', 'last_modified_date': '2024-09-16', 'content-hash': '60f93919033099369f277d230e6c8e5167c599aa0616b90f17f16a85b9de4fe1'}, excluded_embed_metadata_keys=['file_name'], excluded_llm_metadata_keys=['file_name'], relationships={&lt;NodeRelationship.SOURCE: '1'&gt;: RelatedNodeInfo(node_id='05f5a125-612f-4398-87e1-07179ff75f62', node_type='4', metadata={'file_path': '..\\\\..\\\\..\\\\examples\\\\data\\\\essay\\\\paul-graham-essay.txt', 'file_name': 'paul-graham-essay.txt', 'file_type': 'text/plain', 'file_size': 75395, 'creation_date': '2024-10-25', 'last_modified_date': '2024-09-16'}, hash='b782bb2fb6802c1f0d21b68ab4fda7b88c64a6ebeaf5c06f1eb297ca11e14b9c'), &lt;NodeRelationship.PREVIOUS: '2'&gt;: RelatedNodeInfo(node_id='92f9be70-684d-4f1c-8989-3366885e08d1', node_type='1', metadata={'file_path': '..\\\\..\\\\..\\\\examples\\\\data\\\\essay\\\\paul-graham-essay.txt', 'file_name': 'paul-graham-essay.txt', 'file_type': 'text/plain', 'file_size': 75395, 'creation_date': '2024-10-25', 'last_modified_date': '2024-09-16'}, hash='e97dc89ec9e03665ebfb87f16de35fee4264881e0b1ed4f97636a26e4ecbbf0e'), &lt;NodeRelationship.NEXT: '3'&gt;: RelatedNodeInfo(node_id='49450730-f927-436e-b768-ff9835b68935', node_type='1', metadata={}, hash='33082e278996d69b4bb8e25466a5c503d97dc25817558bf41196361e2a37e401')}, metadata_template='{key}: {value}', metadata_separator='\\n', text=\"Since we were going to California, I bought a car, a yellow 1998 VW GTI. I remember thinking that its leather seats alone were by far the most luxurious thing I owned.\\r\\n\\r\\nThe next year, from the summer of 1998 to the summer of 1999, must have been the least productive of my life. I didn't realize it at the time, but I was worn out from the effort and stress of running Viaweb. For a while after I got to California I tried to continue my usual m.o. of programming till 3 in the morning, but fatigue combined with Yahoo's prematurely aged culture and grim cube farm in Santa Clara gradually dragged me down. After a few months it felt disconcertingly like working at Interleaf.\\r\\n\\r\\nYahoo had given us a lot of options when they bought us. At the time I thought Yahoo was so overvalued that they'd never be worth anything, but to my astonishment the stock went up 5x in the next year. I hung on till the first chunk of options vested, then in the summer of 1999 I left. It had been so long since I'd painted anything that I'd half forgotten why I was doing this. My brain had been entirely full of software and men's shirts for 4 years. But I had done this to get rich so I could paint, I reminded myself, and now I was rich, so I should go paint.\\r\\n\\r\\nWhen I said I was leaving, my boss at Yahoo had a long conversation with me about my plans. I told him all about the kinds of pictures I wanted to paint. At the time I was touched that he took such an interest in me. Now I realize it was because he thought I was lying. My options at that point were worth about $2 million a month. If I was leaving that kind of money on the table, it could only be to go and start some new startup, and if I did, I might take people with me. This was the height of the Internet Bubble, and Yahoo was ground zero of it. My boss was at that moment a billionaire. Leaving then to start a new startup must have seemed to him an insanely, and yet also plausibly, ambitious plan.\\r\\n\\r\\nBut I really was quitting to paint, and I started immediately. There was no time to lose. I'd already burned 4 years getting rich. Now when I talk to founders who are leaving after selling their companies, my advice is always the same: take a vacation. That's what I should have done, just gone off somewhere and done nothing for a month or two, but the idea never occurred to me.\\r\\n\\r\\nSo I tried to paint, but I just didn't seem to have any energy or ambition. Part of the problem was that I didn't know many people in California. I'd compounded this problem by buying a house up in the Santa Cruz Mountains, with a beautiful view but miles from anywhere. I stuck it out for a few more months, then in desperation I went back to New York, where unless you understand about rent control you'll be surprised to hear I still had my apartment, sealed up like a tomb of my old life. Idelle was in New York at least, and there were other people trying to paint there, even though I didn't know any of them.\\r\\n\\r\\nWhen I got back to New York I resumed my old life, except now I was rich. It was as weird as it sounds. I resumed all my old patterns, except now there were doors where there hadn't been. Now when I was tired of walking, all I had to do was raise my hand, and (unless it was raining) a taxi would stop to pick me up. Now when I walked past charming little restaurants I could go in and order lunch. It was exciting for a while. Painting started to go better. I experimented with a new kind of still life where I'd paint one painting in the old way, then photograph it and print it, blown up, on canvas, and then use that as the underpainting for a second still life, painted from the same objects (which hopefully hadn't rotted yet).\\r\\n\\r\\nMeanwhile I looked for an apartment to buy. Now I could actually choose what neighborhood to live in. Where, I asked myself and various real estate agents, is the Cambridge of New York? Aided by occasional visits to actual Cambridge, I gradually realized there wasn't one. Huh.\\r\\n\\r\\nAround this time, in the spring of 2000, I had an idea. It was clear from our experience with Viaweb that web apps were the future. Why not build a web app for making web apps?\", mimetype='text/plain', start_char_idx=35826, end_char_idx=39984, metadata_seperator='\\n', text_template='{metadata_str}\\n\\n{content}'), 'f564c2c3268d56432b2ab94b2b2ed6d65060451418e510695d4fe2014226264e': TextNode(id_='f564c2c3268d56432b2ab94b2b2ed6d65060451418e510695d4fe2014226264e', embedding=None, metadata={'file_path': '..\\\\..\\\\..\\\\examples\\\\data\\\\essay\\\\paul-graham-essay.txt', 'file_name': 'paul-graham-essay.txt', 'file_type': 'text/plain', 'file_size': 75395, 'creation_date': '2024-10-25', 'last_modified_date': '2024-09-16', 'content-hash': 'f564c2c3268d56432b2ab94b2b2ed6d65060451418e510695d4fe2014226264e'}, excluded_embed_metadata_keys=['file_name'], excluded_llm_metadata_keys=['file_name'], relationships={&lt;NodeRelationship.SOURCE: '1'&gt;: RelatedNodeInfo(node_id='05f5a125-612f-4398-87e1-07179ff75f62', node_type='4', metadata={'file_path': '..\\\\..\\\\..\\\\examples\\\\data\\\\essay\\\\paul-graham-essay.txt', 'file_name': 'paul-graham-essay.txt', 'file_type': 'text/plain', 'file_size': 75395, 'creation_date': '2024-10-25', 'last_modified_date': '2024-09-16'}, hash='b782bb2fb6802c1f0d21b68ab4fda7b88c64a6ebeaf5c06f1eb297ca11e14b9c'), &lt;NodeRelationship.PREVIOUS: '2'&gt;: RelatedNodeInfo(node_id='36cdd6c2-1b83-43db-b347-9e62bd897cee', node_type='1', metadata={'file_path': '..\\\\..\\\\..\\\\examples\\\\data\\\\essay\\\\paul-graham-essay.txt', 'file_name': 'paul-graham-essay.txt', 'file_type': 'text/plain', 'file_size': 75395, 'creation_date': '2024-10-25', 'last_modified_date': '2024-09-16'}, hash='0c251d622ec62d68ea50a30d50b631072719f003b618aaf20a7e442d2d67a659'), &lt;NodeRelationship.NEXT: '3'&gt;: RelatedNodeInfo(node_id='74309d12-3c4d-4e97-a5af-5594f927395d', node_type='1', metadata={}, hash='66aa4aa06d4a7dc97204ff3e64bfd579885a917b8b75b65dd138ff9cdd51b8db')}, metadata_template='{key}: {value}', metadata_separator='\\n', text='Now I could actually choose what neighborhood to live in. Where, I asked myself and various real estate agents, is the Cambridge of New York? Aided by occasional visits to actual Cambridge, I gradually realized there wasn\\'t one. Huh.\\r\\n\\r\\nAround this time, in the spring of 2000, I had an idea. It was clear from our experience with Viaweb that web apps were the future. Why not build a web app for making web apps? Why not let people edit code on our server through the browser, and then host the resulting applications for them? [9] You could run all sorts of services on the servers that these applications could use just by making an API call: making and receiving phone calls, manipulating images, taking credit card payments, etc.\\r\\n\\r\\nI got so excited about this idea that I couldn\\'t think about anything else. It seemed obvious that this was the future. I didn\\'t particularly want to start another company, but it was clear that this idea would have to be embodied as one, so I decided to move to Cambridge and start it. I hoped to lure Robert into working on it with me, but there I ran into a hitch. Robert was now a postdoc at MIT, and though he\\'d made a lot of money the last time I\\'d lured him into working on one of my schemes, it had also been a huge time sink. So while he agreed that it sounded like a plausible idea, he firmly refused to work on it.\\r\\n\\r\\nHmph. Well, I\\'d do it myself then. I recruited Dan Giffin, who had worked for Viaweb, and two undergrads who wanted summer jobs, and we got to work trying to build what it\\'s now clear is about twenty companies and several open source projects worth of software. The language for defining applications would of course be a dialect of Lisp. But I wasn\\'t so naive as to assume I could spring an overt Lisp on a general audience; we\\'d hide the parentheses, like Dylan did.\\r\\n\\r\\nBy then there was a name for the kind of company Viaweb was, an \"application service provider,\" or ASP. This name didn\\'t last long before it was replaced by \"software as a service,\" but it was current for long enough that I named this new company after it: it was going to be called Aspra.\\r\\n\\r\\nI started working on the application builder, Dan worked on network infrastructure, and the two undergrads worked on the first two services (images and phone calls). But about halfway through the summer I realized I really didn\\'t want to run a company \u2014 especially not a big one, which it was looking like this would have to be. I\\'d only started Viaweb because I needed the money. Now that I didn\\'t need money anymore, why was I doing this? If this vision had to be realized as a company, then screw the vision. I\\'d build a subset that could be done as an open source project.\\r\\n\\r\\nMuch to my surprise, the time I spent working on this stuff was not wasted after all. After we started Y Combinator, I would often encounter startups working on parts of this new architecture, and it was very useful to have spent so much time thinking about it and even trying to write some of it.\\r\\n\\r\\nThe subset I would build as an open source project was the new Lisp, whose parentheses I now wouldn\\'t even have to hide. A lot of Lisp hackers dream of building a new Lisp, partly because one of the distinctive features of the language is that it has dialects, and partly, I think, because we have in our minds a Platonic form of Lisp that all existing dialects fall short of. I certainly did. So at the end of the summer Dan and I switched to working on this new dialect of Lisp, which I called Arc, in a house I bought in Cambridge.\\r\\n\\r\\nThe following spring, lightning struck. I was invited to give a talk at a Lisp conference, so I gave one about how we\\'d used Lisp at Viaweb. Afterward I put a postscript file of this talk online, on paulgraham.com, which I\\'d created years before using Viaweb but had never used for anything. In one day it got 30,000 page views. What on earth had happened? The referring urls showed that someone had posted it on Slashdot. [10]\\r\\n\\r\\nWow, I thought, there\\'s an audience. If I write something and put it on the web, anyone can read it. That may seem obvious now, but it was surprising then. In the print era there was a narrow channel to readers, guarded by fierce monsters known as editors.', mimetype='text/plain', start_char_idx=39571, end_char_idx=43809, metadata_seperator='\\n', text_template='{metadata_str}\\n\\n{content}'), 'c389b1ad61a8c1fbd5a396679a7e1661aabcb6e323ef4fbfa815065e84cdebf7': TextNode(id_='c389b1ad61a8c1fbd5a396679a7e1661aabcb6e323ef4fbfa815065e84cdebf7', embedding=None, metadata={'file_path': '..\\\\..\\\\..\\\\examples\\\\data\\\\essay\\\\paul-graham-essay.txt', 'file_name': 'paul-graham-essay.txt', 'file_type': 'text/plain', 'file_size': 75395, 'creation_date': '2024-10-25', 'last_modified_date': '2024-09-16', 'content-hash': 'c389b1ad61a8c1fbd5a396679a7e1661aabcb6e323ef4fbfa815065e84cdebf7'}, excluded_embed_metadata_keys=['file_name'], excluded_llm_metadata_keys=['file_name'], relationships={&lt;NodeRelationship.SOURCE: '1'&gt;: RelatedNodeInfo(node_id='05f5a125-612f-4398-87e1-07179ff75f62', node_type='4', metadata={'file_path': '..\\\\..\\\\..\\\\examples\\\\data\\\\essay\\\\paul-graham-essay.txt', 'file_name': 'paul-graham-essay.txt', 'file_type': 'text/plain', 'file_size': 75395, 'creation_date': '2024-10-25', 'last_modified_date': '2024-09-16'}, hash='b782bb2fb6802c1f0d21b68ab4fda7b88c64a6ebeaf5c06f1eb297ca11e14b9c'), &lt;NodeRelationship.PREVIOUS: '2'&gt;: RelatedNodeInfo(node_id='49450730-f927-436e-b768-ff9835b68935', node_type='1', metadata={'file_path': '..\\\\..\\\\..\\\\examples\\\\data\\\\essay\\\\paul-graham-essay.txt', 'file_name': 'paul-graham-essay.txt', 'file_type': 'text/plain', 'file_size': 75395, 'creation_date': '2024-10-25', 'last_modified_date': '2024-09-16'}, hash='f1cca28289e69899ae7eeb8a20ff3b077e0fbec04de652c91d5023723d764c8e'), &lt;NodeRelationship.NEXT: '3'&gt;: RelatedNodeInfo(node_id='ee9858a4-cd4c-479d-be85-5b04647ad76f', node_type='1', metadata={}, hash='fcd568fb84d5259deb031aa1095fe4b4f19d2f6db44f9c192d6c746783443cfc')}, metadata_template='{key}: {value}', metadata_separator='\\n', text=\"In one day it got 30,000 page views. What on earth had happened? The referring urls showed that someone had posted it on Slashdot. [10]\\r\\n\\r\\nWow, I thought, there's an audience. If I write something and put it on the web, anyone can read it. That may seem obvious now, but it was surprising then. In the print era there was a narrow channel to readers, guarded by fierce monsters known as editors. The only way to get an audience for anything you wrote was to get it published as a book, or in a newspaper or magazine. Now anyone could publish anything.\\r\\n\\r\\nThis had been possible in principle since 1993, but not many people had realized it yet. I had been intimately involved with building the infrastructure of the web for most of that time, and a writer as well, and it had taken me 8 years to realize it. Even then it took me several years to understand the implications. It meant there would be a whole new generation of essays. [11]\\r\\n\\r\\nIn the print era, the channel for publishing essays had been vanishingly small. Except for a few officially anointed thinkers who went to the right parties in New York, the only people allowed to publish essays were specialists writing about their specialties. There were so many essays that had never been written, because there had been no way to publish them. Now they could be, and I was going to write them. [12]\\r\\n\\r\\nI've worked on several different things, but to the extent there was a turning point where I figured out what to work on, it was when I started publishing essays online. From then on I knew that whatever else I did, I'd always write essays too.\\r\\n\\r\\nI knew that online essays would be a marginal medium at first. Socially they'd seem more like rants posted by nutjobs on their GeoCities sites than the genteel and beautifully typeset compositions published in The New Yorker. But by this point I knew enough to find that encouraging instead of discouraging.\\r\\n\\r\\nOne of the most conspicuous patterns I've noticed in my life is how well it has worked, for me at least, to work on things that weren't prestigious. Still life has always been the least prestigious form of painting. Viaweb and Y Combinator both seemed lame when we started them. I still get the glassy eye from strangers when they ask what I'm writing, and I explain that it's an essay I'm going to publish on my web site. Even Lisp, though prestigious intellectually in something like the way Latin is, also seems about as hip.\\r\\n\\r\\nIt's not that unprestigious types of work are good per se. But when you find yourself drawn to some kind of work despite its current lack of prestige, it's a sign both that there's something real to be discovered there, and that you have the right kind of motives. Impure motives are a big danger for the ambitious. If anything is going to lead you astray, it will be the desire to impress people. So while working on things that aren't prestigious doesn't guarantee you're on the right track, it at least guarantees you're not on the most common type of wrong one.\\r\\n\\r\\nOver the next several years I wrote lots of essays about all kinds of different topics. O'Reilly reprinted a collection of them as a book, called Hackers &amp; Painters after one of the essays in it. I also worked on spam filters, and did some more painting. I used to have dinners for a group of friends every thursday night, which taught me how to cook for groups. And I bought another building in Cambridge, a former candy factory (and later, twas said, porn studio), to use as an office.\\r\\n\\r\\nOne night in October 2003 there was a big party at my house. It was a clever idea of my friend Maria Daniels, who was one of the thursday diners. Three separate hosts would all invite their friends to one party. So for every guest, two thirds of the other guests would be people they didn't know but would probably like. One of the guests was someone I didn't know but would turn out to like a lot: a woman called Jessica Livingston. A couple days later I asked her out.\\r\\n\\r\\nJessica was in charge of marketing at a Boston investment bank. This bank thought it understood startups, but over the next year, as she met friends of mine from the startup world, she was surprised how different reality was. And how colorful their stories were. So she decided to compile a book of interviews with startup founders.\\r\\n\\r\\nWhen the bank had financial problems and she had to fire half her staff, she started looking for a new job.\", mimetype='text/plain', start_char_idx=43414, end_char_idx=47843, metadata_seperator='\\n', text_template='{metadata_str}\\n\\n{content}'), '8e897d50fbf2c6e0dd117d22428ec63fa43a55ccc7dd8a777034b6651204f1b8': TextNode(id_='8e897d50fbf2c6e0dd117d22428ec63fa43a55ccc7dd8a777034b6651204f1b8', embedding=None, metadata={'file_path': '..\\\\..\\\\..\\\\examples\\\\data\\\\essay\\\\paul-graham-essay.txt', 'file_name': 'paul-graham-essay.txt', 'file_type': 'text/plain', 'file_size': 75395, 'creation_date': '2024-10-25', 'last_modified_date': '2024-09-16', 'content-hash': '8e897d50fbf2c6e0dd117d22428ec63fa43a55ccc7dd8a777034b6651204f1b8'}, excluded_embed_metadata_keys=['file_name'], excluded_llm_metadata_keys=['file_name'], relationships={&lt;NodeRelationship.SOURCE: '1'&gt;: RelatedNodeInfo(node_id='05f5a125-612f-4398-87e1-07179ff75f62', node_type='4', metadata={'file_path': '..\\\\..\\\\..\\\\examples\\\\data\\\\essay\\\\paul-graham-essay.txt', 'file_name': 'paul-graham-essay.txt', 'file_type': 'text/plain', 'file_size': 75395, 'creation_date': '2024-10-25', 'last_modified_date': '2024-09-16'}, hash='b782bb2fb6802c1f0d21b68ab4fda7b88c64a6ebeaf5c06f1eb297ca11e14b9c'), &lt;NodeRelationship.PREVIOUS: '2'&gt;: RelatedNodeInfo(node_id='74309d12-3c4d-4e97-a5af-5594f927395d', node_type='1', metadata={'file_path': '..\\\\..\\\\..\\\\examples\\\\data\\\\essay\\\\paul-graham-essay.txt', 'file_name': 'paul-graham-essay.txt', 'file_type': 'text/plain', 'file_size': 75395, 'creation_date': '2024-10-25', 'last_modified_date': '2024-09-16'}, hash='3be4e49b7fd42d0bb082803e09af90afd3c73c3ca209bcd55e838b4ddbfa01ba'), &lt;NodeRelationship.NEXT: '3'&gt;: RelatedNodeInfo(node_id='c6f40e93-8e79-43a4-9ea3-704d0e076ba7', node_type='1', metadata={}, hash='85e05ac8c400e9091b4c3c788aa50f035a0cb3ce5f33ae0d6c21731b4aac88fe')}, metadata_template='{key}: {value}', metadata_separator='\\n', text='A couple days later I asked her out.\\r\\n\\r\\nJessica was in charge of marketing at a Boston investment bank. This bank thought it understood startups, but over the next year, as she met friends of mine from the startup world, she was surprised how different reality was. And how colorful their stories were. So she decided to compile a book of interviews with startup founders.\\r\\n\\r\\nWhen the bank had financial problems and she had to fire half her staff, she started looking for a new job. In early 2005 she interviewed for a marketing job at a Boston VC firm. It took them weeks to make up their minds, and during this time I started telling her about all the things that needed to be fixed about venture capital. They should make a larger number of smaller investments instead of a handful of giant ones, they should be funding younger, more technical founders instead of MBAs, they should let the founders remain as CEO, and so on.\\r\\n\\r\\nOne of my tricks for writing essays had always been to give talks. The prospect of having to stand up in front of a group of people and tell them something that won\\'t waste their time is a great spur to the imagination. When the Harvard Computer Society, the undergrad computer club, asked me to give a talk, I decided I would tell them how to start a startup. Maybe they\\'d be able to avoid the worst of the mistakes we\\'d made.\\r\\n\\r\\nSo I gave this talk, in the course of which I told them that the best sources of seed funding were successful startup founders, because then they\\'d be sources of advice too. Whereupon it seemed they were all looking expectantly at me. Horrified at the prospect of having my inbox flooded by business plans (if I\\'d only known), I blurted out \"But not me!\" and went on with the talk. But afterward it occurred to me that I should really stop procrastinating about angel investing. I\\'d been meaning to since Yahoo bought us, and now it was 7 years later and I still hadn\\'t done one angel investment.\\r\\n\\r\\nMeanwhile I had been scheming with Robert and Trevor about projects we could work on together. I missed working with them, and it seemed like there had to be something we could collaborate on.\\r\\n\\r\\nAs Jessica and I were walking home from dinner on March 11, at the corner of Garden and Walker streets, these three threads converged. Screw the VCs who were taking so long to make up their minds. We\\'d start our own investment firm and actually implement the ideas we\\'d been talking about. I\\'d fund it, and Jessica could quit her job and work for it, and we\\'d get Robert and Trevor as partners too. [13]\\r\\n\\r\\nOnce again, ignorance worked in our favor. We had no idea how to be angel investors, and in Boston in 2005 there were no Ron Conways to learn from. So we just made what seemed like the obvious choices, and some of the things we did turned out to be novel.\\r\\n\\r\\nThere are multiple components to Y Combinator, and we didn\\'t figure them all out at once. The part we got first was to be an angel firm. In those days, those two words didn\\'t go together. There were VC firms, which were organized companies with people whose job it was to make investments, but they only did big, million dollar investments. And there were angels, who did smaller investments, but these were individuals who were usually focused on other things and made investments on the side. And neither of them helped founders enough in the beginning. We knew how helpless founders were in some respects, because we remembered how helpless we\\'d been. For example, one thing Julian had done for us that seemed to us like magic was to get us set up as a company. We were fine writing fairly difficult software, but actually getting incorporated, with bylaws and stock and all that stuff, how on earth did you do that? Our plan was not only to make seed investments, but to do for startups everything Julian had done for us.\\r\\n\\r\\nYC was not organized as a fund. It was cheap enough to run that we funded it with our own money. That went right by 99% of readers, but professional investors are thinking \"Wow, that means they got all the returns.\" But once again, this was not due to any particular insight on our part. We didn\\'t know how VC firms were organized. It never occurred to us to try to raise a fund, and if it had, we wouldn\\'t have known where to start. [14]\\r\\n\\r\\nThe most distinctive thing about YC is the batch model: to fund a bunch of startups all at once, twice a year, and then to spend three months focusing intensively on trying to help them.', mimetype='text/plain', start_char_idx=47360, end_char_idx=51842, metadata_seperator='\\n', text_template='{metadata_str}\\n\\n{content}'), '039515cdd3a336166767ce31fb3e71fad518f28a8924af171b57fdd00fd96383': TextNode(id_='039515cdd3a336166767ce31fb3e71fad518f28a8924af171b57fdd00fd96383', embedding=None, metadata={'file_path': '..\\\\..\\\\..\\\\examples\\\\data\\\\essay\\\\paul-graham-essay.txt', 'file_name': 'paul-graham-essay.txt', 'file_type': 'text/plain', 'file_size': 75395, 'creation_date': '2024-10-25', 'last_modified_date': '2024-09-16', 'content-hash': '039515cdd3a336166767ce31fb3e71fad518f28a8924af171b57fdd00fd96383'}, excluded_embed_metadata_keys=['file_name'], excluded_llm_metadata_keys=['file_name'], relationships={&lt;NodeRelationship.SOURCE: '1'&gt;: RelatedNodeInfo(node_id='05f5a125-612f-4398-87e1-07179ff75f62', node_type='4', metadata={'file_path': '..\\\\..\\\\..\\\\examples\\\\data\\\\essay\\\\paul-graham-essay.txt', 'file_name': 'paul-graham-essay.txt', 'file_type': 'text/plain', 'file_size': 75395, 'creation_date': '2024-10-25', 'last_modified_date': '2024-09-16'}, hash='b782bb2fb6802c1f0d21b68ab4fda7b88c64a6ebeaf5c06f1eb297ca11e14b9c'), &lt;NodeRelationship.PREVIOUS: '2'&gt;: RelatedNodeInfo(node_id='ee9858a4-cd4c-479d-be85-5b04647ad76f', node_type='1', metadata={'file_path': '..\\\\..\\\\..\\\\examples\\\\data\\\\essay\\\\paul-graham-essay.txt', 'file_name': 'paul-graham-essay.txt', 'file_type': 'text/plain', 'file_size': 75395, 'creation_date': '2024-10-25', 'last_modified_date': '2024-09-16'}, hash='eca6c25e46e9cf96ea82b98848ed35f90ea0dcf73c5554ba5a1a98b43315fb30'), &lt;NodeRelationship.NEXT: '3'&gt;: RelatedNodeInfo(node_id='cc9ec5ba-abd1-460c-8f78-ba46e606fdc8', node_type='1', metadata={}, hash='9d45f2a01403e543cc95b4ceeffc744bc4ce7379ef0d2330024a8eeea4a3882a')}, metadata_template='{key}: {value}', metadata_separator='\\n', text='But once again, this was not due to any particular insight on our part. We didn\\'t know how VC firms were organized. It never occurred to us to try to raise a fund, and if it had, we wouldn\\'t have known where to start. [14]\\r\\n\\r\\nThe most distinctive thing about YC is the batch model: to fund a bunch of startups all at once, twice a year, and then to spend three months focusing intensively on trying to help them. That part we discovered by accident, not merely implicitly but explicitly due to our ignorance about investing. We needed to get experience as investors. What better way, we thought, than to fund a whole bunch of startups at once? We knew undergrads got temporary jobs at tech companies during the summer. Why not organize a summer program where they\\'d start startups instead? We wouldn\\'t feel guilty for being in a sense fake investors, because they would in a similar sense be fake founders. So while we probably wouldn\\'t make much money out of it, we\\'d at least get to practice being investors on them, and they for their part would probably have a more interesting summer than they would working at Microsoft.\\r\\n\\r\\nWe\\'d use the building I owned in Cambridge as our headquarters. We\\'d all have dinner there once a week \u2014 on tuesdays, since I was already cooking for the thursday diners on thursdays \u2014 and after dinner we\\'d bring in experts on startups to give talks.\\r\\n\\r\\nWe knew undergrads were deciding then about summer jobs, so in a matter of days we cooked up something we called the Summer Founders Program, and I posted an announcement on my site, inviting undergrads to apply. I had never imagined that writing essays would be a way to get \"deal flow,\" as investors call it, but it turned out to be the perfect source. [15] We got 225 applications for the Summer Founders Program, and we were surprised to find that a lot of them were from people who\\'d already graduated, or were about to that spring. Already this SFP thing was starting to feel more serious than we\\'d intended.\\r\\n\\r\\nWe invited about 20 of the 225 groups to interview in person, and from those we picked 8 to fund. They were an impressive group. That first batch included reddit, Justin Kan and Emmett Shear, who went on to found Twitch, Aaron Swartz, who had already helped write the RSS spec and would a few years later become a martyr for open access, and Sam Altman, who would later become the second president of YC. I don\\'t think it was entirely luck that the first batch was so good. You had to be pretty bold to sign up for a weird thing like the Summer Founders Program instead of a summer job at a legit place like Microsoft or Goldman Sachs.\\r\\n\\r\\nThe deal for startups was based on a combination of the deal we did with Julian ($10k for 10%) and what Robert said MIT grad students got for the summer ($6k). We invested $6k per founder, which in the typical two-founder case was $12k, in return for 6%. That had to be fair, because it was twice as good as the deal we ourselves had taken. Plus that first summer, which was really hot, Jessica brought the founders free air conditioners. [16]\\r\\n\\r\\nFairly quickly I realized that we had stumbled upon the way to scale startup funding. Funding startups in batches was more convenient for us, because it meant we could do things for a lot of startups at once, but being part of a batch was better for the startups too. It solved one of the biggest problems faced by founders: the isolation. Now you not only had colleagues, but colleagues who understood the problems you were facing and could tell you how they were solving them.\\r\\n\\r\\nAs YC grew, we started to notice other advantages of scale. The alumni became a tight community, dedicated to helping one another, and especially the current batch, whose shoes they remembered being in. We also noticed that the startups were becoming one another\\'s customers. We used to refer jokingly to the \"YC GDP,\" but as YC grows this becomes less and less of a joke. Now lots of startups get their initial set of customers almost entirely from among their batchmates.\\r\\n\\r\\nI had not originally intended YC to be a full-time job. I was going to do three things: hack, write essays, and work on YC. As YC grew, and I grew more excited about it, it started to take up a lot more than a third of my attention. But for the first few years I was still able to work on other things.\\r\\n\\r\\nIn the summer of 2006, Robert and I started working on a new version of Arc.', mimetype='text/plain', start_char_idx=51430, end_char_idx=55859, metadata_seperator='\\n', text_template='{metadata_str}\\n\\n{content}'), '20fc5f0a9f5e2597faea5e3aae6cd72a7cb20e1ff45aa578a9fb564244519356': TextNode(id_='20fc5f0a9f5e2597faea5e3aae6cd72a7cb20e1ff45aa578a9fb564244519356', embedding=None, metadata={'file_path': '..\\\\..\\\\..\\\\examples\\\\data\\\\essay\\\\paul-graham-essay.txt', 'file_name': 'paul-graham-essay.txt', 'file_type': 'text/plain', 'file_size': 75395, 'creation_date': '2024-10-25', 'last_modified_date': '2024-09-16', 'content-hash': '20fc5f0a9f5e2597faea5e3aae6cd72a7cb20e1ff45aa578a9fb564244519356'}, excluded_embed_metadata_keys=['file_name'], excluded_llm_metadata_keys=['file_name'], relationships={&lt;NodeRelationship.SOURCE: '1'&gt;: RelatedNodeInfo(node_id='05f5a125-612f-4398-87e1-07179ff75f62', node_type='4', metadata={'file_path': '..\\\\..\\\\..\\\\examples\\\\data\\\\essay\\\\paul-graham-essay.txt', 'file_name': 'paul-graham-essay.txt', 'file_type': 'text/plain', 'file_size': 75395, 'creation_date': '2024-10-25', 'last_modified_date': '2024-09-16'}, hash='b782bb2fb6802c1f0d21b68ab4fda7b88c64a6ebeaf5c06f1eb297ca11e14b9c'), &lt;NodeRelationship.PREVIOUS: '2'&gt;: RelatedNodeInfo(node_id='c6f40e93-8e79-43a4-9ea3-704d0e076ba7', node_type='1', metadata={'file_path': '..\\\\..\\\\..\\\\examples\\\\data\\\\essay\\\\paul-graham-essay.txt', 'file_name': 'paul-graham-essay.txt', 'file_type': 'text/plain', 'file_size': 75395, 'creation_date': '2024-10-25', 'last_modified_date': '2024-09-16'}, hash='d28bbff30720f3d9a418140db0d0ef4977c5c9e9116b53146fb82ef73c1938c1'), &lt;NodeRelationship.NEXT: '3'&gt;: RelatedNodeInfo(node_id='0d5735eb-1dc5-4279-b7fb-2f26dd200c3f', node_type='1', metadata={}, hash='a6b6c9521daf9e574bdd626316d43eaa447a224165ca3a0e1f2dec2e0c5bb618')}, metadata_template='{key}: {value}', metadata_separator='\\n', text='I was going to do three things: hack, write essays, and work on YC. As YC grew, and I grew more excited about it, it started to take up a lot more than a third of my attention. But for the first few years I was still able to work on other things.\\r\\n\\r\\nIn the summer of 2006, Robert and I started working on a new version of Arc. This one was reasonably fast, because it was compiled into Scheme. To test this new Arc, I wrote Hacker News in it. It was originally meant to be a news aggregator for startup founders and was called Startup News, but after a few months I got tired of reading about nothing but startups. Plus it wasn\\'t startup founders we wanted to reach. It was future startup founders. So I changed the name to Hacker News and the topic to whatever engaged one\\'s intellectual curiosity.\\r\\n\\r\\nHN was no doubt good for YC, but it was also by far the biggest source of stress for me. If all I\\'d had to do was select and help founders, life would have been so easy. And that implies that HN was a mistake. Surely the biggest source of stress in one\\'s work should at least be something close to the core of the work. Whereas I was like someone who was in pain while running a marathon not from the exertion of running, but because I had a blister from an ill-fitting shoe. When I was dealing with some urgent problem during YC, there was about a 60% chance it had to do with HN, and a 40% chance it had do with everything else combined. [17]\\r\\n\\r\\nAs well as HN, I wrote all of YC\\'s internal software in Arc. But while I continued to work a good deal in Arc, I gradually stopped working on Arc, partly because I didn\\'t have time to, and partly because it was a lot less attractive to mess around with the language now that we had all this infrastructure depending on it. So now my three projects were reduced to two: writing essays and working on YC.\\r\\n\\r\\nYC was different from other kinds of work I\\'ve done. Instead of deciding for myself what to work on, the problems came to me. Every 6 months there was a new batch of startups, and their problems, whatever they were, became our problems. It was very engaging work, because their problems were quite varied, and the good founders were very effective. If you were trying to learn the most you could about startups in the shortest possible time, you couldn\\'t have picked a better way to do it.\\r\\n\\r\\nThere were parts of the job I didn\\'t like. Disputes between cofounders, figuring out when people were lying to us, fighting with people who maltreated the startups, and so on. But I worked hard even at the parts I didn\\'t like. I was haunted by something Kevin Hale once said about companies: \"No one works harder than the boss.\" He meant it both descriptively and prescriptively, and it was the second part that scared me. I wanted YC to be good, so if how hard I worked set the upper bound on how hard everyone else worked, I\\'d better work very hard.\\r\\n\\r\\nOne day in 2010, when he was visiting California for interviews, Robert Morris did something astonishing: he offered me unsolicited advice. I can only remember him doing that once before. One day at Viaweb, when I was bent over double from a kidney stone, he suggested that it would be a good idea for him to take me to the hospital. That was what it took for Rtm to offer unsolicited advice. So I remember his exact words very clearly. \"You know,\" he said, \"you should make sure Y Combinator isn\\'t the last cool thing you do.\"\\r\\n\\r\\nAt the time I didn\\'t understand what he meant, but gradually it dawned on me that he was saying I should quit. This seemed strange advice, because YC was doing great. But if there was one thing rarer than Rtm offering advice, it was Rtm being wrong. So this set me thinking. It was true that on my current trajectory, YC would be the last thing I did, because it was only taking up more of my attention. It had already eaten Arc, and was in the process of eating essays too. Either YC was my life\\'s work or I\\'d have to leave eventually. And it wasn\\'t, so I would.\\r\\n\\r\\nIn the summer of 2012 my mother had a stroke, and the cause turned out to be a blood clot caused by colon cancer.', mimetype='text/plain', start_char_idx=55533, end_char_idx=59649, metadata_seperator='\\n', text_template='{metadata_str}\\n\\n{content}'), 'b0dea2603a0d95b528d1c70e954c45a670d43ad7abcd72834196f538c0649cb7': TextNode(id_='b0dea2603a0d95b528d1c70e954c45a670d43ad7abcd72834196f538c0649cb7', embedding=None, metadata={'file_path': '..\\\\..\\\\..\\\\examples\\\\data\\\\essay\\\\paul-graham-essay.txt', 'file_name': 'paul-graham-essay.txt', 'file_type': 'text/plain', 'file_size': 75395, 'creation_date': '2024-10-25', 'last_modified_date': '2024-09-16', 'content-hash': 'b0dea2603a0d95b528d1c70e954c45a670d43ad7abcd72834196f538c0649cb7'}, excluded_embed_metadata_keys=['file_name'], excluded_llm_metadata_keys=['file_name'], relationships={&lt;NodeRelationship.SOURCE: '1'&gt;: RelatedNodeInfo(node_id='05f5a125-612f-4398-87e1-07179ff75f62', node_type='4', metadata={'file_path': '..\\\\..\\\\..\\\\examples\\\\data\\\\essay\\\\paul-graham-essay.txt', 'file_name': 'paul-graham-essay.txt', 'file_type': 'text/plain', 'file_size': 75395, 'creation_date': '2024-10-25', 'last_modified_date': '2024-09-16'}, hash='b782bb2fb6802c1f0d21b68ab4fda7b88c64a6ebeaf5c06f1eb297ca11e14b9c'), &lt;NodeRelationship.PREVIOUS: '2'&gt;: RelatedNodeInfo(node_id='cc9ec5ba-abd1-460c-8f78-ba46e606fdc8', node_type='1', metadata={'file_path': '..\\\\..\\\\..\\\\examples\\\\data\\\\essay\\\\paul-graham-essay.txt', 'file_name': 'paul-graham-essay.txt', 'file_type': 'text/plain', 'file_size': 75395, 'creation_date': '2024-10-25', 'last_modified_date': '2024-09-16'}, hash='d4850176a72e1184f4e7bcd63cf068d4ba4f728d600f107021835565979e33d9'), &lt;NodeRelationship.NEXT: '3'&gt;: RelatedNodeInfo(node_id='7ffbc0e4-89fb-4558-b60c-12f246ca1402', node_type='1', metadata={}, hash='81681151c9c6767f1408daf9d2b71b7cd5c140dd02d07a67f988e766d92572f2')}, metadata_template='{key}: {value}', metadata_separator='\\n', text=\"It had already eaten Arc, and was in the process of eating essays too. Either YC was my life's work or I'd have to leave eventually. And it wasn't, so I would.\\r\\n\\r\\nIn the summer of 2012 my mother had a stroke, and the cause turned out to be a blood clot caused by colon cancer. The stroke destroyed her balance, and she was put in a nursing home, but she really wanted to get out of it and back to her house, and my sister and I were determined to help her do it. I used to fly up to Oregon to visit her regularly, and I had a lot of time to think on those flights. On one of them I realized I was ready to hand YC over to someone else.\\r\\n\\r\\nI asked Jessica if she wanted to be president, but she didn't, so we decided we'd try to recruit Sam Altman. We talked to Robert and Trevor and we agreed to make it a complete changing of the guard. Up till that point YC had been controlled by the original LLC we four had started. But we wanted YC to last for a long time, and to do that it couldn't be controlled by the founders. So if Sam said yes, we'd let him reorganize YC. Robert and I would retire, and Jessica and Trevor would become ordinary partners.\\r\\n\\r\\nWhen we asked Sam if he wanted to be president of YC, initially he said no. He wanted to start a startup to make nuclear reactors. But I kept at it, and in October 2013 he finally agreed. We decided he'd take over starting with the winter 2014 batch. For the rest of 2013 I left running YC more and more to Sam, partly so he could learn the job, and partly because I was focused on my mother, whose cancer had returned.\\r\\n\\r\\nShe died on January 15, 2014. We knew this was coming, but it was still hard when it did.\\r\\n\\r\\nI kept working on YC till March, to help get that batch of startups through Demo Day, then I checked out pretty completely. (I still talk to alumni and to new startups working on things I'm interested in, but that only takes a few hours a week.)\\r\\n\\r\\nWhat should I do next? Rtm's advice hadn't included anything about that. I wanted to do something completely different, so I decided I'd paint. I wanted to see how good I could get if I really focused on it. So the day after I stopped working on YC, I started painting. I was rusty and it took a while to get back into shape, but it was at least completely engaging. [18]\\r\\n\\r\\nI spent most of the rest of 2014 painting. I'd never been able to work so uninterruptedly before, and I got to be better than I had been. Not good enough, but better. Then in November, right in the middle of a painting, I ran out of steam. Up till that point I'd always been curious to see how the painting I was working on would turn out, but suddenly finishing this one seemed like a chore. So I stopped working on it and cleaned my brushes and haven't painted since. So far anyway.\\r\\n\\r\\nI realize that sounds rather wimpy. But attention is a zero sum game. If you can choose what to work on, and you choose a project that's not the best one (or at least a good one) for you, then it's getting in the way of another project that is. And at 50 there was some opportunity cost to screwing around.\\r\\n\\r\\nI started writing essays again, and wrote a bunch of new ones over the next few months. I even wrote a couple that weren't about startups. Then in March 2015 I started working on Lisp again.\\r\\n\\r\\nThe distinctive thing about Lisp is that its core is a language defined by writing an interpreter in itself. It wasn't originally intended as a programming language in the ordinary sense. It was meant to be a formal model of computation, an alternative to the Turing machine. If you want to write an interpreter for a language in itself, what's the minimum set of predefined operators you need? The Lisp that John McCarthy invented, or more accurately discovered, is an answer to that question. [19]\\r\\n\\r\\nMcCarthy didn't realize this Lisp could even be used to program computers till his grad student Steve Russell suggested it. Russell translated McCarthy's interpreter into IBM 704 machine language, and from that point Lisp started also to be a programming language in the ordinary sense. But its origins as a model of computation gave it a power and elegance that other languages couldn't match.\", mimetype='text/plain', start_char_idx=59373, end_char_idx=63556, metadata_seperator='\\n', text_template='{metadata_str}\\n\\n{content}'), '137d977c2f2db8de725f8c0cc4a373fb9fc354ad934441b93806dae5fabd6d35': TextNode(id_='137d977c2f2db8de725f8c0cc4a373fb9fc354ad934441b93806dae5fabd6d35', embedding=None, metadata={'file_path': '..\\\\..\\\\..\\\\examples\\\\data\\\\essay\\\\paul-graham-essay.txt', 'file_name': 'paul-graham-essay.txt', 'file_type': 'text/plain', 'file_size': 75395, 'creation_date': '2024-10-25', 'last_modified_date': '2024-09-16', 'content-hash': '137d977c2f2db8de725f8c0cc4a373fb9fc354ad934441b93806dae5fabd6d35'}, excluded_embed_metadata_keys=['file_name'], excluded_llm_metadata_keys=['file_name'], relationships={&lt;NodeRelationship.SOURCE: '1'&gt;: RelatedNodeInfo(node_id='05f5a125-612f-4398-87e1-07179ff75f62', node_type='4', metadata={'file_path': '..\\\\..\\\\..\\\\examples\\\\data\\\\essay\\\\paul-graham-essay.txt', 'file_name': 'paul-graham-essay.txt', 'file_type': 'text/plain', 'file_size': 75395, 'creation_date': '2024-10-25', 'last_modified_date': '2024-09-16'}, hash='b782bb2fb6802c1f0d21b68ab4fda7b88c64a6ebeaf5c06f1eb297ca11e14b9c'), &lt;NodeRelationship.PREVIOUS: '2'&gt;: RelatedNodeInfo(node_id='0d5735eb-1dc5-4279-b7fb-2f26dd200c3f', node_type='1', metadata={'file_path': '..\\\\..\\\\..\\\\examples\\\\data\\\\essay\\\\paul-graham-essay.txt', 'file_name': 'paul-graham-essay.txt', 'file_type': 'text/plain', 'file_size': 75395, 'creation_date': '2024-10-25', 'last_modified_date': '2024-09-16'}, hash='e0224365c33c5731457bc50d6ac3d9e411a02e249c62badaad08d1dfb4a59887'), &lt;NodeRelationship.NEXT: '3'&gt;: RelatedNodeInfo(node_id='e7e86a09-d861-420f-96cf-b317c6ae8b50', node_type='1', metadata={}, hash='c83f62854c3932c029eedccd0fb036de393c324863ac226d1712d73defc5a686')}, metadata_template='{key}: {value}', metadata_separator='\\n', text='The Lisp that John McCarthy invented, or more accurately discovered, is an answer to that question. [19]\\r\\n\\r\\nMcCarthy didn\\'t realize this Lisp could even be used to program computers till his grad student Steve Russell suggested it. Russell translated McCarthy\\'s interpreter into IBM 704 machine language, and from that point Lisp started also to be a programming language in the ordinary sense. But its origins as a model of computation gave it a power and elegance that other languages couldn\\'t match. It was this that attracted me in college, though I didn\\'t understand why at the time.\\r\\n\\r\\nMcCarthy\\'s 1960 Lisp did nothing more than interpret Lisp expressions. It was missing a lot of things you\\'d want in a programming language. So these had to be added, and when they were, they weren\\'t defined using McCarthy\\'s original axiomatic approach. That wouldn\\'t have been feasible at the time. McCarthy tested his interpreter by hand-simulating the execution of programs. But it was already getting close to the limit of interpreters you could test that way \u2014 indeed, there was a bug in it that McCarthy had overlooked. To test a more complicated interpreter, you\\'d have had to run it, and computers then weren\\'t powerful enough.\\r\\n\\r\\nNow they are, though. Now you could continue using McCarthy\\'s axiomatic approach till you\\'d defined a complete programming language. And as long as every change you made to McCarthy\\'s Lisp was a discoveredness-preserving transformation, you could, in principle, end up with a complete language that had this quality. Harder to do than to talk about, of course, but if it was possible in principle, why not try? So I decided to take a shot at it. It took 4 years, from March 26, 2015 to October 12, 2019. It was fortunate that I had a precisely defined goal, or it would have been hard to keep at it for so long.\\r\\n\\r\\nI wrote this new Lisp, called Bel, in itself in Arc. That may sound like a contradiction, but it\\'s an indication of the sort of trickery I had to engage in to make this work. By means of an egregious collection of hacks I managed to make something close enough to an interpreter written in itself that could actually run. Not fast, but fast enough to test.\\r\\n\\r\\nI had to ban myself from writing essays during most of this time, or I\\'d never have finished. In late 2015 I spent 3 months writing essays, and when I went back to working on Bel I could barely understand the code. Not so much because it was badly written as because the problem is so convoluted. When you\\'re working on an interpreter written in itself, it\\'s hard to keep track of what\\'s happening at what level, and errors can be practically encrypted by the time you get them.\\r\\n\\r\\nSo I said no more essays till Bel was done. But I told few people about Bel while I was working on it. So for years it must have seemed that I was doing nothing, when in fact I was working harder than I\\'d ever worked on anything. Occasionally after wrestling for hours with some gruesome bug I\\'d check Twitter or HN and see someone asking \"Does Paul Graham still code?\"\\r\\n\\r\\nWorking on Bel was hard but satisfying. I worked on it so intensively that at any given time I had a decent chunk of the code in my head and could write more there. I remember taking the boys to the coast on a sunny day in 2015 and figuring out how to deal with some problem involving continuations while I watched them play in the tide pools. It felt like I was doing life right. I remember that because I was slightly dismayed at how novel it felt. The good news is that I had more moments like this over the next few years.\\r\\n\\r\\nIn the summer of 2016 we moved to England. We wanted our kids to see what it was like living in another country, and since I was a British citizen by birth, that seemed the obvious choice. We only meant to stay for a year, but we liked it so much that we still live there. So most of Bel was written in England.\\r\\n\\r\\nIn the fall of 2019, Bel was finally finished. Like McCarthy\\'s original Lisp, it\\'s a spec rather than an implementation, although like McCarthy\\'s Lisp it\\'s a spec expressed as code.\\r\\n\\r\\nNow that I could write essays again, I wrote a bunch about topics I\\'d had stacked up. I kept writing essays through 2020, but I also started to think about other things I could work on. How should I choose what to do? Well, how had I chosen what to work on in the past?', mimetype='text/plain', start_char_idx=63054, end_char_idx=67413, metadata_seperator='\\n', text_template='{metadata_str}\\n\\n{content}'), '66064e0d4d6d3c79052410187680600adba09d4fa0dbd4ba103de12087ab9e96': TextNode(id_='66064e0d4d6d3c79052410187680600adba09d4fa0dbd4ba103de12087ab9e96', embedding=None, metadata={'file_path': '..\\\\..\\\\..\\\\examples\\\\data\\\\essay\\\\paul-graham-essay.txt', 'file_name': 'paul-graham-essay.txt', 'file_type': 'text/plain', 'file_size': 75395, 'creation_date': '2024-10-25', 'last_modified_date': '2024-09-16', 'content-hash': '66064e0d4d6d3c79052410187680600adba09d4fa0dbd4ba103de12087ab9e96'}, excluded_embed_metadata_keys=['file_name'], excluded_llm_metadata_keys=['file_name'], relationships={&lt;NodeRelationship.SOURCE: '1'&gt;: RelatedNodeInfo(node_id='05f5a125-612f-4398-87e1-07179ff75f62', node_type='4', metadata={'file_path': '..\\\\..\\\\..\\\\examples\\\\data\\\\essay\\\\paul-graham-essay.txt', 'file_name': 'paul-graham-essay.txt', 'file_type': 'text/plain', 'file_size': 75395, 'creation_date': '2024-10-25', 'last_modified_date': '2024-09-16'}, hash='b782bb2fb6802c1f0d21b68ab4fda7b88c64a6ebeaf5c06f1eb297ca11e14b9c'), &lt;NodeRelationship.PREVIOUS: '2'&gt;: RelatedNodeInfo(node_id='7ffbc0e4-89fb-4558-b60c-12f246ca1402', node_type='1', metadata={'file_path': '..\\\\..\\\\..\\\\examples\\\\data\\\\essay\\\\paul-graham-essay.txt', 'file_name': 'paul-graham-essay.txt', 'file_type': 'text/plain', 'file_size': 75395, 'creation_date': '2024-10-25', 'last_modified_date': '2024-09-16'}, hash='5bbc2f466862933264508272748b74afee1e1d1f6b6de5f44c09b02f0980bbcd'), &lt;NodeRelationship.NEXT: '3'&gt;: RelatedNodeInfo(node_id='c60265f3-73a4-464d-9278-f59766415c41', node_type='1', metadata={}, hash='315b557a64c2cf1ff3e96d617401b319c7880913243ac6aa8aab9869300af43f')}, metadata_template='{key}: {value}', metadata_separator='\\n', text=\"Like McCarthy's original Lisp, it's a spec rather than an implementation, although like McCarthy's Lisp it's a spec expressed as code.\\r\\n\\r\\nNow that I could write essays again, I wrote a bunch about topics I'd had stacked up. I kept writing essays through 2020, but I also started to think about other things I could work on. How should I choose what to do? Well, how had I chosen what to work on in the past? I wrote an essay for myself to answer that question, and I was surprised how long and messy the answer turned out to be. If this surprised me, who'd lived it, then I thought perhaps it would be interesting to other people, and encouraging to those with similarly messy lives. So I wrote a more detailed version for others to read, and this is the last sentence of it.\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\nNotes\\r\\n\\r\\n[1] My experience skipped a step in the evolution of computers: time-sharing machines with interactive OSes. I went straight from batch processing to microcomputers, which made microcomputers seem all the more exciting.\\r\\n\\r\\n[2] Italian words for abstract concepts can nearly always be predicted from their English cognates (except for occasional traps like polluzione). It's the everyday words that differ. So if you string together a lot of abstract concepts with a few simple verbs, you can make a little Italian go a long way.\\r\\n\\r\\n[3] I lived at Piazza San Felice 4, so my walk to the Accademia went straight down the spine of old Florence: past the Pitti, across the bridge, past Orsanmichele, between the Duomo and the Baptistery, and then up Via Ricasoli to Piazza San Marco. I saw Florence at street level in every possible condition, from empty dark winter evenings to sweltering summer days when the streets were packed with tourists.\\r\\n\\r\\n[4] You can of course paint people like still lives if you want to, and they're willing. That sort of portrait is arguably the apex of still life painting, though the long sitting does tend to produce pained expressions in the sitters.\\r\\n\\r\\n[5] Interleaf was one of many companies that had smart people and built impressive technology, and yet got crushed by Moore's Law. In the 1990s the exponential growth in the power of commodity (i.e. Intel) processors rolled up high-end, special-purpose hardware and software companies like a bulldozer.\\r\\n\\r\\n[6] The signature style seekers at RISD weren't specifically mercenary. In the art world, money and coolness are tightly coupled. Anything expensive comes to be seen as cool, and anything seen as cool will soon become equally expensive.\\r\\n\\r\\n[7] Technically the apartment wasn't rent-controlled but rent-stabilized, but this is a refinement only New Yorkers would know or care about. The point is that it was really cheap, less than half market price.\\r\\n\\r\\n[8] Most software you can launch as soon as it's done. But when the software is an online store builder and you're hosting the stores, if you don't have any users yet, that fact will be painfully obvious. So before we could launch publicly we had to launch privately, in the sense of recruiting an initial set of users and making sure they had decent-looking stores.\\r\\n\\r\\n[9] We'd had a code editor in Viaweb for users to define their own page styles. They didn't know it, but they were editing Lisp expressions underneath. But this wasn't an app editor, because the code ran when the merchants' sites were generated, not when shoppers visited them.\\r\\n\\r\\n[10] This was the first instance of what is now a familiar experience, and so was what happened next, when I read the comments and found they were full of angry people. How could I claim that Lisp was better than other languages? Weren't they all Turing complete? People who see the responses to essays I write sometimes tell me how sorry they feel for me, but I'm not exaggerating when I reply that it has always been like this, since the very beginning. It comes with the territory. An essay must tell readers things they don't already know, and some people dislike being told such things.\\r\\n\\r\\n[11] People put plenty of stuff on the internet in the 90s of course, but putting something online is not the same as publishing it online. Publishing online means you treat the online version as the (or at least a) primary version.\\r\\n\\r\\n[12] There is a general lesson here that our experience with Y Combinator also teaches: Customs continue to constrain you long after the restrictions that caused them have disappeared. Customary VC practice had once, like the customs about publishing essays, been based on real constraints.\", mimetype='text/plain', start_char_idx=67006, end_char_idx=71525, metadata_seperator='\\n', text_template='{metadata_str}\\n\\n{content}'), '1d9fdad2ba19763eb58380eac190d5839f288d6c7a98d167b95e5b59a271ceb4': TextNode(id_='1d9fdad2ba19763eb58380eac190d5839f288d6c7a98d167b95e5b59a271ceb4', embedding=None, metadata={'file_path': '..\\\\..\\\\..\\\\examples\\\\data\\\\essay\\\\paul-graham-essay.txt', 'file_name': 'paul-graham-essay.txt', 'file_type': 'text/plain', 'file_size': 75395, 'creation_date': '2024-10-25', 'last_modified_date': '2024-09-16', 'content-hash': '1d9fdad2ba19763eb58380eac190d5839f288d6c7a98d167b95e5b59a271ceb4'}, excluded_embed_metadata_keys=['file_name'], excluded_llm_metadata_keys=['file_name'], relationships={&lt;NodeRelationship.SOURCE: '1'&gt;: RelatedNodeInfo(node_id='05f5a125-612f-4398-87e1-07179ff75f62', node_type='4', metadata={'file_path': '..\\\\..\\\\..\\\\examples\\\\data\\\\essay\\\\paul-graham-essay.txt', 'file_name': 'paul-graham-essay.txt', 'file_type': 'text/plain', 'file_size': 75395, 'creation_date': '2024-10-25', 'last_modified_date': '2024-09-16'}, hash='b782bb2fb6802c1f0d21b68ab4fda7b88c64a6ebeaf5c06f1eb297ca11e14b9c'), &lt;NodeRelationship.PREVIOUS: '2'&gt;: RelatedNodeInfo(node_id='e7e86a09-d861-420f-96cf-b317c6ae8b50', node_type='1', metadata={'file_path': '..\\\\..\\\\..\\\\examples\\\\data\\\\essay\\\\paul-graham-essay.txt', 'file_name': 'paul-graham-essay.txt', 'file_type': 'text/plain', 'file_size': 75395, 'creation_date': '2024-10-25', 'last_modified_date': '2024-09-16'}, hash='a851ab89c001e7f8b1f4843215d0b06c0d8355618f51a1b160b6c8a241ce5571')}, metadata_template='{key}: {value}', metadata_separator='\\n', text='Publishing online means you treat the online version as the (or at least a) primary version.\\r\\n\\r\\n[12] There is a general lesson here that our experience with Y Combinator also teaches: Customs continue to constrain you long after the restrictions that caused them have disappeared. Customary VC practice had once, like the customs about publishing essays, been based on real constraints. Startups had once been much more expensive to start, and proportionally rare. Now they could be cheap and common, but the VCs\\' customs still reflected the old world, just as customs about writing essays still reflected the constraints of the print era.\\r\\n\\r\\nWhich in turn implies that people who are independent-minded (i.e. less influenced by custom) will have an advantage in fields affected by rapid change (where customs are more likely to be obsolete).\\r\\n\\r\\nHere\\'s an interesting point, though: you can\\'t always predict which fields will be affected by rapid change. Obviously software and venture capital will be, but who would have predicted that essay writing would be?\\r\\n\\r\\n[13] Y Combinator was not the original name. At first we were called Cambridge Seed. But we didn\\'t want a regional name, in case someone copied us in Silicon Valley, so we renamed ourselves after one of the coolest tricks in the lambda calculus, the Y combinator.\\r\\n\\r\\nI picked orange as our color partly because it\\'s the warmest, and partly because no VC used it. In 2005 all the VCs used staid colors like maroon, navy blue, and forest green, because they were trying to appeal to LPs, not founders. The YC logo itself is an inside joke: the Viaweb logo had been a white V on a red circle, so I made the YC logo a white Y on an orange square.\\r\\n\\r\\n[14] YC did become a fund for a couple years starting in 2009, because it was getting so big I could no longer afford to fund it personally. But after Heroku got bought we had enough money to go back to being self-funded.\\r\\n\\r\\n[15] I\\'ve never liked the term \"deal flow,\" because it implies that the number of new startups at any given time is fixed. This is not only false, but it\\'s the purpose of YC to falsify it, by causing startups to be founded that would not otherwise have existed.\\r\\n\\r\\n[16] She reports that they were all different shapes and sizes, because there was a run on air conditioners and she had to get whatever she could, but that they were all heavier than she could carry now.\\r\\n\\r\\n[17] Another problem with HN was a bizarre edge case that occurs when you both write essays and run a forum. When you run a forum, you\\'re assumed to see if not every conversation, at least every conversation involving you. And when you write essays, people post highly imaginative misinterpretations of them on forums. Individually these two phenomena are tedious but bearable, but the combination is disastrous. You actually have to respond to the misinterpretations, because the assumption that you\\'re present in the conversation means that not responding to any sufficiently upvoted misinterpretation reads as a tacit admission that it\\'s correct. But that in turn encourages more; anyone who wants to pick a fight with you senses that now is their chance.\\r\\n\\r\\n[18] The worst thing about leaving YC was not working with Jessica anymore. We\\'d been working on YC almost the whole time we\\'d known each other, and we\\'d neither tried nor wanted to separate it from our personal lives, so leaving was like pulling up a deeply rooted tree.\\r\\n\\r\\n[19] One way to get more precise about the concept of invented vs discovered is to talk about space aliens. Any sufficiently advanced alien civilization would certainly know about the Pythagorean theorem, for example. I believe, though with less certainty, that they would also know about the Lisp in McCarthy\\'s 1960 paper.\\r\\n\\r\\nBut if so there\\'s no reason to suppose that this is the limit of the language that might be known to them. Presumably aliens need numbers and errors and I/O too. So it seems likely there exists at least one path out of McCarthy\\'s Lisp along which discoveredness is preserved.\\r\\n\\r\\n\\r\\n\\r\\nThanks to Trevor Blackwell, John Collison, Patrick Collison, Daniel Gackle, Ralph Hazell, Jessica Livingston, Robert Morris, and Harj Taggar for reading drafts of this.', mimetype='text/plain', start_char_idx=71139, end_char_idx=75361, metadata_seperator='\\n', text_template='{metadata_str}\\n\\n{content}')}\n</pre> <ul> <li>To save the storage object we can use the <code>save</code> method, which takes the directory path as input. and saves the storage object to the specified directory.</li> </ul> In\u00a0[26]: Copied! <pre>storage.save(storage_dir)\n</pre> storage.save(storage_dir) <ul> <li>Now if we check the directory, we will see the following content in the directory.</li> </ul> In\u00a0[27]: Copied! <pre>os.listdir(storage_dir)\n</pre> os.listdir(storage_dir) Out[27]: <pre>['default__vector_store.json',\n 'docstore.json',\n 'graph_store.json',\n 'image__vector_store.json',\n 'index_store.json',\n 'metadata_index.csv']</pre> <ul> <li>Stores metadata about the documents in the index.</li> <li>Includes document IDs, text content, and associated metadata.</li> <li>If using a vector store, it may contain references to vector embeddings.</li> </ul> <ul> <li>Keeps track of how documents are indexed.</li> <li>Stores references to indexed nodes or hierarchical structures (e.g., tree-based indexes).</li> </ul> <ul> <li>Contains vector embeddings of indexed documents.</li> <li>If using a third-party vector database (like FAISS, Chroma, Pinecone), this file might store references instead of raw vectors.</li> </ul> <ul> <li>If you're using a hierarchical or graph-based index, this file stores relationships between indexed nodes.</li> </ul> In\u00a0[28]: Copied! <pre># NBVAL_IGNORE_OUTPUT\nstorage.load(storage_dir)\nlen(storage.node_id_list())\nstorage.document_metadata(as_dataframe=True)\n</pre> # NBVAL_IGNORE_OUTPUT storage.load(storage_dir) len(storage.node_id_list()) storage.document_metadata(as_dataframe=True) Out[28]: doc_id node_id file_name 0 05f5a125-612f-4398-87e1-07179ff75f62 c3c1026486ce099d6e2009463d6aa28e5ed2de38aa104f... paul-graham-essay.txt 1 05f5a125-612f-4398-87e1-07179ff75f62 f670b5a18ea03a062d03b6ca6f41052eaa16bfebff5d2e... paul-graham-essay.txt 2 05f5a125-612f-4398-87e1-07179ff75f62 ea09a6b38c5e26510bfccee3e598f41128d1d62c1c44c7... paul-graham-essay.txt 3 05f5a125-612f-4398-87e1-07179ff75f62 51c5863f38ba057bfd708e00d84ef775b9d310a720615c... paul-graham-essay.txt 4 05f5a125-612f-4398-87e1-07179ff75f62 39d0d972087a0a27d1d78373a523e54b422ff1a09927e8... paul-graham-essay.txt 5 05f5a125-612f-4398-87e1-07179ff75f62 27016ad9d966c839714639240dab8d24659d0cfb80fbdc... paul-graham-essay.txt 6 05f5a125-612f-4398-87e1-07179ff75f62 b9e6206f6fd191db1529b9204072776dd57ea631a0de16... paul-graham-essay.txt 7 05f5a125-612f-4398-87e1-07179ff75f62 0840f760932d975914e4b7e7e664c68673b52077db88c3... paul-graham-essay.txt 8 05f5a125-612f-4398-87e1-07179ff75f62 e75cae1d3d75c3180e79b23fff57c163ee2e02653e0dc3... paul-graham-essay.txt 9 05f5a125-612f-4398-87e1-07179ff75f62 60f93919033099369f277d230e6c8e5167c599aa0616b9... paul-graham-essay.txt 10 05f5a125-612f-4398-87e1-07179ff75f62 f564c2c3268d56432b2ab94b2b2ed6d65060451418e510... paul-graham-essay.txt 11 05f5a125-612f-4398-87e1-07179ff75f62 c389b1ad61a8c1fbd5a396679a7e1661aabcb6e323ef4f... paul-graham-essay.txt 12 05f5a125-612f-4398-87e1-07179ff75f62 8e897d50fbf2c6e0dd117d22428ec63fa43a55ccc7dd8a... paul-graham-essay.txt 13 05f5a125-612f-4398-87e1-07179ff75f62 039515cdd3a336166767ce31fb3e71fad518f28a8924af... paul-graham-essay.txt 14 05f5a125-612f-4398-87e1-07179ff75f62 20fc5f0a9f5e2597faea5e3aae6cd72a7cb20e1ff45aa5... paul-graham-essay.txt 15 05f5a125-612f-4398-87e1-07179ff75f62 b0dea2603a0d95b528d1c70e954c45a670d43ad7abcd72... paul-graham-essay.txt 16 05f5a125-612f-4398-87e1-07179ff75f62 137d977c2f2db8de725f8c0cc4a373fb9fc354ad934441... paul-graham-essay.txt 17 05f5a125-612f-4398-87e1-07179ff75f62 66064e0d4d6d3c79052410187680600adba09d4fa0dbd4... paul-graham-essay.txt 18 05f5a125-612f-4398-87e1-07179ff75f62 1d9fdad2ba19763eb58380eac190d5839f288d6c7a98d1... paul-graham-essay.txt <p><code>Storage</code> is a persistent storage interface that saves documents, indexes, and embeddings. It typically creates docstore.json, index_store.json, and vector_store.json, depending on the type of index. The saved files allow you to reload the index without re-processing the raw documents.</p>"},{"location":"examples/retrieval/build-storage.html#building-a-storage-from-text-file","title":"Building a Storage from Text File\u00b6","text":""},{"location":"examples/retrieval/build-storage.html#create-storage-object","title":"Create Storage Object\u00b6","text":""},{"location":"examples/retrieval/build-storage.html#read-documents","title":"Read Documents\u00b6","text":""},{"location":"examples/retrieval/build-storage.html#add-documents-to-the-storage","title":"Add Documents to the Storage\u00b6","text":""},{"location":"examples/retrieval/build-storage.html#attributesproperties","title":"Attributes/Properties\u00b6","text":""},{"location":"examples/retrieval/build-storage.html#1-nodes","title":"1- Nodes\u00b6","text":""},{"location":"examples/retrieval/build-storage.html#11-node_id_list","title":"1.1 - <code>node_id_list</code>\u00b6","text":""},{"location":"examples/retrieval/build-storage.html#12-node_metadata","title":"1.2 - <code>node_metadata</code>\u00b6","text":""},{"location":"examples/retrieval/build-storage.html#13-get_nodes_by_file_name","title":"1.3 - <code>get_nodes_by_file_name</code>\u00b6","text":""},{"location":"examples/retrieval/build-storage.html#14-delete_node","title":"1.4 - <code>delete_node</code>\u00b6","text":""},{"location":"examples/retrieval/build-storage.html#15-get_nodes_by_file_name","title":"1.5 - <code>get_nodes_by_file_name</code>\u00b6","text":""},{"location":"examples/retrieval/build-storage.html#2-documents","title":"2- Documents\u00b6","text":""},{"location":"examples/retrieval/build-storage.html#21-document_metadata","title":"2.1-<code>document_metadata</code>\u00b6","text":""},{"location":"examples/retrieval/build-storage.html#22-document_metadata-as-a-dataframe","title":"2.2-<code>document_metadata</code> as a DataFrame\u00b6","text":""},{"location":"examples/retrieval/build-storage.html#23-delete_document","title":"2.3-<code>delete_document</code>\u00b6","text":""},{"location":"examples/retrieval/build-storage.html#3-docstore","title":"3- Docstore\u00b6","text":""},{"location":"examples/retrieval/build-storage.html#save-the-storage-object","title":"Save the storage object\u00b6","text":""},{"location":"examples/retrieval/build-storage.html#1-docstorejson","title":"1-<code>docstore.json</code>\u00b6","text":""},{"location":"examples/retrieval/build-storage.html#2-index_storejson","title":"2-<code>index_store.json</code>\u00b6","text":""},{"location":"examples/retrieval/build-storage.html#3-vector_storejson","title":"3-<code>vector_store.json</code>\u00b6","text":""},{"location":"examples/retrieval/build-storage.html#4-graph_storejson","title":"4-<code>graph_store.json</code>\u00b6","text":""},{"location":"examples/retrieval/build-storage.html#load-the-storage-object-from-disk","title":"Load the storage object from Disk\u00b6","text":""},{"location":"examples/retrieval/build-storage.html#conclusion","title":"Conclusion\u00b6","text":""},{"location":"tools/llama-cpp.html","title":"Using Llama.cpp for Local LLM Inference","text":""},{"location":"tools/llama-cpp.html#introduction","title":"Introduction","text":"<p>Llama.cpp is a powerful and efficient inference framework for running LLaMA models locally on your machine. Unlike other tools such as Ollama, LM Studio, and similar LLM-serving solutions, Llama.cpp is designed to provide high-performance, low-resource inference while offering flexibility for different hardware architectures.</p>"},{"location":"tools/llama-cpp.html#how-llamacpp-compares-to-other-tools","title":"How Llama.cpp Compares to Other Tools","text":"<ul> <li>Llama.cpp vs. Ollama: Ollama provides a more user-friendly experience with built-in model management, whereas Llama.cpp gives you full control over your models and hardware acceleration.</li> <li>Llama.cpp vs. LM Studio: LM Studio offers a GUI for managing models, whereas Llama.cpp is focused on CLI and scripting automation for advanced users.</li> <li>Advantages of Llama.cpp:<ul> <li>Lightweight and highly optimized for CPU inference.</li> <li>Supports a variety of platforms including Windows, Linux, and macOS.</li> <li>Allows fine-tuned control over model execution, including running models as servers or embedding them into Python applications.</li> </ul> </li> </ul> <p>This tutorial will guide you through the installation process on different operating systems and show you how to interact with LLMs using Python and HTTP requests.</p>"},{"location":"tools/llama-cpp.html#installation","title":"Installation","text":"<p>For detailed build instructions, refer to the official guide: Llama.cpp Build Instructions in the following I will explain the different pre-built binaries that you can download from the llama.cpp github repository and how to install them on your machine  </p>"},{"location":"tools/llama-cpp.html#windows","title":"Windows","text":""},{"location":"tools/llama-cpp.html#choosing-the-right-binary","title":"Choosing the Right Binary","text":"<p>If you are downloading the pre-built binaries from the Llama.cpp releases page, choose the correct one based on your CPU and GPU capabilities:</p> <ul> <li><code>llama-b4671-bin-win-avx-x64.zip</code>: For CPUs with basic AVX support (Intel Sandy Bridge and later, AMD Bulldozer and later).</li> <li><code>llama-b4671-bin-win-avx2-x64.zip</code>: For CPUs with AVX2 support (Intel Haswell and later, AMD Excavator and later).</li> <li><code>llama-b4671-bin-win-avx512-x64.zip</code>: For CPUs with AVX-512 support (Intel Skylake-X and newer, limited to certain Intel CPUs).</li> <li><code>llama-b4671-bin-win-cuda-cu11.7-x64.zip</code> / <code>llama-b4671-bin-win-cuda-cu12.4-x64.zip</code>: For systems with NVIDIA GPUs that support CUDA. These versions utilize CUDA acceleration for improved inference speed.</li> </ul> <p>If you are unsure, start with AVX2, as most modern CPUs support it. If your CPU is older, use the AVX version. If you have a high-end CPU, use the AVX-512 version for better performance. If you have an NVIDIA GPU and want to leverage CUDA, use the appropriate CUDA version matching your installed CUDA driver version.</p> <p> </p>"},{"location":"tools/llama-cpp.html#linux-and-macos","title":"Linux and MacOS","text":"<p>For Linux, download <code>llama-b4671-bin-ubuntu-x64.zip</code>, and for macOS, use <code>llama-b4671-bin-macos-x64.zip</code> or <code>llama-b4671-bin-macos-arm64.zip</code>. Extract them to a directory and add that directory to your system's environment variables to run the executables from any location.</p> <p>you can also use the following installation using curl on linux <pre><code>curl -fsSL https://ollama.com/install.sh | sh\n</code></pre></p> <p>After Downloading the right files, unzip the files and add the extracted directory to your system's environment variables to run the executables from any location.</p>"},{"location":"tools/llama-cpp.html#understanding-gguf-ggml-hugging-face-and-lora-formats","title":"Understanding GGUF, GGML, Hugging Face, and LoRA Formats","text":""},{"location":"tools/llama-cpp.html#what-is-gguf","title":"What is GGUF?","text":"<p>GGUF (Generalized GGML Unified Format) is an optimized file format designed for running large language models efficiently using Llama.cpp and other frameworks. It improves compatibility and performance by standardizing how model weights and metadata are stored, allowing for efficient inference on different hardware architectures.</p>"},{"location":"tools/llama-cpp.html#what-is-ggml","title":"What is GGML?","text":"<p>GGML (Generalized Gradient Model Language) is an earlier format used for LLM inference that supports quantized models, making them more memory-efficient. However, GGUF has largely replaced GGML due to its enhanced features and improved performance.</p>"},{"location":"tools/llama-cpp.html#converting-ggml-to-gguf","title":"Converting GGML to GGUF","text":"<p>If you have a GGML model and need to use it with Llama.cpp, you can convert it to GGUF using a conversion script.</p> <p>Example command:</p> <p><pre><code>python convert_llama_ggml_to_gguf.py --input model.ggml --output model.gguf\n</code></pre> The convert_llama_ggml_to_gguf.py script exists in the llama.cpp github repository in the main directory.</p>"},{"location":"tools/llama-cpp.html#hugging-face-format","title":"Hugging Face Format","text":"<p>Hugging Face models are typically stored in PyTorch (<code>.bin</code> or <code>.safetensors</code>) format. These models can be converted into GGUF format using conversion scripts like <code>convert_hf_to_gguf.py</code>.</p>"},{"location":"tools/llama-cpp.html#lora-format","title":"LoRA Format","text":"<p>LoRA (Low-Rank Adaptation) is a fine-tuning technique used to efficiently adapt large language models to specific tasks. LoRA adapters store only the fine-tuned weight differences rather than modifying the entire model. To use LoRA with Llama.cpp, you may need to merge LoRA weights with a base model before conversion to GGUF using <code>convert_lora_to_gguf.py</code>.</p>"},{"location":"tools/llama-cpp.html#downloading-gguf-model-files-from-hugging-face","title":"Downloading GGUF Model Files from Hugging Face","text":"<p>You can download GGUF model files from Hugging Face and use them with Llama.cpp. Follow these steps:</p> <ol> <li> <p>Visit Hugging Face Models Page: Go to Hugging Face and search for LLaMA or any model compatible with GGUF. in this tutorial we will use the mistral gguf files downloaded from this link `https://huggingface.co/TheBloke/Mistral-7B-Instruct-v0.2-GGUF`</p> </li> <li> <p>Download the Model: Navigate to the model\u2019s repository and download the GGUF version of the model. If the GGUF format is not available, you may need to convert it manually as explained before.</p> </li> <li> <p>Move the File: Place the downloaded or converted GGUF model into your <code>models/</code> directory.</p> </li> </ol>"},{"location":"tools/llama-cpp.html#run-a-model","title":"Run a model:","text":"<p>Now we can use the command llama-cli that is one of the executables that we have downloaded, you can check all the flags that can be used with the llama-cli command to trigger the llm model using the gguf file.</p> <pre><code>llama-cli -m your-model.gguf\n</code></pre> <p> </p> <p> </p>"},{"location":"tools/llama-cpp.html#interacting-with-llamacpp-in-python","title":"Interacting with Llama.cpp in Python","text":""},{"location":"tools/llama-cpp.html#overview-of-llama-cpp-python","title":"Overview of <code>llama-cpp-python</code>","text":"<p>The <code>llama-cpp-python</code> package provides Python bindings for Llama.cpp, allowing users to:</p> <ul> <li>Load and run LLaMA models within Python applications.</li> <li>Perform text generation tasks using GGUF models.</li> <li>Customize inference parameters like temperature, top-k, and top-p for more controlled responses.</li> <li>Run models efficiently on both CPU and GPU (if CUDA is enabled).</li> <li>Host models as an API server for easy integration into applications.</li> </ul>"},{"location":"tools/llama-cpp.html#installing-required-packages","title":"Installing Required Packages","text":"<p>You can use <code>llama-cpp-python</code>, which provides Python bindings for llama.cpp:</p> <pre><code>pip install llama-cpp-python\n</code></pre>"},{"location":"tools/llama-cpp.html#running-inference-in-python","title":"Running Inference in Python","text":"<pre><code>from llama_cpp import Llama\n\nllm = Llama(model_path=\"mistral-7b-instruct-v0.2.Q2_K.gguf\")\nresponse = llm.create_chat_completion(\n  messages=[\n    {\n        \"role\": \"user\",\n        \"content\": \"how big is the sky\"\n    }\n])\nprint(response)\n</code></pre> <p>The response will be something like</p> <pre><code>{\n  'id': 'chatcmpl-e8879677-7335-464a-803b-30a15d68c015',\n  'object': 'chat.completion',\n  'created': 1739218403,\n  'model': 'mistral-7b-instruct-v0.2.Q2_K.gguf',\n  'choices': [\n    {\n      'index': 0,\n      'message':\n        {\n          'role': 'assistant',\n          'content': ' The size of the sky is not something that can be measured in a way that\n          is meaningful to us, as it is not a physical object with defined dimensions.\n          The sky is the expanse above the Earth, and it includes the atmosphere and the outer\n          space beyond. It goes on forever in all directions, as far as our current understanding\n          of the universe extends. So, we cannot assign a specific size to the sky.\n          Instead, we can describe the size of specific parts of the universe, such as the diameter\n          of a star or the distance between two galaxies.'\n        },\n        'logprobs': None,\n        'finish_reason': 'stop'\n    }\n  ],\n  'usage': {\n    'prompt_tokens': 13,\n    'completion_tokens': 112,\n    'total_tokens': 125\n    }\n}\n</code></pre>"},{"location":"tools/llama-cpp.html#downloading-and-using-gguf-models-with-llamafrom_pretrained","title":"Downloading and Using GGUF Models with Llama.from_pretrained","text":"<p>The Llama.from_pretrained method allows users to directly download GGUF models from Hugging Face and use them without manually downloading the files.</p> <p>Example:</p> <p><pre><code>from llama_cpp import Llama\n\n# Download and load a GGUF model directly from Hugging Face\nllm = Llama.from_pretrained(\n    repo_id=\"TheBloke/Mistral-7B-Instruct-v0.2-GGUF\",\n    filename=\"mistral-7b-instruct-v0.2.Q4_K_M.gguf\",\n)\n\nresponse = llm.create_chat_completion(\n  messages=[\n    {\"role\": \"user\", \"content\": \"How does a black hole work?\"}\n  ]\n)\nprint(response)\n</code></pre> This method simplifies the process by automatically downloading and loading the required model into memory, eliminating the need to manually place GGUF files in a directory. and loading the gguf file from that directory.</p> <ul> <li> <p>you can use the <code>cache_dir</code> parameter to specify the directory where the model will be downloaded and cached.</p> </li> <li> <p>the response will be something like <pre><code>{\n    'id': 'chatcmpl-6049f7cd-5e8a-45c0-a69c-e15c1b8842bc',\n    'object': 'chat.completion',\n    'created': 1739220646,\n    'model': 'models--TheBloke--Mistral-7B-Instruct-v0.2-GGUF\\\\snapshots\\\\3a6fbf4a41a1d52e415a4958cde6856d34b2db93\\\\.\\\\mistral-7b-instruct-v0.2.Q2_K.gguf',\n    'choices': [\n        {\n            'index': 0,\n            'message':\n                {\n                    'role': 'assistant',\n                    'content': ' A black hole is a region in space where the gravitational pull is so strong that nothing,\n                        not even light, can escape. The gravity of a black hole is so intense because matter is squeezed\n                        into a very small space.\\n\\nBlack holes are formed when a massive star collapses under its own\n                        gravity at the end of its life. The core collapses in on itself, forming a singularity,\n                        which is a point of infinite density and zero volume. The singularity is surrounded by an event\n                        horizon, which is the boundary of the black hole from which no escape is possible.\\n\\nThe\n                        intense gravity of a black hole warps the fabric of spacetime around it, causing a significant\n                        distortion in the paths of nearby stars and planets. This distortion is known as a gravitational\n                        singularity or a black hole.\\n\\nThe event horizon of a black hole is not a perfect sphere but\n                        rather an irregularly shaped surface that is constantly changing as the black hole interacts\n                        with nearby matter. The event horizon is also not a sharp boundary but rather a gradual\n                        transition from the outside universe to the inside of the black hole.\n                        Black holes are not completely black but rather emit a faint glow due to the energy released\n                        from the intense gravitational forces at work. This glow is known as Hawking radiation, named\n                        after the physicist Stephen Hawking, who first proposed the idea.\\n\\nBlack holes come in\n                        different sizes, from stellar-mass black holes, which can be as small as a few solar masses, to\n                        supermassive black holes, which can be millions or billions of solar masses. The supermassive\n                        black holes are thought to be at the center of most galaxies, including our own Milky Way.\n                        Black holes are fascinating objects in the universe, and scientists continue to study them to\n                        learn more about the fundamental laws of physics and the nature of spacetime.'\n                },\n                'logprobs': None,\n                'finish_reason': 'stop'\n            }\n        ],\n        'usage': {'prompt_tokens': 15, 'completion_tokens': 388, 'total_tokens': 403}\n    }\n}\n</code></pre></p> </li> </ul>"},{"location":"tools/llama-cpp.html#running-llamacpp-as-a-server","title":"Running Llama.cpp as a Server","text":"<p>You can run <code>llama.cpp</code> as a server and interact with it via API calls.</p>"},{"location":"tools/llama-cpp.html#start-the-server","title":"Start the Server","text":"<pre><code>llama-server -m mistral-7b-instruct-v0.2.Q2_K.gguf\n</code></pre> <p>launching the model as a server in your terminal will give the following response.</p> <p> </p>"},{"location":"tools/llama-cpp.html#send-requests-using-python","title":"Send Requests Using Python","text":"<pre><code>import requests\n\n# Define the API endpoint\nurl = \"http://localhost:8000/completion\"\n\n# Define the payload\npayload = {\n    \"model\": \"mistral-7b-instruct-v0.2.Q4_K_M.gguf\",\n    \"prompt\": \"How big is the sky?\",\n    \"temperature\": 0.7,\n    \"max_tokens\": 50\n}\n\nheaders = {\"Content-Type\": \"application/json\"}\ntry:\n    response = requests.post(url, json=payload, headers=headers)\n\n    # Check if the request was successful\n    if response.status_code == 200:\n        # Parse the response JSON\n        response_data = response.json()\n\n        # Extract the result from the response\n        choices = response_data.get(\"choices\", [])\n        if choices:\n            result = choices[0].get(\"text\", \"\")\n            print(\"Response:\", result)\n        else:\n            print(\"No choices found in the response.\")\n    else:\n        print(f\"Request failed with status code {response.status_code}: {response.text}\")\nexcept Exception as e:\n    print(f\"Error occurred: {e}\")\n</code></pre> <p>The response will be something like</p> <pre><code>Response:\nThe sky is not a tangible object and does not have physical dimensions, so it cannot be measured or quantified in the same way that we measure and quantify objects with size or dimensions. The sky is simply the vast expanse of\n</code></pre>"},{"location":"tools/llama-cpp.html#send-requests-from-terminal-linuxmacos-or-powershell-windows","title":"Send Requests from Terminal (Linux/macOS) or PowerShell (Windows)","text":"<pre><code>curl -X POST \"http://localhost:8000/completion\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\"prompt\": \"Tell me a fun fact.\", \"max_tokens\": 50}'\n</code></pre>"},{"location":"tools/llama-cpp.html#conclusion","title":"Conclusion","text":"<p>This tutorial covered installing, running, and interacting with Llama.cpp on different platforms. You can now integrate Llama models into your applications for local inference and API-based interactions.</p>"},{"location":"tools/ollama.html","title":"Running a Local LLM using Ollama","text":"<ul> <li>Ollama is a tool for running large language models (LLMs) locally on your machine. It allows you to download, run,   and interact with various LLMs without relying on cloud-based APIs.</li> <li>Ollama is designed for privacy, performance, and ease of use, making it ideal for offline inference.</li> </ul> <p>Key Features of Ollama - Local Execution \u2013 Runs directly on your computer without requiring an internet connection. - Supports Multiple Models \u2013 Includes Mistral, LLaMA 2, Gemma, and more. - GPU Acceleration \u2013 Uses CUDA (NVIDIA) or Metal (Mac) for faster performance. - API Interface \u2013 Exposes a simple HTTP API for easy integration with applications. - CLI-Based Interaction \u2013 Allows running inference from the command line.</p>"},{"location":"tools/ollama.html#1-installation-of-ollama","title":"1. Installation of Ollama","text":""},{"location":"tools/ollama.html#windows","title":"Windows","text":"<ol> <li>Download the Installer    Visit Ollama's website and download the Windows installer.</li> <li> <p>Run the Installer</p> </li> <li> <p>Double-click the downloaded <code>.exe</code> file.</p> </li> <li>Follow the installation prompts.</li> <li>Restart your terminal after installation.</li> <li>Verify Installation    Open PowerShell or Command Prompt and run:</li> </ol> <pre><code>ollama --version\n</code></pre> <p>This should return the installed version.</p> <p> </p>"},{"location":"tools/ollama.html#macos","title":"macOS","text":"<ol> <li>Install via Homebrew</li> </ol> <p><pre><code>brew install ollama\n</code></pre> 2. Verify Installation</p> <pre><code>ollama --version\n</code></pre>"},{"location":"tools/ollama.html#linux","title":"Linux","text":"<ol> <li>Install via Curl</li> </ol> <p><pre><code>curl -fsSL https://ollama.com/install.sh | sh\n</code></pre> 2. Verify Installation</p> <pre><code>ollama --version\n</code></pre>"},{"location":"tools/ollama.html#2-downloading-and-managing-models","title":"2. Downloading and Managing Models","text":""},{"location":"tools/ollama.html#list-available-models","title":"List Available Models","text":"<pre><code>ollama list\n</code></pre>"},{"location":"tools/ollama.html#download-a-model","title":"Download a Model","text":"<p>First, you can check the available models at https://ollama.com/library and run the following command to download a model:</p> <pre><code>ollama pull mistral\nollama pull gemma\nollama pull llama2\n</code></pre> <p> </p> <ul> <li>When a model is downloaded using Ollama, it is stored in the <code>~/.ollama/models/</code> directory. The model files are located in a subdirectory called <code>blobs</code>. The model's manifest is available in the <code>~/.ollama/models/manifests/registry.ollama.ai/library/&lt;model&gt;/latest</code> file.</li> </ul> <p> </p>"},{"location":"tools/ollama.html#remove-a-model","title":"Remove a Model","text":"<pre><code>ollama rm llama3\n</code></pre>"},{"location":"tools/ollama.html#3-running-ollama-locally","title":"3. Running Ollama Locally","text":""},{"location":"tools/ollama.html#start-the-ollama-server","title":"Start the Ollama Server","text":"<p>Run:</p> <p><pre><code>ollama serve\n</code></pre> you will get something like</p> <pre><code>Windows PowerShell\nCopyright (C) Microsoft Corporation. All rights reserved.\n\nInstall the latest PowerShell for new features and improvements! https://aka.ms/PSWindows\n\nLoading personal and system profiles took 2774ms.\n(llama-utils-l7lRCPhg-py3.12)(base) C:\\gdrive\\algorithms\\AI\\llms\\llama-utils git:[dev/tools-documentations]\nollama serve\n2025/02/01 20:05:46 routes.go:1187: INFO server config env=\"map[CUDA_VISIBLE_DEVICES: GPU_DEVICE_ORDINAL: HIP_VISIBLE_DEVICES: HSA_OVERRIDE_GFX_VERSION: HTTPS_PROXY: HTTP_PROXY: NO_PROXY: OLLAMA_DEBUG:false OLLAMA_FLASH_ATTENTION:false OLLAMA_GPU_OVERHEAD:0 OLLAMA_HOST:http://127.0.0.1:11434 OLLAMA_INTEL_GPU:false OLLAMA_KEEP_ALIVE:5m0s OLLAMA_KV_CACHE_TYPE: OLLAMA_LLM_LIBRARY: OLLAMA_LOAD_TIMEOUT:5m0s OLLAMA_MAX_LOADED_MODELS:0 OLLAMA_MAX_QUEUE:512 OLLAMA_MODELS:C:\\\\Users\\\\eng_m\\\\.ollama\\\\models OLLAMA_MULTIUSER_CACHE:false OLLAMA_NOHISTORY:false OLLAMA_NOPRUNE:false OLLAMA_NUM_PARALLEL:0 OLLAMA_ORIGINS:[http://localhost https://localhost http://localhost:* https://localhost:* http://127.0.0.1 https://127.0.0.1 http://127.0.0.1:* https://127.0.0.1:* http://0.0.0.0 https://0.0.0.0 http://0.0.0.0:* https://0.0.0.0:* app://* file://* tauri://* vscode-webview://*] OLLAMA_SCHED_SPREAD:false ROCR_VISIBLE_DEVICES:]\"\ntime=2025-02-01T20:05:46.724+01:00 level=INFO source=images.go:432 msg=\"total blobs: 31\"\ntime=2025-02-01T20:05:46.726+01:00 level=INFO source=images.go:439 msg=\"total unused blobs removed: 0\"\ntime=2025-02-01T20:05:46.728+01:00 level=INFO source=routes.go:1238 msg=\"Listening on 127.0.0.1:11434 (version 0.5.7)\"\ntime=2025-02-01T20:05:46.729+01:00 level=INFO source=routes.go:1267 msg=\"Dynamic LLM libraries\" runners=\"[cuda_v12_avx rocm_avx cpu cpu_avx cpu_avx2 cuda_v11_avx]\"\ntime=2025-02-01T20:05:46.729+01:00 level=INFO source=gpu.go:226 msg=\"looking for compatible GPUs\"\ntime=2025-02-01T20:05:46.729+01:00 level=INFO source=gpu_windows.go:167 msg=packages count=1\ntime=2025-02-01T20:05:46.729+01:00 level=INFO source=gpu_windows.go:214 msg=\"\" package=0 cores=8 efficiency=0 threads=16\ntime=2025-02-01T20:05:46.956+01:00 level=INFO source=gpu.go:334 msg=\"detected OS VRAM overhead\" id=GPU-04f76f9a-be0a-544b-9a6f-8607b8d0a9ab library=cuda compute=8.6 driver=12.6 name=\"NVIDIA GeForce RTX 3060 Ti\" overhead=\"283.2 MiB\"\ntime=2025-02-01T20:05:46.959+01:00 level=INFO source=types.go:131 msg=\"inference compute\" id=GPU-04f76f9a-be0a-544b-9a6f-8607b8d0a9ab library=cuda variant=v12 compute=8.6 driver=12.6 name=\"NVIDIA GeForce RTX 3060 Ti\"\n</code></pre> <p> </p> <p>Check if the server is running:</p> <pre><code>ps aux | grep ollama\n</code></pre> <p>for Windows use:</p> <pre><code>tasklist | findstr /i \"ollama\"\n</code></pre> <p>you will get something similar to the following <pre><code>tasklist | findstr /i \"ollama\"\nollama.exe                   18460 Console                    1     48,644 K\n</code></pre></p>"},{"location":"tools/ollama.html#configure-gpu-acceleration","title":"Configure GPU Acceleration","text":"<p>If your system supports CUDA, Ollama will use the GPU automatically. You can check GPU usage via:</p> <pre><code>nvidia-smi\n</code></pre> <p>To force CPU usage:</p> <p><pre><code>OLLAMA_USE_CPU=1 ollama run mistral\n</code></pre> for Windows use:</p> <pre><code>set OLLAMA_USE_CPU=1\nollama run mistral  \n</code></pre>"},{"location":"tools/ollama.html#troubleshooting","title":"Troubleshooting","text":"<ul> <li>If <code>ollama</code> commands are not found, restart your shell or check your <code>$PATH</code>: <pre><code>echo $PATH\n</code></pre></li> <li>For permission issues, try running: <pre><code>sudo ollama serve\n</code></pre></li> </ul>"},{"location":"tools/ollama.html#4-interacting-with-ollama-via-cli","title":"4. Interacting with Ollama via CLI","text":""},{"location":"tools/ollama.html#basic-inference","title":"Basic Inference","text":"<pre><code>ollama run mistral\n</code></pre> <p>to exit type <pre><code>/bye\n</code></pre></p> <p>you can also run the following command to get the response from the model directly</p> <pre><code>ollama run mistral \"What is the capital of France?\"\n</code></pre> <p>The above command will return the following response</p> <pre><code>Paris is the capital of France.\n</code></pre>"},{"location":"tools/ollama.html#5-using-ollama-as-an-api","title":"5. Using Ollama as an API","text":""},{"location":"tools/ollama.html#starting-the-api","title":"Starting the API","text":"<p>Run:</p> <pre><code>ollama serve\n</code></pre>"},{"location":"tools/ollama.html#1making-a-request-via-curl","title":"1.Making a Request via <code>curl</code>","text":"<p><pre><code>curl http://localhost:11434/api/generate -d '{\n  \"model\": \"mistral\",\n  \"prompt\": \"Tell me a joke\"\n}'\n</code></pre> for command terminal in Windows use: <pre><code>curl -X POST \"http://127.0.0.1:11434/api/generate\" -H \"Content-Type: application/json\" -d \"{\\\"model\\\": \\\"mistral\\\", \\\"prompt\\\": \\\"Tell me a short fact about AI\\\", \\\"options\\\": {\\\"max_tokens\\\": 50}}\"\n</code></pre></p> <p>The response will be similar to:</p> <pre><code>C:\\Users\\my-user-name&gt;curl -X POST \"http://127.0.0.1:11434/api/generate\" -H \"Content-Type: application/json\" -d \"\n{\\\"model\\\": \\\"mistral\\\", \\\"prompt\\\": \\\"Tell me a short fact about AI\\\", \\\"options\\\": {\\\"max_tokens\\\": 50}}\"\n{\"model\":\"mistral\",\"created_at\":\"2025-02-01T21:01:25.9015572Z\",\"response\":\" Art\",\"done\":false}\n{\"model\":\"mistral\",\"created_at\":\"2025-02-01T21:01:25.9428293Z\",\"response\":\"ificial\",\"done\":false}\n{\"model\":\"mistral\",\"created_at\":\"2025-02-01T21:01:25.9610394Z\",\"response\":\" Intelligence\",\"done\":false}\n{\"model\":\"mistral\",\"created_at\":\"2025-02-01T21:01:25.9747797Z\",\"response\":\" (\",\"done\":false}\n{\"model\":\"mistral\",\"created_at\":\"2025-02-01T21:01:25.9880321Z\",\"response\":\"AI\",\"done\":false}\n{\"model\":\"mistral\",\"created_at\":\"2025-02-01T21:01:26.0026846Z\",\"response\":\")\",\"done\":false}\n{\"model\":\"mistral\",\"created_at\":\"2025-02-01T21:01:26.017711Z\",\"response\":\" has\",\"done\":false}\n{\"model\":\"mistral\",\"created_at\":\"2025-02-01T21:01:26.0311171Z\",\"response\":\" the\",\"done\":false}\n{\"model\":\"mistral\",\"created_at\":\"2025-02-01T21:01:26.0447043Z\",\"response\":\" capability\",\"done\":false}\n{\"model\":\"mistral\",\"created_at\":\"2025-02-01T21:01:26.0593169Z\",\"response\":\" to\",\"done\":false}\n{\"model\":\"mistral\",\"created_at\":\"2025-02-01T21:01:26.0724141Z\",\"response\":\" learn\",\"done\":false}\n{\"model\":\"mistral\",\"created_at\":\"2025-02-01T21:01:26.0859434Z\",\"response\":\" from\",\"done\":false}\n{\"model\":\"mistral\",\"created_at\":\"2025-02-01T21:01:26.1004478Z\",\"response\":\" its\",\"done\":false}\n{\"model\":\"mistral\",\"created_at\":\"2025-02-01T21:01:26.1138166Z\",\"response\":\" experiences\",\"done\":false}\n{\"model\":\"mistral\",\"created_at\":\"2025-02-01T21:01:26.1279841Z\",\"response\":\",\",\"done\":false}\n{\"model\":\"mistral\",\"created_at\":\"2025-02-01T21:01:26.1404762Z\",\"response\":\" adjust\",\"done\":false}\n{\"model\":\"mistral\",\"created_at\":\"2025-02-01T21:01:26.1544505Z\",\"response\":\" its\",\"done\":false}\n{\"model\":\"mistral\",\"created_at\":\"2025-02-01T21:01:26.1684524Z\",\"response\":\" behavior\",\"done\":false}\n{\"model\":\"mistral\",\"created_at\":\"2025-02-01T21:01:26.1826811Z\",\"response\":\",\",\"done\":false}\n{\"model\":\"mistral\",\"created_at\":\"2025-02-01T21:01:26.1958623Z\",\"response\":\" and\",\"done\":false}\n{\"model\":\"mistral\",\"created_at\":\"2025-02-01T21:01:26.2081325Z\",\"response\":\" improve\",\"done\":false}\n{\"model\":\"mistral\",\"created_at\":\"2025-02-01T21:01:26.2259143Z\",\"response\":\" its\",\"done\":false}\n{\"model\":\"mistral\",\"created_at\":\"2025-02-01T21:01:26.2384732Z\",\"response\":\" performance\",\"done\":false}\n{\"model\":\"mistral\",\"created_at\":\"2025-02-01T21:01:26.25283Z\",\"response\":\" based\",\"done\":false}\n{\"model\":\"mistral\",\"created_at\":\"2025-02-01T21:01:26.2662188Z\",\"response\":\" on\",\"done\":false}\n{\"model\":\"mistral\",\"created_at\":\"2025-02-01T21:01:26.2807515Z\",\"response\":\" that\",\"done\":false}\n{\"model\":\"mistral\",\"created_at\":\"2025-02-01T21:01:26.2942798Z\",\"response\":\" learning\",\"done\":false}\n{\"model\":\"mistral\",\"created_at\":\"2025-02-01T21:01:26.3073516Z\",\"response\":\".\",\"done\":false}\n{\"model\":\"mistral\",\"created_at\":\"2025-02-01T21:01:26.3217636Z\",\"response\":\" This\",\"done\":false}\n{\"model\":\"mistral\",\"created_at\":\"2025-02-01T21:01:26.3351073Z\",\"response\":\" is\",\"done\":false}\n{\"model\":\"mistral\",\"created_at\":\"2025-02-01T21:01:26.349646Z\",\"response\":\" known\",\"done\":false}\n{\"model\":\"mistral\",\"created_at\":\"2025-02-01T21:01:26.3629003Z\",\"response\":\" as\",\"done\":false}\n{\"model\":\"mistral\",\"created_at\":\"2025-02-01T21:01:26.3757784Z\",\"response\":\" machine\",\"done\":false}\n{\"model\":\"mistral\",\"created_at\":\"2025-02-01T21:01:26.3892467Z\",\"response\":\" learning\",\"done\":false}\n{\"model\":\"mistral\",\"created_at\":\"2025-02-01T21:01:26.4030308Z\",\"response\":\",\",\"done\":false}\n{\"model\":\"mistral\",\"created_at\":\"2025-02-01T21:01:26.4183595Z\",\"response\":\" one\",\"done\":false}\n{\"model\":\"mistral\",\"created_at\":\"2025-02-01T21:01:26.4317698Z\",\"response\":\" of\",\"done\":false}\n{\"model\":\"mistral\",\"created_at\":\"2025-02-01T21:01:26.4465969Z\",\"response\":\" the\",\"done\":false}\n{\"model\":\"mistral\",\"created_at\":\"2025-02-01T21:01:26.4595035Z\",\"response\":\" sub\",\"done\":false}\n{\"model\":\"mistral\",\"created_at\":\"2025-02-01T21:01:26.473006Z\",\"response\":\"fields\",\"done\":false}\n{\"model\":\"mistral\",\"created_at\":\"2025-02-01T21:01:26.4876476Z\",\"response\":\" of\",\"done\":false}\n{\"model\":\"mistral\",\"created_at\":\"2025-02-01T21:01:26.5008632Z\",\"response\":\" AI\",\"done\":false}\n{\"model\":\"mistral\",\"created_at\":\"2025-02-01T21:01:26.5142572Z\",\"response\":\".\",\"done\":false}\n{\"model\":\"mistral\",\"created_at\":\"2025-02-01T21:01:26.5306917Z\",\"response\":\"\",\"done\":true,\"done_reason\":\"stop\",\"context\":[3,29473,16027,1296,1032,3253,2407,1452,16875,4,1027,4719,15541,23859,1093,12509,29499,1427,1040,22136,1066,3590,1245,1639,9789,29493,8160,1639,6942,29493,1072,5684,1639,5165,3586,1124,1137,5936,29491,1619,1117,3419,1158,6367,5936,29493,1392,1070,1040,1851,8202,1070,16875,29491],\"total_duration\":4969300700,\"load_duration\":3858876600,\"prompt_eval_count\":12,\"prompt_eval_duration\":470000000,\"eval_count\":44,\"eval_duration\":630000000}\n</code></pre>"},{"location":"tools/ollama.html#options","title":"Options","text":"<ul> <li><code>model</code>: The LLM model to use (e.g., <code>mistral</code>, <code>gemma</code>, <code>llama2</code>).</li> <li><code>prompt</code>: The input text or query for the model.</li> <li><code>options</code>: Additional parameters like <code>max_tokens</code>, <code>temperature</code>, etc.</li> <li><code>max_tokens</code>: The maximum number of tokens to generate in the response.</li> <li><code>stream</code>: Whether to stream the response (default: <code>false</code>). If <code>true</code>, the response will be streamed in chunks.</li> <li><code>temperature</code>: Controls the randomness of the output (default: <code>0.7</code>).</li> <li><code>top_p</code>: Filters the tokens to consider based on their cumulative probability (default: <code>0.9</code>).</li> <li><code>top_k</code>: Filters the tokens to consider based on their likelihood (default: <code>50</code>).</li> <li><code>stop</code>: A list of tokens at which the model should stop generating text.</li> <li><code>n</code>: The number of completions to generate (default: <code>1</code>).</li> <li><code>return_full</code>: Whether to return the full response context (default: <code>false</code>).</li> <li><code>return_prompt</code>: Whether to return the prompt in the response (default: <code>false</code>).</li> <li><code>return_options</code>: Whether to return the options in the response (default: <code>false</code>).</li> <li><code>return_context</code>: Whether to return the context in the response (default: <code>false</code>).</li> <li><code>return_duration</code>: Whether to return the duration in the response (default: <code>false</code>).</li> <li><code>return_eval_count</code>: Whether to return the evaluation count in the response (default: <code>false</code>).</li> <li><code>return_eval_duration</code>: Whether to return the evaluation duration in the response (default: <code>false</code>).</li> <li><code>return_total_duration</code>: Whether to return the total duration in the response (default: <code>false</code>).</li> <li><code>return_load_duration</code>: Whether to return the load duration in the response (default: <code>false</code>).</li> <li><code>return_done</code>: Whether to return the done status in the response (default: <code>false</code>).</li> <li><code>return_done_reason</code>: Whether to return the done reason in the response (default: <code>false</code>).</li> <li><code>return_error</code>: Whether to return the error in the response (default: <code>false</code>).</li> <li><code>return_error_message</code>: Whether to return the error message in the response (default: <code>false</code>).</li> <li> </li> </ul>"},{"location":"tools/ollama.html#return_error_traceback-whether-to-return-the-error-traceback-in-the-response-default-false","title":"<code>return_error_traceback</code>: Whether to return the error traceback in the response (default: <code>false</code>).","text":""},{"location":"tools/ollama.html#2using-python-requests","title":"2.Using Python (<code>requests</code>)","text":"<pre><code>import requests\n\nurl = \"http://localhost:11434/api/generate\"\ndata = {\"model\": \"mistral\", \"prompt\": \"Tell me a joke\"}\n\nresponse = requests.post(url, json=data)\nprint(response.json())\n</code></pre>"},{"location":"tools/ollama.html#6-integrating-ollama-with-llama-index","title":"6. Integrating Ollama with <code>llama-index</code>","text":""},{"location":"tools/ollama.html#install-dependencies","title":"Install Dependencies","text":"<pre><code>pip install llama-index-llms-ollama\n</code></pre>"},{"location":"tools/ollama.html#configuring-llama-index","title":"Configuring <code>llama-index</code>","text":"<pre><code>from llama_index.llms.ollama import Ollama\nfrom llama_index.core import Settings\n\nllm = Ollama(model=\"mistral\")\nSettings.llm = llm\n</code></pre>"},{"location":"tools/ollama.html#querying-ollama-via-llama-index","title":"Querying Ollama via <code>llama-index</code>","text":"<pre><code>response = llm.complete(\"What is the capital of the Netherlands?\")\nprint(response)\n</code></pre> <pre><code>The capital city of the Netherlands is Amsterdam. However, it's important to note that The Hague (Den Haag) serves as the seat of government, hosting several key institutions such as the Dutch Parliament and the Supreme Court. Amsterdam, on the other hand, is known for its vibrant culture and economic significance.\n</code></pre>"},{"location":"tools/ollama.html#7-performance-optimization","title":"7. Performance Optimization","text":""},{"location":"tools/ollama.html#1gpu-acceleration","title":"1.GPU Acceleration","text":"<ul> <li>Ensure you have CUDA installed: <pre><code>nvidia-smi\n</code></pre></li> <li>Run Ollama with GPU support: <pre><code>OLLAMA_USE_CUDA=1 ollama serve\n</code></pre> for Windows use: <pre><code>set OLLAMA_USE_CUDA=1\nollama serve\n</code></pre></li> </ul>"},{"location":"tools/ollama.html#2change-port-number","title":"2.Change port number","text":"<ul> <li>To change the port number, use the <code>OLLAMA_HOST</code> environment variable to specify the new port: <pre><code>export OLLAMA_HOST=127.0.0.1:8081\nollama serve\n</code></pre> for Windows use: <pre><code>set OLLAMA_HOST=127.0.0.1:8081\nollama serve\n</code></pre> the previous command will change the port to <code>8081</code> from the default port <code>11434</code>. the output will be similar to the following <pre><code>C:\\Users\\eng_m&gt;set OLLAMA_HOST=http://127.0.0.1:8081\n\nC:\\Users\\eng_m&gt;ollama serve\n2025/02/01 22:34:25 routes.go:1187: INFO server config env=\"map[CUDA_VISIBLE_DEVICES: GPU_DEVICE_ORDINAL: HIP_VISIBLE_DEVICES: HSA_OVERRIDE_GFX_VERSION: HTTPS_PROXY: HTTP_PROXY: NO_PROXY: OLLAMA_DEBUG:false OLLAMA_FLASH_ATTENTION:false OLLAMA_GPU_OVERHEAD:0 OLLAMA_HOST:http://127.0.0.1:8081 OLLAMA_INTEL_GPU:false OLLAMA_KEEP_ALIVE:5m0s OLLAMA_KV_CACHE_TYPE: OLLAMA_LLM_LIBRARY: OLLAMA_LOAD_TIMEOUT:5m0s OLLAMA_MAX_LOADED_MODELS:0 OLLAMA_MAX_QUEUE:512 OLLAMA_MODELS:C:\\\\Users\\\\eng_m\\\\.ollama\\\\models OLLAMA_MULTIUSER_CACHE:false OLLAMA_NOHISTORY:false OLLAMA_NOPRUNE:false OLLAMA_NUM_PARALLEL:0 OLLAMA_ORIGINS:[http://localhost https://localhost http://localhost:* https://localhost:* http://127.0.0.1 https://127.0.0.1 http://127.0.0.1:* https://127.0.0.1:* http://0.0.0.0 https://0.0.0.0 http://0.0.0.0:* https://0.0.0.0:* app://* file://* tauri://* vscode-webview://*] OLLAMA_SCHED_SPREAD:false ROCR_VISIBLE_DEVICES:]\"\ntime=2025-02-01T22:34:25.996+01:00 level=INFO source=images.go:432 msg=\"total blobs: 26\"\ntime=2025-02-01T22:34:25.998+01:00 level=INFO source=images.go:439 msg=\"total unused blobs removed: 0\"\ntime=2025-02-01T22:34:26.000+01:00 level=INFO source=routes.go:1238 msg=\"Listening on 127.0.0.1:8081 (version 0.5.7)\"\ntime=2025-02-01T22:34:26.001+01:00 level=INFO source=routes.go:1267 msg=\"Dynamic LLM libraries\" runners=\"[cpu cpu_avx cpu_avx2 cuda_v11_avx cuda_v12_avx rocm_avx]\"\ntime=2025-02-01T22:34:26.001+01:00 level=INFO source=gpu.go:226 msg=\"looking for compatible GPUs\"\ntime=2025-02-01T22:34:26.002+01:00 level=INFO source=gpu_windows.go:167 msg=packages count=1\ntime=2025-02-01T22:34:26.002+01:00 level=INFO source=gpu_windows.go:214 msg=\"\" package=0 cores=8 efficiency=0 threads=16\ntime=2025-02-01T22:34:26.188+01:00 level=INFO source=types.go:131 msg=\"inference compute\" id=GPU-04f76f9a-be0a-544b-9a6f-8607b8d0a9ab library=cuda variant=v12 compute=8.6 driver=12.6 name=\"NVIDIA GeForce RTX 3060 Ti\" total=\"8.0 GiB\" available=\"7.0 GiB\"\n</code></pre></li> </ul>"},{"location":"tools/ollama.html#2change-cache-directory","title":"2.Change cache directory","text":""},{"location":"tools/ollama.html#change-default-ollama-directory-symlink","title":"Change default <code>.ollama</code> directory (Symlink)","text":"<ul> <li> <p>To change the cache directory from Windows directory to a directory that exist in a network, you can symlink the <code>~/. ollama</code> directory to a different location.</p> </li> <li> <p>First move the <code>.ollama</code> directory to the new location: <pre><code>Move-Item \"$env:USERPROFILE\\.ollama\" \"&lt;your-new-directory&gt;\" -Force\n</code></pre></p> </li> <li> <p>Second, create a symlink to the new location: <pre><code>New-Item -ItemType SymbolicLink -Path \"$env:USERPROFILE\\.ollama\" -Target \"&lt;your-new-directory&gt;\"\n</code></pre> PowerShell will complain if the old director in your user profile exists, so make sure you move it to the new directory as shown above.</p> </li> <li> <p>Restart Ollama to apply the changes.</p> </li> <li>to verify the changes, you can run the <code>serve</code> or the <code>list</code> command from ollama. <pre><code>ollama serve\n</code></pre></li> </ul>"},{"location":"tools/ollama.html#8-common-issues-troubleshooting","title":"8. Common Issues &amp; Troubleshooting","text":"Issue Solution Command not found Restart the terminal, check<code>$PATH</code>. GPU not used Check<code>nvidia-smi</code>, install CUDA drivers. API not responding Ensure<code>ollama serve</code> is running. <p>This guide provides everything needed to run Ollama locally and integrate it with <code>llama-index</code>. Let me know if you need further customization! \ud83d\ude80</p>"},{"location":"tools/ollama.html#9errors","title":"9.Errors","text":""},{"location":"tools/ollama.html#1address-not-permitted","title":"1.address not permitted","text":"<p>You might face the following error when you run the <code>ollama serve</code> command <pre><code>Error: listen tcp 127.0.0.1:11434: bind: Only one usage of each socket address (protocol/network address/port) is normally permitted.\n</code></pre> This error is due to the port <code>11434</code> is already in use, to solve this error, you can check which process is using this port by running the following command <pre><code>netstat -ano | findstr :11434\n</code></pre> for linux users, you can use the following command <pre><code>netstat -ano | grep :11434\n</code></pre></p> <p>You will get the following output <pre><code>    TCP    127.0.0.1:11434        0.0.0.0:0              LISTENING       20796\n</code></pre> Then you can kill the process by running the following command <pre><code>taskkill /F /PID 20796\n</code></pre> for linux users, you can use the following command <pre><code>kill -9 20796\n</code></pre></p> <p>Then you will gee the following output <pre><code>SUCCESS: The process with PID 20796 has been terminated.\n</code></pre></p> <ul> <li>Then you can run the <code>ollama serve</code> command again, you should see the following output <pre><code>2024/11/22 23:20:04 routes.go:1189: INFO server config env=\"map[CUDA_VISIBLE_DEVICES: GPU_DEVICE_ORDINAL: HIP_VISIBLE_DEVICES: HSA_OVERRIDE_GFX_VERSION: HTTPS_PROXY: HTTP_PROXY: NO_PROXY: OLLAMA_DEBUG:false OLLAMA_FLASH_ATTENTION:false OLLAMA_GPU_OVERHEAD:0 OLLAMA_HOST:http://127.0.0.1:11434 OLLAMA_INTEL_GPU:false OLLAMA_KEEP_ALIVE:5m0s OLLAMA_LLM_LIBRARY: OLLAMA_LOAD_TIMEOUT:5m0s OLLAMA_MAX_LOADED_MODELS:0 OLLAMA_MAX_QUEUE:512 OLLAMA_MODELS:C:\\\\Users\\\\eng_m\\\\.ollama\\\\models OLLAMA_MULTIUSER_CACHE:false OLLAMA_NOHISTORY:false OLLAMA_NOPRUNE:false OLLAMA_NUM_PARALLEL:0 OLLAMA_ORIGINS:[http://localhost https://localhost http://localhost:* https://localhost:* http://127.0.0.1 https://127.0.0.1 http://127.0.0.1:* https://127.0.0.1:* http://0.0.0.0 https://0.0.0.0 http://0.0.0.0:* https://0.0.0.0:* app://* file://* tauri://* vscode-webview://*] OLLAMA_SCHED_SPREAD:false OLLAMA_TMPDIR: ROCR_VISIBLE_DEVICES:]\"\ntime=2024-11-22T23:20:04.393+01:00 level=INFO source=images.go:755 msg=\"total blobs: 28\"\ntime=2024-11-22T23:20:04.395+01:00 level=INFO source=images.go:762 msg=\"total unused blobs removed: 0\"\ntime=2024-11-22T23:20:04.397+01:00 level=INFO source=routes.go:1240 msg=\"Listening on 127.0.0.1:11434 (version 0.4.1)\"\ntime=2024-11-22T23:20:04.400+01:00 level=INFO source=common.go:49 msg=\"Dynamic LLM libraries\" runners=\"[cpu cpu_avx cpu_avx2 cuda_v11 cuda_v12 rocm]\"\ntime=2024-11-22T23:20:04.400+01:00 level=INFO source=gpu.go:221 msg=\"looking for compatible GPUs\"\ntime=2024-11-22T23:20:04.400+01:00 level=INFO source=gpu_windows.go:167 msg=packages count=1\ntime=2024-11-22T23:20:04.400+01:00 level=INFO source=gpu_windows.go:214 msg=\"\" package=0 cores=8 efficiency=0 threads=16\ntime=2024-11-22T23:20:04.592+01:00 level=INFO source=types.go:123 msg=\"inference compute\" id=GPU-04f76f9a-be0a-544b-9a6f-8607b8d0a9ab library=cuda variant=v12 compute=8.6 driver=12.6 name=\"NVIDIA GeForce RTX 3060 Ti\" total=\"8.0 GiB\" available=\"7.0 GiB\"\n</code></pre></li> </ul>"},{"location":"tools/notebooks/llama-cpp.html","title":"Using Llama.cpp for Chat Completion","text":"In\u00a0[1]: Copied! <pre>import os\nfrom llama_cpp import Llama\n\n# Set the cache directory\nCACHE_DIR = f\"{os.getenv('HUGGINGFACE_CACHE_DIR')}/gguf\"\n</pre> import os from llama_cpp import Llama  # Set the cache directory CACHE_DIR = f\"{os.getenv('HUGGINGFACE_CACHE_DIR')}/gguf\" In\u00a0[2]: Copied! <pre># Load the Llama model from a local GGUF file\nmodel_path = f\"{CACHE_DIR}/mistral-7b-instruct-v0.2.Q2_K.gguf\"\nllm = Llama(model_path=model_path)\n</pre>  # Load the Llama model from a local GGUF file model_path = f\"{CACHE_DIR}/mistral-7b-instruct-v0.2.Q2_K.gguf\" llm = Llama(model_path=model_path)  <pre>llama_model_loader: loaded meta data with 24 key-value pairs and 291 tensors from \\\\MYCLOUDEX2ULTRA\\research\\llm\\models/gguf/mistral-7b-instruct-v0.2.Q2_K.gguf (version GGUF V3 (latest))\nllama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.\nllama_model_loader: - kv   0:                       general.architecture str              = llama\nllama_model_loader: - kv   1:                               general.name str              = mistralai_mistral-7b-instruct-v0.2\nllama_model_loader: - kv   2:                       llama.context_length u32              = 32768\nllama_model_loader: - kv   3:                     llama.embedding_length u32              = 4096\nllama_model_loader: - kv   4:                          llama.block_count u32              = 32\nllama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 14336\nllama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 128\nllama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32\nllama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 8\nllama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000010\nllama_model_loader: - kv  10:                       llama.rope.freq_base f32              = 1000000.000000\nllama_model_loader: - kv  11:                          general.file_type u32              = 10\nllama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama\nllama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,32000]   = [\"&lt;unk&gt;\", \"&lt;s&gt;\", \"&lt;/s&gt;\", \"&lt;0x00&gt;\", \"&lt;...\nllama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...\nllama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...\nllama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 1\nllama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 2\nllama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 0\nllama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0\nllama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true\nllama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false\nllama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% for message in mess...\nllama_model_loader: - kv  23:               general.quantization_version u32              = 2\nllama_model_loader: - type  f32:   65 tensors\nllama_model_loader: - type q2_K:   65 tensors\nllama_model_loader: - type q3_K:  160 tensors\nllama_model_loader: - type q6_K:    1 tensors\nprint_info: file format = GGUF V3 (latest)\nprint_info: file type   = Q2_K - Medium\nprint_info: file size   = 2.87 GiB (3.41 BPW) \ninit_tokenizer: initializing tokenizer for type 1\nload: control token:      2 '&lt;/s&gt;' is not marked as EOG\nload: control token:      1 '&lt;s&gt;' is not marked as EOG\nload: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect\nload: special tokens cache size = 3\nload: token to piece cache size = 0.1637 MB\nprint_info: arch             = llama\nprint_info: vocab_only       = 0\nprint_info: n_ctx_train      = 32768\nprint_info: n_embd           = 4096\nprint_info: n_layer          = 32\nprint_info: n_head           = 32\nprint_info: n_head_kv        = 8\nprint_info: n_rot            = 128\nprint_info: n_swa            = 0\nprint_info: n_embd_head_k    = 128\nprint_info: n_embd_head_v    = 128\nprint_info: n_gqa            = 4\nprint_info: n_embd_k_gqa     = 1024\nprint_info: n_embd_v_gqa     = 1024\nprint_info: f_norm_eps       = 0.0e+00\nprint_info: f_norm_rms_eps   = 1.0e-05\nprint_info: f_clamp_kqv      = 0.0e+00\nprint_info: f_max_alibi_bias = 0.0e+00\nprint_info: f_logit_scale    = 0.0e+00\nprint_info: n_ff             = 14336\nprint_info: n_expert         = 0\nprint_info: n_expert_used    = 0\nprint_info: causal attn      = 1\nprint_info: pooling type     = 0\nprint_info: rope type        = 0\nprint_info: rope scaling     = linear\nprint_info: freq_base_train  = 1000000.0\nprint_info: freq_scale_train = 1\nprint_info: n_ctx_orig_yarn  = 32768\nprint_info: rope_finetuned   = unknown\nprint_info: ssm_d_conv       = 0\nprint_info: ssm_d_inner      = 0\nprint_info: ssm_d_state      = 0\nprint_info: ssm_dt_rank      = 0\nprint_info: ssm_dt_b_c_rms   = 0\nprint_info: model type       = 7B\nprint_info: model params     = 7.24 B\nprint_info: general.name     = mistralai_mistral-7b-instruct-v0.2\nprint_info: vocab type       = SPM\nprint_info: n_vocab          = 32000\nprint_info: n_merges         = 0\nprint_info: BOS token        = 1 '&lt;s&gt;'\nprint_info: EOS token        = 2 '&lt;/s&gt;'\nprint_info: UNK token        = 0 '&lt;unk&gt;'\nprint_info: PAD token        = 0 '&lt;unk&gt;'\nprint_info: LF token         = 13 '&lt;0x0A&gt;'\nprint_info: EOG token        = 2 '&lt;/s&gt;'\nprint_info: max token length = 48\nload_tensors: layer   0 assigned to device CPU\nload_tensors: layer   1 assigned to device CPU\nload_tensors: layer   2 assigned to device CPU\nload_tensors: layer   3 assigned to device CPU\nload_tensors: layer   4 assigned to device CPU\nload_tensors: layer   5 assigned to device CPU\nload_tensors: layer   6 assigned to device CPU\nload_tensors: layer   7 assigned to device CPU\nload_tensors: layer   8 assigned to device CPU\nload_tensors: layer   9 assigned to device CPU\nload_tensors: layer  10 assigned to device CPU\nload_tensors: layer  11 assigned to device CPU\nload_tensors: layer  12 assigned to device CPU\nload_tensors: layer  13 assigned to device CPU\nload_tensors: layer  14 assigned to device CPU\nload_tensors: layer  15 assigned to device CPU\nload_tensors: layer  16 assigned to device CPU\nload_tensors: layer  17 assigned to device CPU\nload_tensors: layer  18 assigned to device CPU\nload_tensors: layer  19 assigned to device CPU\nload_tensors: layer  20 assigned to device CPU\nload_tensors: layer  21 assigned to device CPU\nload_tensors: layer  22 assigned to device CPU\nload_tensors: layer  23 assigned to device CPU\nload_tensors: layer  24 assigned to device CPU\nload_tensors: layer  25 assigned to device CPU\nload_tensors: layer  26 assigned to device CPU\nload_tensors: layer  27 assigned to device CPU\nload_tensors: layer  28 assigned to device CPU\nload_tensors: layer  29 assigned to device CPU\nload_tensors: layer  30 assigned to device CPU\nload_tensors: layer  31 assigned to device CPU\nload_tensors: layer  32 assigned to device CPU\nload_tensors: tensor 'token_embd.weight' (q2_K) (and 290 others) cannot be used with preferred buffer type CPU_AARCH64, using CPU instead\nload_tensors:   CPU_Mapped model buffer size =  2939.57 MiB\nllama_init_from_model: n_seq_max     = 1\nllama_init_from_model: n_ctx         = 512\nllama_init_from_model: n_ctx_per_seq = 512\nllama_init_from_model: n_batch       = 512\nllama_init_from_model: n_ubatch      = 512\nllama_init_from_model: flash_attn    = 0\nllama_init_from_model: freq_base     = 1000000.0\nllama_init_from_model: freq_scale    = 1\nllama_init_from_model: n_ctx_per_seq (512) &lt; n_ctx_train (32768) -- the full capacity of the model will not be utilized\nllama_kv_cache_init: kv_size = 512, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 32, can_shift = 1\nllama_kv_cache_init: layer 0: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 1: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 2: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 3: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 4: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 5: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 6: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 7: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 8: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 9: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 10: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 11: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 12: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 13: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 14: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 15: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 16: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 17: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 18: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 19: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 20: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 21: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 22: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 23: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 24: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 25: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 26: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 27: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 28: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 29: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 30: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 31: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init:        CPU KV buffer size =    64.00 MiB\nllama_init_from_model: KV self size  =   64.00 MiB, K (f16):   32.00 MiB, V (f16):   32.00 MiB\nllama_init_from_model:        CPU  output buffer size =     0.12 MiB\nllama_init_from_model:        CPU compute buffer size =    81.01 MiB\nllama_init_from_model: graph nodes  = 1030\nllama_init_from_model: graph splits = 1\nCPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | \nModel metadata: {'general.name': 'mistralai_mistral-7b-instruct-v0.2', 'general.architecture': 'llama', 'llama.context_length': '32768', 'llama.rope.dimension_count': '128', 'llama.embedding_length': '4096', 'llama.block_count': '32', 'llama.feed_forward_length': '14336', 'llama.attention.head_count': '32', 'tokenizer.ggml.eos_token_id': '2', 'general.file_type': '10', 'llama.attention.head_count_kv': '8', 'llama.attention.layer_norm_rms_epsilon': '0.000010', 'llama.rope.freq_base': '1000000.000000', 'tokenizer.ggml.model': 'llama', 'general.quantization_version': '2', 'tokenizer.ggml.bos_token_id': '1', 'tokenizer.ggml.unknown_token_id': '0', 'tokenizer.ggml.padding_token_id': '0', 'tokenizer.ggml.add_bos_token': 'true', 'tokenizer.ggml.add_eos_token': 'false', 'tokenizer.chat_template': \"{{ bos_token }}{% for message in messages %}{% if (message['role'] == 'user') != (loop.index0 % 2 == 0) %}{{ raise_exception('Conversation roles must alternate user/assistant/user/assistant/...') }}{% endif %}{% if message['role'] == 'user' %}{{ '[INST] ' + message['content'] + ' [/INST]' }}{% elif message['role'] == 'assistant' %}{{ message['content'] + eos_token}}{% else %}{{ raise_exception('Only user and assistant roles are supported!') }}{% endif %}{% endfor %}\"}\nAvailable chat formats from metadata: chat_template.default\nGuessed chat format: mistral-instruct\n</pre> In\u00a0[3]: Copied! <pre># Example query\nresponse = llm.create_chat_completion(messages=[\n    {\"role\": \"user\", \"content\": \"How big is the sky?\"}\n])\n\n# Print the response\nprint(response)\n</pre>  # Example query response = llm.create_chat_completion(messages=[     {\"role\": \"user\", \"content\": \"How big is the sky?\"} ])  # Print the response print(response)  <pre>llama_perf_context_print:        load time =    7371.00 ms\nllama_perf_context_print: prompt eval time =    7370.60 ms /    14 tokens (  526.47 ms per token,     1.90 tokens per second)\nllama_perf_context_print:        eval time =   13733.07 ms /    95 runs   (  144.56 ms per token,     6.92 tokens per second)\nllama_perf_context_print:       total time =   21145.50 ms /   109 tokens\n</pre> <pre>{'id': 'chatcmpl-e5ccbbc1-1bc3-42ea-9a56-6d476fc149d7', 'object': 'chat.completion', 'created': 1739317290, 'model': '\\\\\\\\MYCLOUDEX2ULTRA\\\\research\\\\llm\\\\models/gguf/mistral-7b-instruct-v0.2.Q2_K.gguf', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': \" The size of the sky is not something that can be measured or quantified in the same way that we can measure and describe the size of physical objects. The sky is not a physical object with defined boundaries. It's the expanse above the earth, and it includes the atmosphere, the weather phenomena, and the stars, moon, and sun. It's essentially infinite in size, as it extends beyond our solar system and into the vastness of space.\"}, 'logprobs': None, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 14, 'completion_tokens': 95, 'total_tokens': 109}}\n</pre> In\u00a0[5]: Copied! <pre># Alternatively, load the model directly from Hugging Face\nllm = Llama.from_pretrained(\n    repo_id=\"TheBloke/Mistral-7B-Instruct-v0.2-GGUF\",\n    filename=\"mistral-7b-instruct-v0.2.Q2_K.gguf\",\n    cache_dir=CACHE_DIR\n)\n</pre> # Alternatively, load the model directly from Hugging Face llm = Llama.from_pretrained(     repo_id=\"TheBloke/Mistral-7B-Instruct-v0.2-GGUF\",     filename=\"mistral-7b-instruct-v0.2.Q2_K.gguf\",     cache_dir=CACHE_DIR )  <pre>llama_model_loader: loaded meta data with 24 key-value pairs and 291 tensors from \\\\MYCLOUDEX2ULTRA\\research\\llm\\models/gguf\\models--TheBloke--Mistral-7B-Instruct-v0.2-GGUF\\snapshots\\3a6fbf4a41a1d52e415a4958cde6856d34b2db93\\.\\mistral-7b-instruct-v0.2.Q2_K.gguf (version GGUF V3 (latest))\nllama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.\nllama_model_loader: - kv   0:                       general.architecture str              = llama\nllama_model_loader: - kv   1:                               general.name str              = mistralai_mistral-7b-instruct-v0.2\nllama_model_loader: - kv   2:                       llama.context_length u32              = 32768\nllama_model_loader: - kv   3:                     llama.embedding_length u32              = 4096\nllama_model_loader: - kv   4:                          llama.block_count u32              = 32\nllama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 14336\nllama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 128\nllama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32\nllama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 8\nllama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000010\nllama_model_loader: - kv  10:                       llama.rope.freq_base f32              = 1000000.000000\nllama_model_loader: - kv  11:                          general.file_type u32              = 10\nllama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama\nllama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,32000]   = [\"&lt;unk&gt;\", \"&lt;s&gt;\", \"&lt;/s&gt;\", \"&lt;0x00&gt;\", \"&lt;...\nllama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...\nllama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...\nllama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 1\nllama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 2\nllama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 0\nllama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0\nllama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true\nllama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false\nllama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% for message in mess...\nllama_model_loader: - kv  23:               general.quantization_version u32              = 2\nllama_model_loader: - type  f32:   65 tensors\nllama_model_loader: - type q2_K:   65 tensors\nllama_model_loader: - type q3_K:  160 tensors\nllama_model_loader: - type q6_K:    1 tensors\nprint_info: file format = GGUF V3 (latest)\nprint_info: file type   = Q2_K - Medium\nprint_info: file size   = 2.87 GiB (3.41 BPW) \ninit_tokenizer: initializing tokenizer for type 1\nload: control token:      2 '&lt;/s&gt;' is not marked as EOG\nload: control token:      1 '&lt;s&gt;' is not marked as EOG\nload: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect\nload: special tokens cache size = 3\nload: token to piece cache size = 0.1637 MB\nprint_info: arch             = llama\nprint_info: vocab_only       = 0\nprint_info: n_ctx_train      = 32768\nprint_info: n_embd           = 4096\nprint_info: n_layer          = 32\nprint_info: n_head           = 32\nprint_info: n_head_kv        = 8\nprint_info: n_rot            = 128\nprint_info: n_swa            = 0\nprint_info: n_embd_head_k    = 128\nprint_info: n_embd_head_v    = 128\nprint_info: n_gqa            = 4\nprint_info: n_embd_k_gqa     = 1024\nprint_info: n_embd_v_gqa     = 1024\nprint_info: f_norm_eps       = 0.0e+00\nprint_info: f_norm_rms_eps   = 1.0e-05\nprint_info: f_clamp_kqv      = 0.0e+00\nprint_info: f_max_alibi_bias = 0.0e+00\nprint_info: f_logit_scale    = 0.0e+00\nprint_info: n_ff             = 14336\nprint_info: n_expert         = 0\nprint_info: n_expert_used    = 0\nprint_info: causal attn      = 1\nprint_info: pooling type     = 0\nprint_info: rope type        = 0\nprint_info: rope scaling     = linear\nprint_info: freq_base_train  = 1000000.0\nprint_info: freq_scale_train = 1\nprint_info: n_ctx_orig_yarn  = 32768\nprint_info: rope_finetuned   = unknown\nprint_info: ssm_d_conv       = 0\nprint_info: ssm_d_inner      = 0\nprint_info: ssm_d_state      = 0\nprint_info: ssm_dt_rank      = 0\nprint_info: ssm_dt_b_c_rms   = 0\nprint_info: model type       = 7B\nprint_info: model params     = 7.24 B\nprint_info: general.name     = mistralai_mistral-7b-instruct-v0.2\nprint_info: vocab type       = SPM\nprint_info: n_vocab          = 32000\nprint_info: n_merges         = 0\nprint_info: BOS token        = 1 '&lt;s&gt;'\nprint_info: EOS token        = 2 '&lt;/s&gt;'\nprint_info: UNK token        = 0 '&lt;unk&gt;'\nprint_info: PAD token        = 0 '&lt;unk&gt;'\nprint_info: LF token         = 13 '&lt;0x0A&gt;'\nprint_info: EOG token        = 2 '&lt;/s&gt;'\nprint_info: max token length = 48\nload_tensors: layer   0 assigned to device CPU\nload_tensors: layer   1 assigned to device CPU\nload_tensors: layer   2 assigned to device CPU\nload_tensors: layer   3 assigned to device CPU\nload_tensors: layer   4 assigned to device CPU\nload_tensors: layer   5 assigned to device CPU\nload_tensors: layer   6 assigned to device CPU\nload_tensors: layer   7 assigned to device CPU\nload_tensors: layer   8 assigned to device CPU\nload_tensors: layer   9 assigned to device CPU\nload_tensors: layer  10 assigned to device CPU\nload_tensors: layer  11 assigned to device CPU\nload_tensors: layer  12 assigned to device CPU\nload_tensors: layer  13 assigned to device CPU\nload_tensors: layer  14 assigned to device CPU\nload_tensors: layer  15 assigned to device CPU\nload_tensors: layer  16 assigned to device CPU\nload_tensors: layer  17 assigned to device CPU\nload_tensors: layer  18 assigned to device CPU\nload_tensors: layer  19 assigned to device CPU\nload_tensors: layer  20 assigned to device CPU\nload_tensors: layer  21 assigned to device CPU\nload_tensors: layer  22 assigned to device CPU\nload_tensors: layer  23 assigned to device CPU\nload_tensors: layer  24 assigned to device CPU\nload_tensors: layer  25 assigned to device CPU\nload_tensors: layer  26 assigned to device CPU\nload_tensors: layer  27 assigned to device CPU\nload_tensors: layer  28 assigned to device CPU\nload_tensors: layer  29 assigned to device CPU\nload_tensors: layer  30 assigned to device CPU\nload_tensors: layer  31 assigned to device CPU\nload_tensors: layer  32 assigned to device CPU\nload_tensors: tensor 'token_embd.weight' (q2_K) (and 290 others) cannot be used with preferred buffer type CPU_AARCH64, using CPU instead\nload_tensors:   CPU_Mapped model buffer size =  2939.57 MiB\nllama_init_from_model: n_seq_max     = 1\nllama_init_from_model: n_ctx         = 512\nllama_init_from_model: n_ctx_per_seq = 512\nllama_init_from_model: n_batch       = 512\nllama_init_from_model: n_ubatch      = 512\nllama_init_from_model: flash_attn    = 0\nllama_init_from_model: freq_base     = 1000000.0\nllama_init_from_model: freq_scale    = 1\nllama_init_from_model: n_ctx_per_seq (512) &lt; n_ctx_train (32768) -- the full capacity of the model will not be utilized\nllama_kv_cache_init: kv_size = 512, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 32, can_shift = 1\nllama_kv_cache_init: layer 0: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 1: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 2: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 3: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 4: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 5: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 6: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 7: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 8: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 9: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 10: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 11: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 12: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 13: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 14: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 15: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 16: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 17: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 18: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 19: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 20: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 21: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 22: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 23: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 24: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 25: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 26: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 27: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 28: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 29: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 30: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 31: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init:        CPU KV buffer size =    64.00 MiB\nllama_init_from_model: KV self size  =   64.00 MiB, K (f16):   32.00 MiB, V (f16):   32.00 MiB\nllama_init_from_model:        CPU  output buffer size =     0.12 MiB\nllama_init_from_model:        CPU compute buffer size =    81.01 MiB\nllama_init_from_model: graph nodes  = 1030\nllama_init_from_model: graph splits = 1\nCPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | \nModel metadata: {'general.name': 'mistralai_mistral-7b-instruct-v0.2', 'general.architecture': 'llama', 'llama.context_length': '32768', 'llama.rope.dimension_count': '128', 'llama.embedding_length': '4096', 'llama.block_count': '32', 'llama.feed_forward_length': '14336', 'llama.attention.head_count': '32', 'tokenizer.ggml.eos_token_id': '2', 'general.file_type': '10', 'llama.attention.head_count_kv': '8', 'llama.attention.layer_norm_rms_epsilon': '0.000010', 'llama.rope.freq_base': '1000000.000000', 'tokenizer.ggml.model': 'llama', 'general.quantization_version': '2', 'tokenizer.ggml.bos_token_id': '1', 'tokenizer.ggml.unknown_token_id': '0', 'tokenizer.ggml.padding_token_id': '0', 'tokenizer.ggml.add_bos_token': 'true', 'tokenizer.ggml.add_eos_token': 'false', 'tokenizer.chat_template': \"{{ bos_token }}{% for message in messages %}{% if (message['role'] == 'user') != (loop.index0 % 2 == 0) %}{{ raise_exception('Conversation roles must alternate user/assistant/user/assistant/...') }}{% endif %}{% if message['role'] == 'user' %}{{ '[INST] ' + message['content'] + ' [/INST]' }}{% elif message['role'] == 'assistant' %}{{ message['content'] + eos_token}}{% else %}{{ raise_exception('Only user and assistant roles are supported!') }}{% endif %}{% endfor %}\"}\nAvailable chat formats from metadata: chat_template.default\nGuessed chat format: mistral-instruct\n</pre> In\u00a0[6]: Copied! <pre>response = llm.create_chat_completion(\n    messages=[\n        {\"role\": \"user\", \"content\": \"How does a black hole work?\"}\n    ]\n)\nprint(response)\n</pre> response = llm.create_chat_completion(     messages=[         {\"role\": \"user\", \"content\": \"How does a black hole work?\"}     ] ) print(response) <pre>llama_perf_context_print:        load time =   15363.27 ms\nllama_perf_context_print: prompt eval time =   15362.99 ms /    15 tokens ( 1024.20 ms per token,     0.98 tokens per second)\nllama_perf_context_print:        eval time =   54128.24 ms /   388 runs   (  139.51 ms per token,     7.17 tokens per second)\nllama_perf_context_print:       total time =   69801.98 ms /   403 tokens\n</pre> <pre>{'id': 'chatcmpl-120bd07c-4187-4543-bb7f-83fc8e9b261e', 'object': 'chat.completion', 'created': 1739317680, 'model': '\\\\\\\\MYCLOUDEX2ULTRA\\\\research\\\\llm\\\\models/gguf\\\\models--TheBloke--Mistral-7B-Instruct-v0.2-GGUF\\\\snapshots\\\\3a6fbf4a41a1d52e415a4958cde6856d34b2db93\\\\.\\\\mistral-7b-instruct-v0.2.Q2_K.gguf', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': ' A black hole is a region in space where the gravitational pull is so strong that nothing, not even light, can escape. The gravity of a black hole is so intense because matter is squeezed into a very small space.\\n\\nBlack holes are formed when a massive star collapses under its own gravity at the end of its life. The core collapses in on itself, forming a singularity, which is a point of infinite density and zero volume. The singularity is surrounded by an event horizon, which is the boundary of the black hole from which no escape is possible.\\n\\nThe intense gravity of a black hole warps the fabric of spacetime around it, causing a significant distortion in the paths of nearby stars and planets. This distortion is known as a gravitational singularity or a black hole.\\n\\nThe event horizon of a black hole is not a perfect sphere but rather an irregularly shaped surface that is constantly changing as the black hole interacts with nearby matter. The event horizon is also not a sharp boundary but rather a gradual transition from the outside universe to the inside of the black hole.\\n\\nBlack holes are not completely black but rather emit a faint glow due to the energy released from the intense gravitational forces at work. This glow is known as Hawking radiation, named after the physicist Stephen Hawking, who first proposed the idea.\\n\\nBlack holes come in different sizes, from stellar-mass black holes, which can be as small as a few solar masses, to supermassive black holes, which can be millions or billions of solar masses. The supermassive black holes are thought to be at the center of most galaxies, including our own Milky Way.\\n\\nBlack holes are fascinating objects in the universe, and scientists continue to study them to learn more about the fundamental laws of physics and the nature of spacetime.'}, 'logprobs': None, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 15, 'completion_tokens': 388, 'total_tokens': 403}}\n</pre> In\u00a0[8]: Copied! <pre>import requests\nimport json\n\n# Define the API endpoint\nurl = \"http://localhost:8080/v1/completions\"\n\n# Define the payload\npayload = {\n    \"model\": \"mistral-7b-instruct-v0.2.Q4_K_M.gguf\",\n    \"prompt\": \"How big is the sky?\",\n    \"temperature\": 0.7,\n    \"max_tokens\": 50\n}\n\n# Send a POST request\nheaders = {\"Content-Type\": \"application/json\"}\ntry:\n    response = requests.post(url, json=payload, headers=headers)\n\n    if response.status_code == 200:\n        response_data = response.json()\n        choices = response_data.get(\"choices\", [])\n        if choices:\n            print(\"Response:\", choices[0].get(\"text\", \"\"))\n        else:\n            print(\"No choices found in the response.\")\n    else:\n        print(f\"Request failed with status code {response.status_code}: {response.text}\")\nexcept Exception as e:\n    print(f\"Error occurred: {e}\")\n</pre>  import requests import json  # Define the API endpoint url = \"http://localhost:8080/v1/completions\"  # Define the payload payload = {     \"model\": \"mistral-7b-instruct-v0.2.Q4_K_M.gguf\",     \"prompt\": \"How big is the sky?\",     \"temperature\": 0.7,     \"max_tokens\": 50 }  # Send a POST request headers = {\"Content-Type\": \"application/json\"} try:     response = requests.post(url, json=payload, headers=headers)      if response.status_code == 200:         response_data = response.json()         choices = response_data.get(\"choices\", [])         if choices:             print(\"Response:\", choices[0].get(\"text\", \"\"))         else:             print(\"No choices found in the response.\")     else:         print(f\"Request failed with status code {response.status_code}: {response.text}\") except Exception as e:     print(f\"Error occurred: {e}\")  <pre>Response: \n\nIn a philosophical or poetic sense, the sky is often considered infinite, as it's the vast expanse above us where stars, planets, and galaxies exist. In reality, however, the size of the observable sky is\n</pre>"},{"location":"tools/notebooks/llama-cpp.html#using-llamacpp-for-chat-completion","title":"Using Llama.cpp for Chat Completion\u00b6","text":""},{"location":"tools/notebooks/llama-cpp.html#installation-setup","title":"Installation &amp; Setup\u00b6","text":"<p>First, install the <code>llama-cpp-python</code> package if you haven't already:</p> <pre>pip install llama-cpp-python\n</pre> <p>Ensure you have downloaded a compatible model from Hugging Face.</p>"},{"location":"tools/notebooks/llama-cpp.html#running-inference-in-python","title":"Running Inference in Python\u00b6","text":""},{"location":"tools/notebooks/llama-cpp.html#downloading-and-using-gguf-models-with-llamafrom_pretrained","title":"Downloading and Using GGUF Models with Llama.from_pretrained\u00b6","text":""},{"location":"tools/notebooks/llama-cpp.html#serving-the-llm-as-a-rest-api","title":"Serving the LLM as a REST API\u00b6","text":"<p>To serve the model using <code>llama-server</code>, run the following command:</p> <pre>llama-server -m mistral-7b-instruct-v0.2.Q4_K_M.gguf --host 0.0.0.0 --port 8080\n</pre> <p>Then, use the following Python script to send requests to the API:</p>"}]}