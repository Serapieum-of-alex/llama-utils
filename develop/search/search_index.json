{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"llama-utils","text":"<p>LlamaIndex utility package</p> <p> </p> <p> </p>"},{"location":"index.html#current-release-info","title":"Current release info","text":"Name Downloads Version Platforms"},{"location":"index.html#llama-utils-large-language-model-utility-package","title":"llama-utils - Large Language Model Utility Package","text":"<p>llama-utils is a large language model utility package</p> <p>Full Documentation Conda-forge feedstock</p>"},{"location":"index.html#main-features","title":"Main Features","text":"<ul> <li>llama-index</li> </ul>"},{"location":"index.html#package-overview","title":"Package Overview","text":"<pre><code>graph TB\n    Package[llama-utils]\n    Package --&gt; SubPackage1[Indexing]\n    Package --&gt; SubPackage3[Storage]\n    SubPackage1 --&gt; Module1[index_manager.py]\n    SubPackage1 --&gt; Module2[custom_index.py]\n    SubPackage3 --&gt; Module5[storage.py]\n    SubPackage3 --&gt; Module6[config_loader.py]</code></pre> <p>complete overview of the design and architecture here</p>"},{"location":"index.html#installing-llama-utils","title":"Installing llama-utils","text":"<p>Installing <code>llama-utils</code> from the <code>conda-forge</code> channel can be achieved by:</p> <pre><code>conda install -c conda-forge llama-utils=0.2.0\n</code></pre> <p>It is possible to list all the versions of <code>llama-utils</code> available on your platform with:</p> <pre><code>conda search llama-utils --channel conda-forge\n</code></pre>"},{"location":"index.html#install-from-github","title":"Install from GitHub","text":"<p>to install the last development to time, you can install the library from GitHub</p> <pre><code>pip install git+https://github.com/Serapieum-of-alex/llama-utils\n</code></pre>"},{"location":"index.html#pip","title":"pip","text":"<p>to install the last release, you can easily use pip</p> <pre><code>pip install llama-utils==0.2.0\n</code></pre>"},{"location":"index.html#quick-start","title":"Quick start","text":"<ul> <li>First download ollama from here ollama and install it.</li> <li>Then run the following command to pull the <code>llama3</code> model <pre><code>ollama pull llama3\n</code></pre></li> <li>Then run ollama server (if you get an error, check the errors section below to solve it) <pre><code>ollama serve\n</code></pre> Now you can use the <code>llama-utils</code> package to interact with the <code>ollama</code> server</li> </ul> <pre><code>from llama_utils.retrieval.storage import Storage\nSTORAGE_DIR= \"examples/data/llama3\"\nstorage = Storage.create()\ndata_path = \"examples/data/essay\"\ndocs = storage.read_documents(data_path)\nstorage.add_documents(docs)\nstorage.save(STORAGE_DIR)\n</code></pre>"},{"location":"change-log.html","title":"0.1.0 (2025-01-25)","text":"<ul> <li>initial design</li> </ul>"},{"location":"change-log.html#020-2025-01-24","title":"0.2.0 (2025-01-24)","text":""},{"location":"change-log.html#dev","title":"Dev","text":"<ul> <li>Setup mkdocs</li> <li>Take llm models and embedding models dependencies out of the main package dependencies.</li> </ul>"},{"location":"change-log.html#030-2025-02-05","title":"0.3.0 (2025-02-05)","text":""},{"location":"change-log.html#models","title":"models","text":"<ul> <li>Add support for huggingface llm models <code>LLMModel</code></li> </ul>"},{"location":"change-log.html#0-2025-02-","title":"0.. (2025-02-*)","text":""},{"location":"change-log.html#storage","title":"Storage","text":"<ul> <li>differentiate between the <code>document_metadata</code> and the <code>node_metadata</code> in the <code>Storage</code> class, to be merged in the future.</li> </ul>"},{"location":"design-architecture-diagrams.html","title":"Design and Architecture Diagrams","text":""},{"location":"design-architecture-diagrams.html#1-class-diagram","title":"1. Class Diagram","text":"<pre><code>classDiagram\n    class IndexManager {\n        +List~str~ ids\n        +List~CustomIndex~ indexes\n        +load_from_storage(storage: Storage) IndexManager\n        +create_from_storage(storage: Storage) IndexManager\n    }\n    class CustomIndex {\n        +VectorStoreIndex index\n        +IndexDict metadata\n        +List~str~ doc_ids\n        +str id\n        +create_from_documents(document: List~Union~Document, str~, generate_id: bool) CustomIndex\n        +create_from_nodes(nodes: List~TextNode~) CustomIndex\n    }\n\n    class VisionModel {\n        +List~str~ images\n        +str prompt_template\n        +encode_image(image: np.ndarray, image_format: str) str\n        +encode_images() List~str~\n        +trigger_model(max_tokens: int, temperature: float, detail: str) str\n        +to_markdown(path: str)\n    }\n    class Storage {\n        +StorageContext store\n        +BaseDocumentStore docstore\n        +BaseIndexStore index_store\n        +vector_store\n        +save(store_dir: str)\n        +load(store_dir: str) Storage\n        +add_documents(docs: Sequence~Union~Document, TextNode~, generate_id: bool, update: bool)\n        +read_documents(path: str) List~Union~Document, TextNode~\n    }\n    class ConfigLoader {\n        +Settings settings\n        +llm\n        +embedding\n    }\n    class Logger {\n        +__init__(name: str, level: int, file_name: str)\n    }\n    class StorageNotFoundError {\n        +__init__(error_message: str)\n    }\n    IndexManager --&gt; CustomIndex\n    IndexManager --&gt; Storage\n    CustomIndex --&gt; VectorStoreIndex\n    CustomIndex --&gt; BasePydanticVectorStore\n    CustomIndex --&gt; Document\n    CustomIndex --&gt; TextNode\n    VisionModel --&gt; AzureOpenAI\n    VisionModel --&gt; ConfigLoader\n    VisionModel --&gt; Storage\n    Storage --&gt; StorageContext\n    Storage --&gt; Document\n    Storage --&gt; TextNode\n    ConfigLoader --&gt; Settings\n    ConfigLoader --&gt; HuggingFaceEmbedding\n    Logger --&gt; logging\n    StorageNotFoundError --&gt; Exception</code></pre>"},{"location":"design-architecture-diagrams.html#visibility-symbols-in-mermaid-class-diagrams","title":"Visibility Symbols in Mermaid Class Diagrams","text":"<ul> <li><code>+</code> : Public \u2013 The member is accessible from outside the class.</li> <li><code>-</code> : Private \u2013 The member is accessible only within the class.</li> <li><code>#</code> : Protected \u2013 The member is accessible within the class and its subclasses.</li> </ul>"},{"location":"design-architecture-diagrams.html#2-module-dependency-diagram","title":"2. Module Dependency Diagram","text":"<pre><code>graph TD\n    IndexManager --&gt;|Imports| CustomIndex\n    IndexManager --&gt;|Imports| Storage\n    CustomIndex --&gt;|Imports| VectorStoreIndex\n    CustomIndex --&gt;|Imports| Document\n    CustomIndex --&gt;|Imports| TextNode\n    VisionModel --&gt;|Imports| AzureOpenAI\n    VisionModel --&gt;|Uses| ConfigLoader\n    Storage --&gt;|Uses| StorageContext\n    Storage --&gt;|Uses| Document\n    ConfigLoader --&gt;|Uses| HuggingFaceEmbedding\n    ConfigLoader --&gt;|Uses| OllamaLLM\n    Logger --&gt;|Depends| logging</code></pre>"},{"location":"design-architecture-diagrams.html#3-sequence-diagram","title":"3. Sequence Diagram","text":"<pre><code>sequenceDiagram\n    actor User\n    participant IndexManager\n    participant CustomIndex\n    participant Storage\n    User -&gt;&gt; IndexManager: Create IndexManager\n    IndexManager -&gt;&gt; Storage: Load from storage\n    Storage -&gt;&gt; IndexManager: Return data\n    IndexManager -&gt;&gt; CustomIndex: Create CustomIndex\n    CustomIndex -&gt;&gt; IndexManager: Return index object</code></pre>"},{"location":"design-architecture-diagrams.html#4-component-diagram","title":"4. Component Diagram","text":"<pre><code>graph TD\n    subgraph Application\n        IndexManager\n        CustomIndex\n        Storage\n    end\n    subgraph ExternalSystems\n        AzureOpenAI\n        DocumentStore\n    end\n    IndexManager --&gt;|Communicates| CustomIndex\n    IndexManager --&gt;|Uses| Storage\n    Storage --&gt;|Stores| DocumentStore\n    VisionModel --&gt;|API| AzureOpenAI</code></pre>"},{"location":"design-architecture-diagrams.html#5-deployment-diagram","title":"5. Deployment Diagram","text":"<pre><code>graph TD\n    user[User System]\n    app[Python Application]\n    storage[Storage Directory]\n    azure[Azure OpenAI Service]\n    user --&gt; app\n    app --&gt; storage\n    app --&gt; azure</code></pre>"},{"location":"design-architecture-diagrams.html#6data-flow-diagram","title":"6.Data Flow Diagram","text":"<pre><code>graph LR\n    Input[User Input] --&gt; Process[IndexManager]\n    Process --&gt; StorageSystem[Storage]\n    StorageSystem --&gt; Output[Retrieved Data]</code></pre>"},{"location":"design-architecture-diagrams.html#7deployment-diagram","title":"7.Deployment Diagram","text":"<pre><code>graph TD\n    User --&gt;|Requests| PythonApp[Python Application]\n    PythonApp --&gt;|Reads/Writes| Storage[Local/Cloud Storage]\n    PythonApp --&gt;|Interacts| Azure[Azure OpenAI Services]</code></pre>"},{"location":"design-architecture-diagrams.html#8state-diagram","title":"8.State Diagram","text":"<pre><code>stateDiagram-v2\n    [*] --&gt; Initialized\n    Initialized --&gt; LoadingIndexes\n    LoadingIndexes --&gt; IndexReady: Success\n    LoadingIndexes --&gt; [*]: Failure\n    IndexReady --&gt; [*]</code></pre>"},{"location":"design-architecture-diagrams.html#9activity-diagram","title":"9.Activity Diagram","text":"<pre><code>flowchart TD\n    Start --&gt; LoadIndexes\n    LoadIndexes --&gt; ProcessData\n    ProcessData --&gt; GenerateEmbeddings\n    GenerateEmbeddings --&gt; End</code></pre>"},{"location":"design-architecture-diagrams.html#10package-diagram","title":"10.Package Diagram","text":"<pre><code>graph TB\n    Package[llama-utils]\n    Package --&gt; SubPackage1[Indexing]\n    Package --&gt; SubPackage3[Storage]\n    SubPackage1 --&gt; Module1[index_manager.py]\n    SubPackage1 --&gt; Module2[custom_index.py]\n    SubPackage3 --&gt; Module5[storage.py]\n    SubPackage3 --&gt; Module6[config_loader.py]</code></pre>"},{"location":"design-architecture-diagrams.html#11network-diagram","title":"11.Network Diagram","text":"<pre><code>graph TD\n    Client --&gt; API[REST API]\n    API --&gt; Storage[Data Storage]\n    API --&gt; Service[Azure OpenAI]</code></pre>"},{"location":"api/index_manager.html","title":"Index Manager","text":""},{"location":"api/index_manager.html#index-manager_1","title":"Index Manager","text":""},{"location":"api/index_manager.html#llama_utils.indexing.index_manager","title":"<code>llama_utils.indexing.index_manager</code>","text":"<p>Index manager module.</p>"},{"location":"api/index_manager.html#llama_utils.indexing.index_manager.IndexManager","title":"<code>IndexManager</code>","text":"<p>A class to manage multiple indexes, handling updates, deletions, and retrieval operations.</p> Source code in <code>src/llama_utils/indexing/index_manager.py</code> <pre><code>class IndexManager:\n    \"\"\"A class to manage multiple indexes, handling updates, deletions, and retrieval operations.\"\"\"\n\n    def __init__(self, ids: List[str], indexes: List[BaseIndex]):\n        \"\"\"Initialize the index manager.\"\"\"\n        self._indexes = [CustomIndex(index) for index in indexes]\n        self._ids = ids\n\n    def __str__(self):\n        \"\"\"String representation of the index manager.\"\"\"\n        return f\"\"\"\n            ids={self.ids},\n            indexes={self.indexes})\n        \"\"\"\n\n    @classmethod\n    def load_from_storage(cls, storage: Storage) -&gt; \"IndexManager\":\n        \"\"\"Read indexes from storage.\n\n        Parameters\n        ----------\n        storage : Storage\n            The storage object to read the indexes from.\n\n        Returns\n        -------\n        IndexManager\n            The index manager object\n\n        Examples\n        --------\n        First we need to load the `ConfigLoader` to define the embedding model that was used to create the embeddings\n        in the index.\n\n        ```python\n        &gt;&gt;&gt; from llama_utils.utils.config_loader import ConfigLoader\n        &gt;&gt;&gt; config_loader = ConfigLoader()\n\n        ```\n\n        Next, we load the storage object and the index manager object.\n\n        ```python\n        &gt;&gt;&gt; storage_dir = \"examples/paul-graham-essay-storage\"\n        &gt;&gt;&gt; storage_context = Storage.load(storage_dir)\n        &gt;&gt;&gt; index_manager = IndexManager.load_from_storage(storage_context) # doctest: +SKIP\n        &gt;&gt;&gt; print(index_manager) # doctest: +SKIP\n        &lt;BLANKLINE&gt;\n            ids=['8d57e294-fd17-43c9-9dec-a12aa7ea0751', 'edd0d507-9100-4cfb-8002-2267449c6668'],\n            indexes=[\n                &lt;llama_index.core.indices.vector_store_index.VectorStoreIndex object at 0x7f9f2a1e9d90&gt;,\n                &lt;llama_index.core.indices.vector_store_index.VectorStoreIndex object at 0x7f9f2a1e9e50&gt;\n            ])\n        &lt;BLANKLINE&gt;\n        ```\n        \"\"\"\n        storage = storage.store\n        index_instructs = storage.index_store.index_structs()\n        index_ids = [index_i.index_id for index_i in index_instructs]\n        indexes = load_indices_from_storage(storage)\n        return cls(index_ids, indexes)\n\n    @property\n    def indexes(self) -&gt; List[CustomIndex]:\n        \"\"\"Indexes.\"\"\"\n        return self._indexes\n\n    @indexes.setter\n    def indexes(self, indexes: List[BaseIndex]):\n        self._indexes = indexes\n\n    @property\n    def ids(self) -&gt; List[str]:\n        \"\"\"Index IDs.\"\"\"\n        return self._ids\n\n    @classmethod\n    def create_from_storage(cls, storage: Storage) -&gt; \"IndexManager\":\n        \"\"\"Create a new index.\n\n        Parameters\n        ----------\n        storage : Storage\n            The storage object to create the index from.\n\n        Returns\n        -------\n        IndexManager\n            The new index manager object\n        \"\"\"\n        docstore = storage.docstore\n        index = VectorStoreIndex(\n            list(docstore.docs.values()), storage_context=storage.store\n        )\n        return cls([index.index_id], [index])\n</code></pre>"},{"location":"api/index_manager.html#llama_utils.indexing.index_manager.IndexManager.ids","title":"<code>ids: List[str]</code>  <code>property</code>","text":"<p>Index IDs.</p>"},{"location":"api/index_manager.html#llama_utils.indexing.index_manager.IndexManager.indexes","title":"<code>indexes: List[CustomIndex]</code>  <code>property</code> <code>writable</code>","text":"<p>Indexes.</p>"},{"location":"api/index_manager.html#llama_utils.indexing.index_manager.IndexManager.__init__","title":"<code>__init__(ids: List[str], indexes: List[BaseIndex])</code>","text":"<p>Initialize the index manager.</p> Source code in <code>src/llama_utils/indexing/index_manager.py</code> <pre><code>def __init__(self, ids: List[str], indexes: List[BaseIndex]):\n    \"\"\"Initialize the index manager.\"\"\"\n    self._indexes = [CustomIndex(index) for index in indexes]\n    self._ids = ids\n</code></pre>"},{"location":"api/index_manager.html#llama_utils.indexing.index_manager.IndexManager.__str__","title":"<code>__str__()</code>","text":"<p>String representation of the index manager.</p> Source code in <code>src/llama_utils/indexing/index_manager.py</code> <pre><code>def __str__(self):\n    \"\"\"String representation of the index manager.\"\"\"\n    return f\"\"\"\n        ids={self.ids},\n        indexes={self.indexes})\n    \"\"\"\n</code></pre>"},{"location":"api/index_manager.html#llama_utils.indexing.index_manager.IndexManager.create_from_storage","title":"<code>create_from_storage(storage: Storage) -&gt; IndexManager</code>  <code>classmethod</code>","text":"<p>Create a new index.</p> <p>Parameters:</p> Name Type Description Default <code>storage</code> <code>Storage</code> <p>The storage object to create the index from.</p> required <p>Returns:</p> Type Description <code>IndexManager</code> <p>The new index manager object</p> Source code in <code>src/llama_utils/indexing/index_manager.py</code> <pre><code>@classmethod\ndef create_from_storage(cls, storage: Storage) -&gt; \"IndexManager\":\n    \"\"\"Create a new index.\n\n    Parameters\n    ----------\n    storage : Storage\n        The storage object to create the index from.\n\n    Returns\n    -------\n    IndexManager\n        The new index manager object\n    \"\"\"\n    docstore = storage.docstore\n    index = VectorStoreIndex(\n        list(docstore.docs.values()), storage_context=storage.store\n    )\n    return cls([index.index_id], [index])\n</code></pre>"},{"location":"api/index_manager.html#llama_utils.indexing.index_manager.IndexManager.load_from_storage","title":"<code>load_from_storage(storage: Storage) -&gt; IndexManager</code>  <code>classmethod</code>","text":"<p>Read indexes from storage.</p> <p>Parameters:</p> Name Type Description Default <code>storage</code> <code>Storage</code> <p>The storage object to read the indexes from.</p> required <p>Returns:</p> Type Description <code>IndexManager</code> <p>The index manager object</p> <p>Examples:</p> <p>First we need to load the <code>ConfigLoader</code> to define the embedding model that was used to create the embeddings in the index.</p> <pre><code>&gt;&gt;&gt; from llama_utils.utils.config_loader import ConfigLoader\n&gt;&gt;&gt; config_loader = ConfigLoader()\n</code></pre> <p>Next, we load the storage object and the index manager object.</p> <pre><code>&gt;&gt;&gt; storage_dir = \"examples/paul-graham-essay-storage\"\n&gt;&gt;&gt; storage_context = Storage.load(storage_dir)\n&gt;&gt;&gt; index_manager = IndexManager.load_from_storage(storage_context) # doctest: +SKIP\n&gt;&gt;&gt; print(index_manager) # doctest: +SKIP\n&lt;BLANKLINE&gt;\n    ids=['8d57e294-fd17-43c9-9dec-a12aa7ea0751', 'edd0d507-9100-4cfb-8002-2267449c6668'],\n    indexes=[\n        &lt;llama_index.core.indices.vector_store_index.VectorStoreIndex object at 0x7f9f2a1e9d90&gt;,\n        &lt;llama_index.core.indices.vector_store_index.VectorStoreIndex object at 0x7f9f2a1e9e50&gt;\n    ])\n&lt;BLANKLINE&gt;\n</code></pre> Source code in <code>src/llama_utils/indexing/index_manager.py</code> <pre><code>@classmethod\ndef load_from_storage(cls, storage: Storage) -&gt; \"IndexManager\":\n    \"\"\"Read indexes from storage.\n\n    Parameters\n    ----------\n    storage : Storage\n        The storage object to read the indexes from.\n\n    Returns\n    -------\n    IndexManager\n        The index manager object\n\n    Examples\n    --------\n    First we need to load the `ConfigLoader` to define the embedding model that was used to create the embeddings\n    in the index.\n\n    ```python\n    &gt;&gt;&gt; from llama_utils.utils.config_loader import ConfigLoader\n    &gt;&gt;&gt; config_loader = ConfigLoader()\n\n    ```\n\n    Next, we load the storage object and the index manager object.\n\n    ```python\n    &gt;&gt;&gt; storage_dir = \"examples/paul-graham-essay-storage\"\n    &gt;&gt;&gt; storage_context = Storage.load(storage_dir)\n    &gt;&gt;&gt; index_manager = IndexManager.load_from_storage(storage_context) # doctest: +SKIP\n    &gt;&gt;&gt; print(index_manager) # doctest: +SKIP\n    &lt;BLANKLINE&gt;\n        ids=['8d57e294-fd17-43c9-9dec-a12aa7ea0751', 'edd0d507-9100-4cfb-8002-2267449c6668'],\n        indexes=[\n            &lt;llama_index.core.indices.vector_store_index.VectorStoreIndex object at 0x7f9f2a1e9d90&gt;,\n            &lt;llama_index.core.indices.vector_store_index.VectorStoreIndex object at 0x7f9f2a1e9e50&gt;\n        ])\n    &lt;BLANKLINE&gt;\n    ```\n    \"\"\"\n    storage = storage.store\n    index_instructs = storage.index_store.index_structs()\n    index_ids = [index_i.index_id for index_i in index_instructs]\n    indexes = load_indices_from_storage(storage)\n    return cls(index_ids, indexes)\n</code></pre>"},{"location":"api/storage.html","title":"Storage","text":""},{"location":"api/storage.html#storage_1","title":"Storage","text":""},{"location":"api/storage.html#llama_utils.retrieval.storage","title":"<code>llama_utils.retrieval.storage</code>","text":"<p>A module for managing vector Storage and retrieval.</p>"},{"location":"api/storage.html#llama_utils.retrieval.storage.Storage","title":"<code>Storage</code>","text":"<p>A class to manage vector Storage and retrieval.</p> <p>The Storage class is used to manage the storage and retrieval of documents. It provides methods to add documents to the store, read documents from a directory, and extract information from the documents.</p> Source code in <code>src/llama_utils/retrieval/storage.py</code> <pre><code>class Storage:\n    \"\"\"A class to manage vector Storage and retrieval.\n\n    The Storage class is used to manage the storage and retrieval of documents. It provides methods to add documents to the\n    store, read documents from a directory, and extract information from the documents.\n    \"\"\"\n\n    def __init__(\n        self,\n        storage_context: StorageContext = None,\n    ):\n        \"\"\"Initialize the Storage.\n\n        The constructor method takes a llama_index.core.StorageContext object that is a native llamaIndex object\n        and a metadata table (pandas.DataFrame-optional) as input.\n\n        Parameters\n        ----------\n        storage_context: str, optional, default is None.\n            the StorageContext object that is created by LlamaIndex (a native llamaIndex object).\n\n        \"\"\"\n        if not isinstance(storage_context, StorageContext):\n            raise ValueError(\n                f\"Storage class should be instantiated using StorageContext object, given: {storage_context}\"\n            )\n\n        self._store = storage_context\n\n    @classmethod\n    def create(cls) -&gt; \"Storage\":\n        \"\"\"Create a new in-memory Storage.\n\n        Returns\n        -------\n        Storage:\n            The storage Context.\n\n        Examples\n        --------\n        You can create a new storage (in-memory) using the `create` method as follows:\n\n        ```python\n        &gt;&gt;&gt; store = Storage.create()\n        &gt;&gt;&gt; print(store)\n        &lt;BLANKLINE&gt;\n                Documents: 0\n                Indexes: 0\n        &lt;BLANKLINE&gt;\n\n        ```\n        \"\"\"\n        storage = cls._create_simple_storage_context()\n        return cls(storage)\n\n    @staticmethod\n    def _create_simple_storage_context() -&gt; StorageContext:\n        \"\"\"Create a simple Storage context.\n\n        Returns\n        -------\n        StorageContext:\n            A storage context with docstore, vectore store, and index store.\n        \"\"\"\n        return StorageContext.from_defaults(\n            docstore=SimpleDocumentStore(),\n            vector_store=SimpleVectorStore(),\n            index_store=SimpleIndexStore(),\n        )\n\n    @staticmethod\n    def _create_metadata_index():\n        \"\"\"Create a metadata-based index.\"\"\"\n        return pd.DataFrame(columns=[\"file_name\", \"doc_id\"])\n\n    @property\n    def store(self) -&gt; StorageContext:\n        \"\"\"Get the Storage context.\"\"\"\n        return self._store\n\n    @property\n    def docstore(self) -&gt; BaseDocumentStore:\n        \"\"\"Get the document store.\"\"\"\n        return self.store.docstore\n\n    @property\n    def vector_store(self):\n        \"\"\"Get the vector store.\"\"\"\n        return self.store.vector_store\n\n    @property\n    def index_store(self) -&gt; BaseIndexStore:\n        \"\"\"Get the index store.\"\"\"\n        return self.store.index_store\n\n    def save(self, store_dir: str):\n        \"\"\"Save the storage to a directory.\n\n        Parameters\n        ----------\n        store_dir: str\n            The directory to save the store.\n\n        Examples\n        --------\n        You can save a storage to a directory as follows:\n        ```python\n        &gt;&gt;&gt; store = Storage.create()\n        &gt;&gt;&gt; store.save(\"examples/paul-graham-essay-storage-example\")\n\n        ```\n        The following files will be created in the specified directory:\n        - metadata_index.csv\n        - docstore.json\n        - default__vector_store.json\n        - index_store.json\n        - graph_store.json\n        - image__vector_store.json\n        \"\"\"\n        self.store.persist(persist_dir=store_dir)\n        file_path = os.path.join(store_dir, ID_MAPPING_FILE)\n        save_metadata_index(self.document_metadata(as_dataframe=True), file_path)\n\n    @classmethod\n    def load(cls, store_dir: str) -&gt; \"Storage\":\n        \"\"\"Load the store from a directory.\n\n        Parameters\n        ----------\n        store_dir: str\n            The directory containing the store.\n\n        Returns\n        -------\n        Storage:\n            The loaded storage.\n\n        Raises\n        ------\n        StorageNotFoundError\n            If the storage is not found at the specified directory.\n\n        Examples\n        --------\n        You can load a storage from a directory as follows:\n        ```python\n        &gt;&gt;&gt; store = Storage.load(\"examples/paul-graham-essay-storage\")\n        &gt;&gt;&gt; print(store) # doctest: +SKIP\n        &lt;BLANKLINE&gt;\n                    Documents: 53\n                    Indexes: 2\n        &lt;BLANKLINE&gt;\n        &gt;&gt;&gt; metadata = store.document_metadata(as_dataframe=True)\n        &gt;&gt;&gt; print(metadata.head()) # doctest: +SKIP\n                                     doc_id                              node_id              file_name\n        0   a25111e2e59f81bb7a0e3efb4825...  cadde590b82362fc7a5f8ce0751c5b30b...  paul_graham_essay.txt\n        1   a25111e2e59f81bb7a0e3efb4825...  0567f3a9756983e1d040ec332255db945...  paul_graham_essay.txt\n        2   a25111e2e59f81bb7a0e3efb4825...  d5542515414f1bf30f6c21f0796af8bde...  paul_graham_essay.txt\n        3   a25111e2e59f81bb7a0e3efb4825...  120b69658a6c69ab8de3167b5ed0db779...  paul_graham_essay.txt\n        &gt;&gt;&gt; docstore = store.docstore # doctest: +SKIP\n        &lt;llama_index.core.storage.docstore.simple_docstore.SimpleDocumentStore at 0x20444d31be0&gt;\n        &gt;&gt;&gt; vector_store = store.vector_store\n        &gt;&gt;&gt; print(type(vector_store))\n        &lt;class 'llama_index.core.vector_stores.simple.SimpleVectorStore'&gt;\n\n        ```\n        \"\"\"\n        if not Path(store_dir).exists():\n            raise StorageNotFoundError(f\"Storage not found at {store_dir}\")\n        storage = StorageContext.from_defaults(persist_dir=store_dir)\n        return cls(storage)\n\n    def __str__(self):\n        \"\"\"Return a string representation of the storage.\"\"\"\n        message = f\"\"\"\n        Documents: {len(self.docstore.docs)}\n        Indexes: {len(self.index_store.index_structs())}\n        \"\"\"\n        return message\n\n    def __repr__(self):\n        \"\"\"Return a string representation of the storage.\"\"\"\n        message = f\"\"\"\n        Documents: {len(self.docstore.docs)}\n        Indexes: {len(self.index_store.index_structs())}\n        \"\"\"\n        return message\n\n    @property\n    def node_metadata(self) -&gt; pd.DataFrame:\n        \"\"\"Get the metadata index.\"\"\"\n        return create_metadata_index_existing_docs(self.docstore.docs)\n\n    def document_metadata(\n        self, as_dataframe: Optional[bool] = False\n    ) -&gt; Union[Dict[str, RefDocInfo], DataFrame]:\n        r\"\"\"Document metadata.\n\n        Get the metadata of all the documents in the docstore.\n\n        Parameters\n        ----------\n        as_dataframe: bool, optional, default is False.\n            True to return the metadata as a DataFrame.\n\n        Returns\n        -------\n        Dict[str, RefDocInfo] or DataFrame\n            The metadata of all the documents in the docstore.\n\n        Examples\n        --------\n        You can get the document metadata as a dictionary using the `metadata` method with the default parameter values:\n        ```python\n        &gt;&gt;&gt; store = Storage.load(\"examples/paul-graham-essay-storage\")\n        &gt;&gt;&gt; metadata = store.document_metadata()\n\n        ```\n        The `metadata` is a dictionary with the document ID as the key and the document metadata as the value:\n        ```python\n        &gt;&gt;&gt; documents_id = list(metadata.keys())\n        &gt;&gt;&gt; print(documents_id) # doctest: +SKIP\n        ['a25111e2e59f81bb7a0e3efb48255f4a5d4f722aaf13ffd112463fb98c227092']\n        &gt;&gt;&gt; print(metadata) # doctest: +SKIP\n        {\n            'a25111e2e59f81bb7a0e3efb48255f4a5d4f722aaf13ffd112463fb98c227092':\n                RefDocInfo(\n                    node_ids=[\n                        'cadde590b82362fc7a5f8ce0751c5b30b11c0f81369df7d83a76956bf22765b7',\n                        '0567f3a9756983e1d040ec332255db94521ed5dc1b03fc7312f653c0e670a0bf',\n                        'd5542515414f1bf30f6c21f0796af8bde4c513f2e72a2df21f0810f10826252f',\n                        '120b69658a6c69ab8de3167b5ed0db77941a2b487e94d5d0e64a0d2d2805a4b7'\n                    ],\n                    metadata={\n                        'file_path': 'examples\\\\data\\\\paul_graham_essay.txt',\n                        'file_name': 'paul_graham_essay.txt',\n                        'file_type': 'text/plain',\n                        'file_size': 75395,\n                        'creation_date': '2024-10-24',\n                        'last_modified_date': '2024-09-16',\n                        'document_title': 'Based on the candidate titles and content, I would suggest a***.'\n                    }\n                )\n            }\n        ```\n        To get the metadata as a DataFrame, you can set the `as_dataframe` parameter to True:\n        ```python\n        &gt;&gt;&gt; metadata = store.document_metadata(as_dataframe=True)\n        &gt;&gt;&gt; print(metadata) # doctest: +SKIP\n                                                       doc_id                                            node_id\n        0   a25111e2e59f81bb7a0e3efb48255f4a5d4f722aaf13ff...  cadde590b82362fc7a5f8ce0751c5b30b11c0f81369df7...\n        1   a25111e2e59f81bb7a0e3efb48255f4a5d4f722aaf13ff...  0567f3a9756983e1d040ec332255db94521ed5dc1b03fc...\n        2   a25111e2e59f81bb7a0e3efb48255f4a5d4f722aaf13ff...  d5542515414f1bf30f6c21f0796af8bde4c513f2e72a2d...\n        ```\n        \"\"\"\n        ref_doc_info: dict = self.docstore.get_all_ref_doc_info()\n        if as_dataframe:\n            doct_node_ids_dict = {}\n            file_name_doc = {}\n            doc_ids = list(ref_doc_info.keys())\n            for doc_id in doc_ids:\n                # get the DocRefInfo object for the first document\n                doc_ref = ref_doc_info[doc_id].to_dict()\n                # get the node ids for the first document\n                node_ids = doc_ref[\"node_ids\"]\n                file_name_doc[doc_id] = doc_ref[\"metadata\"].get(\"file_name\")\n                doct_node_ids_dict[doc_id] = node_ids\n\n            df = pd.DataFrame(\n                list(doct_node_ids_dict.items()), columns=[\"doc_id\", \"node_id\"]\n            )\n            df = df.explode(\"node_id\", ignore_index=True)\n\n            # merge the file name with the doc_id\n            file_name_df = pd.DataFrame(\n                file_name_doc.items(), columns=[\"doc_id\", \"file_name\"]\n            )\n            df = df.merge(file_name_df, on=\"doc_id\", how=\"left\", validate=\"many_to_one\")\n            data = df\n        else:\n            data = ref_doc_info\n        return data\n\n    def node_id_list(self) -&gt; List[str]:\n        \"\"\"Get the metadata of the nodes in the docstore.\n\n        Returns\n        -------\n        Dict[str, Dict[str, Any]]\n            The metadata of the nodes in the docstore.\n\n        Examples\n        --------\n        You can get the metadata of the nodes in the docstore using the `nodes_metadata` method:\n        ```python\n        &gt;&gt;&gt; store = Storage.load(\"examples/paul-graham-essay-storage\")\n        &gt;&gt;&gt; nodes_metadata = store.node_id_list()\n        &gt;&gt;&gt; print(nodes_metadata) # doctest: +SKIP\n        [\n            'cadde590b82362fc7a5f8ce0751c5b30b11c0f81369df7d83a76956bf22765b7',\n            '0567f3a9756983e1d040ec332255db94521ed5dc1b03fc7312f653c0e670a0bf',\n            'd5542515414f1bf30f6c21f0796af8bde4c513f2e72a2df21f0810f10826252f',\n            ...\n        ]\n        ```\n        \"\"\"\n        return list(self.docstore.docs.keys())\n\n    def delete_document(self, doc_id: str = None, document_name: str = None):\n        \"\"\"Delete a document from the docstore.\n\n        Parameters\n        ----------\n        doc_id: str, Optional, Default is None.\n            The ID of the document to delete.\n        document_name: str, optional, default is None.\n            The name of the document to delete.\n\n\n        Notes\n        -----\n        - If the `doc_id` is provided, the document with the specified ID will be deleted.\n        - If the `document_name` is provided, all the nodes related to the document with the specified name will be deleted.\n\n        Examples\n        --------\n        You can delete a document from the document store and all the nodes that are related to it using the\n        `delete_document` method by providing the `document_id`:\n\n        ```python\n        &gt;&gt;&gt; from llama_utils.retrieval.storage import Storage\n        &gt;&gt;&gt; store = Storage.load(\"examples/paul-graham-essay-storage\")\n        &gt;&gt;&gt; document_metadata = store.document_metadata\n        &gt;&gt;&gt; document_id = list(document_metadata().keys())[0]\n        &gt;&gt;&gt; print(document_id) # doctest: +SKIP\n        a25111e2e59f81bb7a0e3efb48255f4a5d4f722aaf13ffd112463fb98c227092\n        &gt;&gt;&gt; store.delete_document(document_id)\n\n        ```\n\n        Now if you check the document_metadata, you will find that the document is deleted:\n\n        ```python\n        &gt;&gt;&gt; print(store.document_metadata())\n        {}\n\n        ```\n\n        You can also delete a document by providing the `document_name`:\n        ```python\n        &gt;&gt;&gt; store = Storage.load(\"examples/paul-graham-essay-storage\")\n        &gt;&gt;&gt; print(store.node_metadata.head()) # doctest: +SKIP\n                       file_name                                            node_id\n        0  paul_graham_essay.txt  cadde590b82362fc7a5f8ce0751c5b30b11c0f81369df7...\n        1  paul_graham_essay.txt  0567f3a9756983e1d040ec332255db94521ed5dc1b03fc...\n        2  paul_graham_essay.txt  d5542515414f1bf30f6c21f0796af8bde4c513f2e72a2d...\n        3  paul_graham_essay.txt  120b69658a6c69ab8de3167b5ed0db77941a2b487e94d5...\n        4  paul_graham_essay.txt  c8587b5b5fc034bb08cd62cf0a082014f00fc09ccd2944...\n        &gt;&gt;&gt; store.delete_document(document_name=\"paul_graham_essay.txt\")\n\n        ```\n        \"\"\"\n        if not document_name:\n            if doc_id not in self.document_metadata().keys():\n                raise ValueError(f\"Document with ID {doc_id} not found.\")\n            self.docstore.delete_ref_doc(doc_id)\n        else:\n            node_ids = self.get_nodes_by_file_name(document_name)\n            for node_id in node_ids:\n                self.delete_node(node_id.node_id)\n\n    def delete_node(self, node_id: str):\n        \"\"\"Delete a node from the docstore.\n\n        Parameters\n        ----------\n        node_id: str\n            The ID of the node to delete.\n\n        Returns\n        -------\n        None\n\n        Examples\n        --------\n        You can delete a node from the document store using the `delete_node` method by providing the `node_id`:\n        ```\n        &gt;&gt;&gt; store = Storage.load(\"examples/paul-graham-essay-storage\")\n        &gt;&gt;&gt; node_id = store.node_id_list()[0]\n        &gt;&gt;&gt; print(node_id)\n        cadde590b82362fc7a5f8ce0751c5b30b11c0f81369df7d83a76956bf22765b7\n        &gt;&gt;&gt; store.delete_node(node_id)\n\n        ```\n        \"\"\"\n        self.docstore.delete_document(node_id)\n\n    def add_documents(\n        self,\n        docs: Sequence[Union[Document, TextNode]],\n        generate_id: bool = True,\n        update: bool = False,\n    ):\n        r\"\"\"Add node/documents to the store.\n\n        The `add_documents` method adds a node to the store. The node's id is a sha256 hash generated based on the\n        node's text content. if the `update` parameter is True and the nodes already exist the existing node will\n        be updated.\n\n        Parameters\n        ----------\n        docs: Sequence[TextNode/Document]\n            The node/documents to add to the store.\n        generate_id: bool, optional, default is False.\n            True if you want to generate a sha256 hash number as a doc_id based on the content of the nodes.\n        update: bool, optional, default is True.\n            True to update the document in the docstore if it already exist.\n\n        Returns\n        -------\n        None\n\n        Examples\n        --------\n        - First create the storage object:\n        ```python\n        &gt;&gt;&gt; store = Storage.create()\n\n        - Then you can add documents to the store using the `add_documents` method:\n\n        &gt;&gt;&gt; data_path = \"examples/data/essay\"\n        &gt;&gt;&gt; documents = Storage.read_documents(data_path)\n        &gt;&gt;&gt; store.add_documents(documents)\n        &gt;&gt;&gt; print(store)\n        &lt;BLANKLINE&gt;\n                Documents: 1\n                Indexes: 0\n        &lt;BLANKLINE&gt;\n\n        - once the documents are added successfully, they are added also to the metadata index.\n\n        &gt;&gt;&gt; metadata = store.node_metadata\n        &gt;&gt;&gt; print(metadata) # doctest: +SKIP\n                        file_name                                            node_id\n        0   paul_graham_essay.txt  cadde590b82362fc7a5f8ce0751c5b30b11c0f81369df7...\n\n        &gt;&gt;&gt; docstore = store.docstore\n        &gt;&gt;&gt; print(docstore.docs) # doctest: +SKIP\n\n        {\n            'a25111e2e59f81bb7a0e3efb48255f4a5d4f722aaf13ffd112463fb98c227092':\n                Document(\n                    id_='a25111e2e59f81bb7a0e3efb48255f4a5d4f722aaf13ffd112463fb98c227092',\n                    embedding=None,\n                    metadata={\n                        'file_path': 'examples\\\\data\\\\essay\\\\paul-graham-essay.txt',\n                        'file_name': 'paul-graham-essay.txt',\n                        'file_type': 'text/plain',\n                        'file_size': 75395,\n                        'creation_date': '2024-10-25',\n                        'last_modified_date': '2024-09-16'\n                    },\n                    excluded_embed_metadata_keys=['file_name'],\n                    excluded_llm_metadata_keys=['file_name'],\n                    relationships={},\n                    text='What I Worked On February 2021 Before college the two ...',\n                    mimetype='text/plain',\n                    start_char_idx=None,\n                    end_char_idx=None,\n                    text_template='{metadata_str}\\n\\n{content}',\n                    metadata_template='{key}: {value}',\n                    metadata_seperator='\\n'\n                )\n        }\n        ```\n        \"\"\"\n        for doc in docs:\n            # change the id to a sha256 hash if it is not already\n            if generate_id:\n                doc.node_id = generate_content_hash(doc.text)\n\n            if not self.docstore.document_exists(doc.node_id) or update:\n                self.docstore.add_documents([doc], allow_update=update)\n            else:\n                print(f\"Document with ID {doc.node_id} already exists. Skipping.\")\n\n    @staticmethod\n    def read_documents(\n        path: Union[str, Path],\n        split_into_nodes: bool = False,\n        chunk_size: int = 1024,\n        chunk_overlap: int = 100,\n        show_progress: bool = False,\n        num_workers: int = None,\n        recursive: bool = False,\n        **kwargs,\n    ) -&gt; List[Union[Document, TextNode]]:\n        r\"\"\"Read documents from a directory and optionally splits them into TextNodes.\n\n        the `read_documents` method reads documents from a directory and returns a list of documents.\n        the `doc_id` is sha256 hash number generated based on the document's text content.\n\n        Parameters\n        ----------\n        path: str\n            path to the directory containing the documents. or a single file path.\n        split_into_nodes : bool, optional\n            If True, splits documents into smaller TextNodes (default: False).\n        chunk_size : int, optional, default is 1024\n            The size of each text chunk. The `chunk_size` Defines the size of each split chunk (in characters).\n            - Larger values preserve more context but increase memory usage.\n            - Smaller values improve retrieval specificity but may lose context.\n        chunk_overlap : int, optional, default is 100.\n            The overlap size between chunks. The `chunk_overlap` ensures adjacent chunks have overlapping content to\n            preserve context.\n            - Higher overlap improves retrieval coherence but increases redundancy.\n            - Lower overlap minimizes redundancy but might break context.\n        show_progress: bool, optional, default is False.\n            True to show progress bar.\n        num_workers: int, optional, default is None.\n            The number of workers to use for loading the data.\n        recursive: bool, optional, default is False.\n            True to read from subdirectories.\n\n        Returns\n        -------\n        Sequence[Union[Document, TextNode]]\n            The documents/nodes read from the store.\n\n        Raises\n        ------\n        FileNotFoundError\n            If the directory is not found.\n\n        Notes\n        -----\n        The best values for `chunk_size` and `chunk_overlap` depend on the type of documents and retrieval needs.\n\n        | **Use Case**                                              | **Recommended `chunk_size`** | **Recommended `chunk_overlap`** |\n        |-----------------------------------------------------------|------------------------------|---------------------------------|\n        | **Short documents (FAQs, structured text, emails)**       | `256 - 512`                  | `50`                           |\n        | **General-purpose (news articles, reports, blog posts)**  | `512 - 1024`                 | `50 - 100`                     |\n        | **Long documents (PDFs, research papers, books)**         | `1024 - 2048`                | `100 - 200`                    |\n        | **Dense technical/scientific papers**                     | `1500 - 2500`                | `200 - 300`                    |\n        | **Conversational AI (chat context memory)**               | `512 - 1024`                 | `50 - 150`                     |\n        | **Legal/contract documents (precise context retention)**  | `2048 - 4096`                | `200 - 400`                    |\n\n        Best Practices:\n        - For most cases, `chunk_size=1024` and `chunk_overlap=100` work well.\n        - If working with FAQs, decrease `chunk_size` to `512`.\n        - If preserving long-form LLM context, use `2048+` with higher overlap.\n\n        Examples\n        --------\n        You can read documents from a directory as follows:\n        ```python\n        &gt;&gt;&gt; from llama_utils.retrieval.storage import Storage\n        &gt;&gt;&gt; data_path = \"examples/data/essay\"\n        &gt;&gt;&gt; docs = Storage.read_documents(data_path)\n        &gt;&gt;&gt; print(docs) # doctest: +SKIP\n        [\n            Document(\n                id_='a25111e2e59f81bb7a0e3efb48255**',\n                embedding=None,\n                metadata={\n                    'file_path': 'examples/data/essay/paul-graham-essay.txt',\n                    'file_name': 'paul-graham-essay.txt',\n                    'file_type': 'text/plain',\n                    'file_size': 75395,\n                    'creation_date': '2024-10-25',\n                    'last_modified_date': '2024-09-16'\n                },\n                excluded_embed_metadata_keys=['file_name'],\n                excluded_llm_metadata_keys=['file_name'],\n                relationships={},\n                text='What I Worked On\\n\\nFebruary 2021\\n\\nBefore college the two main things ****',\n                mimetype='text/plain',\n                start_char_idx=None,\n                end_char_idx=None,\n        4        text_template='{metadata_str}\\n\\n{content}',\n                metadata_template='{key}: {value}',\n                metadata_seperator='\\n'\n            )\n        ]\n        ```\n\n        You can also use the `split_into_nodes` parameter to split the documents into smaller nodes:\n\n        ```python\n        &gt;&gt;&gt; docs = Storage.read_documents(data_path, split_into_nodes=True)\n        &gt;&gt;&gt; print(len(docs))\n        20\n        &gt;&gt;&gt; print(docs[0]) # doctest: +SKIP\n        Node ID: bfdf48ff-3c2b-49a8-ae25-7a837158d2dc\n        Text: What I Worked On    February 2021    Before college the two main\n        things I worked on, outside of school, were writing and programming. I\n        didn't write essays. I wrote what beginning writers were supposed to\n        write then, and probably still are: short stories. My stories were\n        awful. They had hardly any plot, just characters with strong feelings,\n        whic...\n        ```\n        \"\"\"\n        if isinstance(path, str):\n            path = Path(path)\n\n        if not path.exists():\n            raise FileNotFoundError(f\"Directory not found: {path}\")\n\n        if path.is_file():\n            reader = SimpleDirectoryReader(input_files=[path])\n        else:\n            reader = SimpleDirectoryReader(path, recursive=recursive, **kwargs)\n\n        documents = reader.load_data(\n            show_progress=show_progress, num_workers=num_workers, **kwargs\n        )\n\n        if split_into_nodes:\n            # Split documents into nodes.\n            splitter = SentenceSplitter(\n                chunk_size=chunk_size, chunk_overlap=chunk_overlap\n            )\n            documents = splitter.get_nodes_from_documents(documents)\n\n        for doc in documents:\n            # exclude the file name from the llm metadata to avoid affecting the llm by weird file names\n            doc.excluded_llm_metadata_keys = [\"file_name\"]\n            # exclude the file name from the embeddings' metadata to avoid affecting the llm by weird file names\n            doc.excluded_embed_metadata_keys = [\"file_name\"]\n            # Generate a hash based on the document's text content\n            content_hash = generate_content_hash(doc.text)\n            # Assign the hash as the doc_id\n            doc.metadata[\"content-hash\"] = content_hash\n\n        return documents\n\n    def get_nodes_by_file_name(\n        self, file_name: str, exact_match: bool = False\n    ) -&gt; List[BaseNode]:\n        r\"\"\"Get nodes by file name.\n\n        Parameters\n        ----------\n        file_name: str\n            The file name to search for.\n        exact_match: bool, optional, default is False\n            True to search for an exact match, False to search for a partial match.\n\n        Returns\n        -------\n        List[TextNode]\n            The nodes with the specified file name.\n\n        Examples\n        --------\n        - First read the storage context from a directory:\n        ```python\n        &gt;&gt;&gt; storage_dir = \"examples/paul-graham-essay-storage\"\n        &gt;&gt;&gt; store = Storage.load(storage_dir)\n        &gt;&gt;&gt; print(store)\n        &lt;BLANKLINE&gt;\n                Documents: 53\n                Indexes: 2\n        &lt;BLANKLINE&gt;\n\n        - The storage context contains the following data:\n\n        &gt;&gt;&gt; print(store.node_metadata.head(3))\n                       file_name                                            node_id\n        0  paul_graham_essay.txt  cadde590b82362fc7a5f8ce0751c5b30b11c0f81369df7...\n        1  paul_graham_essay.txt  0567f3a9756983e1d040ec332255db94521ed5dc1b03fc...\n        2  paul_graham_essay.txt  d5542515414f1bf30f6c21f0796af8bde4c513f2e72a2d...\n\n\n        You can get all the nodes for file `paul_graham_essay.txt` as follows:\n\n\n        &gt;&gt;&gt; nodes = store.get_nodes_by_file_name(\"paul_graham_essay.txt\")\n        &gt;&gt;&gt; nodes[0] # doctest: +SKIP\n        TextNode(\n            id_='cadde590b82362fc7a5f8ce0751c5b30b11c0f81369df7d83a76956bf22765b7',\n            embedding=None,\n            metadata={\n                'file_path': 'examples\\\\data\\\\paul_graham_essay.txt',\n                'file_name': 'paul_graham_essay.txt',\n                'file_type': 'text/plain',\n                'file_size': 75395,\n                'creation_date': '2024-10-24',\n                'last_modified_date': '2024-09-16',\n                'document_title': 'Based on the candidate titles and content, I would suggest a comprehensive title\n                    that captures the essence of the text. Here\\'s a potential title:\\n\\n\"From Early Days ***'\n            },\n            excluded_embed_metadata_keys=['file_name'],\n            excluded_llm_metadata_keys=['file_name'],\n            relationships={\n                &lt;NodeRelationship.SOURCE: '1'&gt;:\n                RelatedNodeInfo(\n                    node_id='a25111e2e59f81bb7a0e3efb48255f4a5d4f722aaf13ffd112463fb98c227092',\n                    node_type=&lt;ObjectType.DOCUMENT: '4'&gt;,\n                    metadata={\n                        'file_path': 'examples\\\\data\\\\paul_graham_essay.txt',\n                        'file_name': 'paul_graham_essay.txt',\n                        'file_type': 'text/plain',\n                        'file_size': 75395,\n                        'creation_date': '2024-10-24',\n                        'last_modified_date': '2024-09-16'\n                    },\n                    hash='2a494d84cd0ab1e73396773258b809a47739482c90b80d5f61d374e754c3ef06'\n                ),\n                &lt;NodeRelationship.NEXT: '3'&gt;: RelatedNodeInfo(node_id='15478c7a-fdab-40c8-92e7-42973b9d3b28', node_type=&lt;ObjectType.TEXT: '1'&gt;, metadata={}, hash='424546c0aa78015988ced235522cdd238633d5edc1b92667cbdcda44d72613ec')}, text='What I Worked On\\r\\n\\r\\nFebruary 2021\\r\\n\\r\\nBefore college the two main things I worked on, outside of school, were writing and programming. I didn\\'t write essays. I wrote what beginning writers were supposed to write then, and probably still are: short stories. My stories were awful. They had hardly any plot, just characters with strong feelings, which I imagined made them deep.\\r\\n\\r\\nThe first programs I tried writing were on the IBM 1401 that our school district used for what was then called \"data processing.\" This was in 9th grade, so I was 13 or 14. The school district\\'s 1401 happened to be in the basement of our junior high school, and my friend Rich Draves and I got permission to use it. It was like a mini Bond villain\\'s lair down there, with all these alien-looking machines \u2014 CPU, disk drives, printer, card reader \u2014 sitting up on a raised floor under bright fluorescent lights.\\r\\n\\r\\nThe language we used was an early version of Fortran. You had to type programs on punch cards, then stack them in the card reader and press a button to load the program into memory and run it. The result would ordinarily be to print something on the spectacularly loud printer.\\r\\n\\r\\nI was puzzled by the 1401. I couldn\\'t figure out what to do with it. And in retrospect there\\'s not much I could have',\n                mimetype='text/plain',\n                start_char_idx=4,\n                end_char_idx=2027,\n                text_template='[Excerpt from document]\\n{metadata_str}\\nExcerpt:\\n-----\\n{content}\\n-----\\n',\n                metadata_template='{key}: {value}', metadata_seperator='\\n'\n                )\n        ```\n        \"\"\"\n        metadata_index = self.node_metadata\n        if exact_match:\n            doc_ids = metadata_index.loc[\n                metadata_index[\"file_name\"] == file_name, \"node_id\"\n            ].values\n        else:\n            doc_ids = metadata_index.loc[\n                metadata_index[\"file_name\"].str.contains(file_name, regex=True),\n                \"node_id\",\n            ].values\n        docs = self.docstore.get_nodes(doc_ids)\n        return docs\n\n    @staticmethod\n    def apply_extractors(\n        documents: List[Union[Document, BaseNode]],\n        extractors: Dict[str, Dict[str, int]] = None,\n    ) -&gt; Sequence[BaseNode]:\n        r\"\"\"Extract information from a list of documents using predefined extractors.\n\n        Parameters\n        ----------\n        documents : List[Union[Document, BaseNode]]\n            List of documents or nodes to process. Each document should be an instance of `Document` or `BaseNode`.\n        extractors : Dict[str, Dict[str, Any]], optional\n            A dictionary defining the information extraction configuration. If not provided, default extractors will be used.\n\n            - Example format for `info`\n\n             .. code-block:: rst\n\n                {\n                    \"text_splitter\": {\"separator\": \" \", \"chunk_size\": 512, \"chunk_overlap\": 128},\n                    \"title\": {\"nodes\": 5},\n                    \"question_answer\": {\"questions\": 3},\n                    \"summary\": {\"summaries\": [\"prev\", \"self\"]},\n                    \"keyword\": {\"keywords\": 10},\n                    \"entity\": {\"prediction_threshold\": 0.5}\n                }\n\n\n        Returns\n        -------\n        Sequence[BaseNode]\n            A sequence of processed nodes with extracted metadata. Extracted data is stored in the node's `metadata`\n            field under the following keys:\n\n                - \"document_title\": Extracted title.\n                - \"questions_this_excerpt_can_answer\": Extracted questions.\n                - \"summary\": Extracted summaries.\n                - \"keywords\": Extracted keywords.\n                - \"entities\": Extracted entities.\n\n        Examples\n        --------\n        First create a config loader object:\n        ```python\n        &gt;&gt;&gt; from llama_utils.utils.config_loader import ConfigLoader\n        &gt;&gt;&gt; config_loader = ConfigLoader()\n\n        ```\n\n        You can extract information from a single document as follows:\n\n        ```python\n        &gt;&gt;&gt; docs = [Document(text=\"Sample text\", metadata={})]\n        &gt;&gt;&gt; extractors_info = {\n        ...     \"text_splitter\": {\"separator\": \" \", \"chunk_size\": 512, \"chunk_overlap\": 128},\n        ...     \"title\": {\"nodes\": 5},\n        ...     \"summary\": {\"summaries\": [\"prev\", \"self\"]}\n        ... }\n        &gt;&gt;&gt; extracted_nodes = Storage.apply_extractors(docs, extractors_info) # doctest: +SKIP\n        Parsing nodes: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:00&lt;00:00, 1000.31it/s]\n        100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:05&lt;00:00,  5.82s/it]\n        100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:00&lt;00:00,  1.54it/s]\n        &gt;&gt;&gt; len(extracted_nodes) # doctest: +SKIP\n        1\n        &gt;&gt;&gt; print(extracted_nodes[0].document_metadata) # doctest: +SKIP\n        {\n            'document_title': \"I'm excited to help! Unfortunately, there doesn't seem to be any text provided.\n                Please go ahead and share the sample text, and I'll do my best to give you a comprehensive title\n                that summarizes all the unique entities, titles, or themes found in it.\",\n            'section_summary': \"I apologize, but since there is no provided text, I have nothing to summarize.\n                Please provide the sample text, and I'll be happy to help you summarize the key topics and\n                entities!\"\n        }\n        ```\n        You can extract information from a list of documents as follows:\n\n        ```python\n        &gt;&gt;&gt; data_path = \"examples/data/essay\"\n        &gt;&gt;&gt; docs = Storage.read_documents(data_path)\n        &gt;&gt;&gt; extractors_info = {\n        ...     \"text_splitter\": {\"separator\": \" \", \"chunk_size\": 512, \"chunk_overlap\": 128},\n        ...     \"title\": {\"nodes\": 5},\n        ...     \"question_answer\": {\"questions\": 1},\n        ... }\n\n        &gt;&gt;&gt; extracted_docs = Storage.apply_extractors(docs, extractors_info) # doctest: +SKIP\n        Parsing nodes: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:00&lt;00:00,  4.52it/s]\n        100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5/5 [00:15&lt;00:00,  3.19s/it]\n        100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 53/53 [03:46&lt;00:00,  4.27s/it]\n         26%|\u2588\u2588\u258b       | 14/53 [00:48&lt;02:08,  3.29s/it]\n        100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 53/53 [00:47&lt;00:00,  1.13it/s]\n        &gt;&gt;&gt; len(extracted_docs) # doctest: +SKIP\n        53\n        &gt;&gt;&gt; print(extracted_docs[0]) # doctest: +SKIP\n        Node ID: 9b4fca22-7f1f-4876-bb71-d4b29500daa3\n        Text: What I Worked On    February 2021    Before college the two main\n        things I worked on, outside of school, were writing and programming. I\n        didn't write essays. I wrote what beginning writers were supposed to\n        write then, and probably still are: short stories. My stories were\n        awful. They had hardly any plot, just characters with strong feelings,\n        whic...\n        &gt;&gt;&gt; print(extracted_docs[0].extra_info) # doctest: +SKIP\n        {\n            'file_path': 'examples\\\\data\\\\essay\\\\paul-graham-essay.txt',\n            'file_name': 'paul-graham-essay.txt',\n            'file_type': 'text/plain',\n            'file_size': 75395,\n            'creation_date': '2024-10-25',\n            'last_modified_date': '2024-09-16',\n            'document_title': 'After reviewing the potential titles and themes mentioned in the context,\n                I would suggest the following comprehensive title \\n\\n\"A Personal Odyssey ***,'.\n            'questions_this_excerpt_can_answer': \"Based on the provided context, here's a question that this\n                context can specifically answer:\\n\\nWhat was Paul Graham's experience with the IBM ***\",\n            'section_summary': 'Here is a summary of the key topics and entities in the section:\\n\\n**Key\n                Topics:**\\n\\n1. Paul Graham\\'s early experiences with writing and programming.\\n2. His work on ***',\n            'excerpt_keywords': 'Here are three unique keywords for this document:\\n\\nPaul Graham, IBM 1401,\n                Microcomputers'\n        }\n        ```\n        \"\"\"\n        extractors = EXTRACTORS.copy() if extractors is None else extractors\n\n        extractors = [\n            EXTRACTORS[key](**val)\n            for key, val in extractors.items()\n            if key in EXTRACTORS\n        ]\n        pipeline = IngestionPipeline(transformations=extractors)\n\n        nodes = pipeline.run(\n            documents=documents,\n            in_place=True,\n            show_progress=True,\n        )\n        return nodes\n</code></pre>"},{"location":"api/storage.html#llama_utils.retrieval.storage.Storage.docstore","title":"<code>docstore: BaseDocumentStore</code>  <code>property</code>","text":"<p>Get the document store.</p>"},{"location":"api/storage.html#llama_utils.retrieval.storage.Storage.index_store","title":"<code>index_store: BaseIndexStore</code>  <code>property</code>","text":"<p>Get the index store.</p>"},{"location":"api/storage.html#llama_utils.retrieval.storage.Storage.node_metadata","title":"<code>node_metadata: pd.DataFrame</code>  <code>property</code>","text":"<p>Get the metadata index.</p>"},{"location":"api/storage.html#llama_utils.retrieval.storage.Storage.store","title":"<code>store: StorageContext</code>  <code>property</code>","text":"<p>Get the Storage context.</p>"},{"location":"api/storage.html#llama_utils.retrieval.storage.Storage.vector_store","title":"<code>vector_store</code>  <code>property</code>","text":"<p>Get the vector store.</p>"},{"location":"api/storage.html#llama_utils.retrieval.storage.Storage.__init__","title":"<code>__init__(storage_context: StorageContext = None)</code>","text":"<p>Initialize the Storage.</p> <p>The constructor method takes a llama_index.core.StorageContext object that is a native llamaIndex object and a metadata table (pandas.DataFrame-optional) as input.</p> <p>Parameters:</p> Name Type Description Default <code>storage_context</code> <code>StorageContext</code> <p>the StorageContext object that is created by LlamaIndex (a native llamaIndex object).</p> <code>None</code> Source code in <code>src/llama_utils/retrieval/storage.py</code> <pre><code>def __init__(\n    self,\n    storage_context: StorageContext = None,\n):\n    \"\"\"Initialize the Storage.\n\n    The constructor method takes a llama_index.core.StorageContext object that is a native llamaIndex object\n    and a metadata table (pandas.DataFrame-optional) as input.\n\n    Parameters\n    ----------\n    storage_context: str, optional, default is None.\n        the StorageContext object that is created by LlamaIndex (a native llamaIndex object).\n\n    \"\"\"\n    if not isinstance(storage_context, StorageContext):\n        raise ValueError(\n            f\"Storage class should be instantiated using StorageContext object, given: {storage_context}\"\n        )\n\n    self._store = storage_context\n</code></pre>"},{"location":"api/storage.html#llama_utils.retrieval.storage.Storage.__repr__","title":"<code>__repr__()</code>","text":"<p>Return a string representation of the storage.</p> Source code in <code>src/llama_utils/retrieval/storage.py</code> <pre><code>def __repr__(self):\n    \"\"\"Return a string representation of the storage.\"\"\"\n    message = f\"\"\"\n    Documents: {len(self.docstore.docs)}\n    Indexes: {len(self.index_store.index_structs())}\n    \"\"\"\n    return message\n</code></pre>"},{"location":"api/storage.html#llama_utils.retrieval.storage.Storage.__str__","title":"<code>__str__()</code>","text":"<p>Return a string representation of the storage.</p> Source code in <code>src/llama_utils/retrieval/storage.py</code> <pre><code>def __str__(self):\n    \"\"\"Return a string representation of the storage.\"\"\"\n    message = f\"\"\"\n    Documents: {len(self.docstore.docs)}\n    Indexes: {len(self.index_store.index_structs())}\n    \"\"\"\n    return message\n</code></pre>"},{"location":"api/storage.html#llama_utils.retrieval.storage.Storage.add_documents","title":"<code>add_documents(docs: Sequence[Union[Document, TextNode]], generate_id: bool = True, update: bool = False)</code>","text":"<p>Add node/documents to the store.</p> <p>The <code>add_documents</code> method adds a node to the store. The node's id is a sha256 hash generated based on the node's text content. if the <code>update</code> parameter is True and the nodes already exist the existing node will be updated.</p> <p>Parameters:</p> Name Type Description Default <code>docs</code> <code>Sequence[Union[Document, TextNode]]</code> <p>The node/documents to add to the store.</p> required <code>generate_id</code> <code>bool</code> <p>True if you want to generate a sha256 hash number as a doc_id based on the content of the nodes.</p> <code>True</code> <code>update</code> <code>bool</code> <p>True to update the document in the docstore if it already exist.</p> <code>False</code> <p>Returns:</p> Type Description <code>None</code> <p>Examples:</p> <ul> <li>First create the storage object: <pre><code>&gt;&gt;&gt; store = Storage.create()\n\n- Then you can add documents to the store using the `add_documents` method:\n\n&gt;&gt;&gt; data_path = \"examples/data/essay\"\n&gt;&gt;&gt; documents = Storage.read_documents(data_path)\n&gt;&gt;&gt; store.add_documents(documents)\n&gt;&gt;&gt; print(store)\n&lt;BLANKLINE&gt;\n        Documents: 1\n        Indexes: 0\n&lt;BLANKLINE&gt;\n\n- once the documents are added successfully, they are added also to the metadata index.\n\n&gt;&gt;&gt; metadata = store.node_metadata\n&gt;&gt;&gt; print(metadata) # doctest: +SKIP\n                file_name                                            node_id\n0   paul_graham_essay.txt  cadde590b82362fc7a5f8ce0751c5b30b11c0f81369df7...\n\n&gt;&gt;&gt; docstore = store.docstore\n&gt;&gt;&gt; print(docstore.docs) # doctest: +SKIP\n\n{\n    'a25111e2e59f81bb7a0e3efb48255f4a5d4f722aaf13ffd112463fb98c227092':\n        Document(\n            id_='a25111e2e59f81bb7a0e3efb48255f4a5d4f722aaf13ffd112463fb98c227092',\n            embedding=None,\n            metadata={\n                'file_path': 'examples\\\\data\\\\essay\\\\paul-graham-essay.txt',\n                'file_name': 'paul-graham-essay.txt',\n                'file_type': 'text/plain',\n                'file_size': 75395,\n                'creation_date': '2024-10-25',\n                'last_modified_date': '2024-09-16'\n            },\n            excluded_embed_metadata_keys=['file_name'],\n            excluded_llm_metadata_keys=['file_name'],\n            relationships={},\n            text='What I Worked On February 2021 Before college the two ...',\n            mimetype='text/plain',\n            start_char_idx=None,\n            end_char_idx=None,\n            text_template='{metadata_str}\\n\\n{content}',\n            metadata_template='{key}: {value}',\n            metadata_seperator='\\n'\n        )\n}\n</code></pre></li> </ul> Source code in <code>src/llama_utils/retrieval/storage.py</code> <pre><code>def add_documents(\n    self,\n    docs: Sequence[Union[Document, TextNode]],\n    generate_id: bool = True,\n    update: bool = False,\n):\n    r\"\"\"Add node/documents to the store.\n\n    The `add_documents` method adds a node to the store. The node's id is a sha256 hash generated based on the\n    node's text content. if the `update` parameter is True and the nodes already exist the existing node will\n    be updated.\n\n    Parameters\n    ----------\n    docs: Sequence[TextNode/Document]\n        The node/documents to add to the store.\n    generate_id: bool, optional, default is False.\n        True if you want to generate a sha256 hash number as a doc_id based on the content of the nodes.\n    update: bool, optional, default is True.\n        True to update the document in the docstore if it already exist.\n\n    Returns\n    -------\n    None\n\n    Examples\n    --------\n    - First create the storage object:\n    ```python\n    &gt;&gt;&gt; store = Storage.create()\n\n    - Then you can add documents to the store using the `add_documents` method:\n\n    &gt;&gt;&gt; data_path = \"examples/data/essay\"\n    &gt;&gt;&gt; documents = Storage.read_documents(data_path)\n    &gt;&gt;&gt; store.add_documents(documents)\n    &gt;&gt;&gt; print(store)\n    &lt;BLANKLINE&gt;\n            Documents: 1\n            Indexes: 0\n    &lt;BLANKLINE&gt;\n\n    - once the documents are added successfully, they are added also to the metadata index.\n\n    &gt;&gt;&gt; metadata = store.node_metadata\n    &gt;&gt;&gt; print(metadata) # doctest: +SKIP\n                    file_name                                            node_id\n    0   paul_graham_essay.txt  cadde590b82362fc7a5f8ce0751c5b30b11c0f81369df7...\n\n    &gt;&gt;&gt; docstore = store.docstore\n    &gt;&gt;&gt; print(docstore.docs) # doctest: +SKIP\n\n    {\n        'a25111e2e59f81bb7a0e3efb48255f4a5d4f722aaf13ffd112463fb98c227092':\n            Document(\n                id_='a25111e2e59f81bb7a0e3efb48255f4a5d4f722aaf13ffd112463fb98c227092',\n                embedding=None,\n                metadata={\n                    'file_path': 'examples\\\\data\\\\essay\\\\paul-graham-essay.txt',\n                    'file_name': 'paul-graham-essay.txt',\n                    'file_type': 'text/plain',\n                    'file_size': 75395,\n                    'creation_date': '2024-10-25',\n                    'last_modified_date': '2024-09-16'\n                },\n                excluded_embed_metadata_keys=['file_name'],\n                excluded_llm_metadata_keys=['file_name'],\n                relationships={},\n                text='What I Worked On February 2021 Before college the two ...',\n                mimetype='text/plain',\n                start_char_idx=None,\n                end_char_idx=None,\n                text_template='{metadata_str}\\n\\n{content}',\n                metadata_template='{key}: {value}',\n                metadata_seperator='\\n'\n            )\n    }\n    ```\n    \"\"\"\n    for doc in docs:\n        # change the id to a sha256 hash if it is not already\n        if generate_id:\n            doc.node_id = generate_content_hash(doc.text)\n\n        if not self.docstore.document_exists(doc.node_id) or update:\n            self.docstore.add_documents([doc], allow_update=update)\n        else:\n            print(f\"Document with ID {doc.node_id} already exists. Skipping.\")\n</code></pre>"},{"location":"api/storage.html#llama_utils.retrieval.storage.Storage.apply_extractors","title":"<code>apply_extractors(documents: List[Union[Document, BaseNode]], extractors: Dict[str, Dict[str, int]] = None) -&gt; Sequence[BaseNode]</code>  <code>staticmethod</code>","text":"<p>Extract information from a list of documents using predefined extractors.</p> <p>Parameters:</p> Name Type Description Default <code>documents</code> <code>List[Union[Document, BaseNode]]</code> <p>List of documents or nodes to process. Each document should be an instance of <code>Document</code> or <code>BaseNode</code>.</p> required <code>extractors</code> <code>Dict[str, Dict[str, Any]]</code> <p>A dictionary defining the information extraction configuration. If not provided, default extractors will be used.</p> <ul> <li>Example format for <code>info</code></li> </ul> <p>.. code-block:: rst</p> <pre><code>{\n    \"text_splitter\": {\"separator\": \" \", \"chunk_size\": 512, \"chunk_overlap\": 128},\n    \"title\": {\"nodes\": 5},\n    \"question_answer\": {\"questions\": 3},\n    \"summary\": {\"summaries\": [\"prev\", \"self\"]},\n    \"keyword\": {\"keywords\": 10},\n    \"entity\": {\"prediction_threshold\": 0.5}\n}\n</code></pre> <code>None</code> <p>Returns:</p> Type Description <code>Sequence[BaseNode]</code> <p>A sequence of processed nodes with extracted metadata. Extracted data is stored in the node's <code>metadata</code> field under the following keys:</p> <pre><code>- \"document_title\": Extracted title.\n- \"questions_this_excerpt_can_answer\": Extracted questions.\n- \"summary\": Extracted summaries.\n- \"keywords\": Extracted keywords.\n- \"entities\": Extracted entities.\n</code></pre> <p>Examples:</p> <p>First create a config loader object: <pre><code>&gt;&gt;&gt; from llama_utils.utils.config_loader import ConfigLoader\n&gt;&gt;&gt; config_loader = ConfigLoader()\n</code></pre></p> <p>You can extract information from a single document as follows:</p> <p><pre><code>&gt;&gt;&gt; docs = [Document(text=\"Sample text\", metadata={})]\n&gt;&gt;&gt; extractors_info = {\n...     \"text_splitter\": {\"separator\": \" \", \"chunk_size\": 512, \"chunk_overlap\": 128},\n...     \"title\": {\"nodes\": 5},\n...     \"summary\": {\"summaries\": [\"prev\", \"self\"]}\n... }\n&gt;&gt;&gt; extracted_nodes = Storage.apply_extractors(docs, extractors_info) # doctest: +SKIP\nParsing nodes: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:00&lt;00:00, 1000.31it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:05&lt;00:00,  5.82s/it]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:00&lt;00:00,  1.54it/s]\n&gt;&gt;&gt; len(extracted_nodes) # doctest: +SKIP\n1\n&gt;&gt;&gt; print(extracted_nodes[0].document_metadata) # doctest: +SKIP\n{\n    'document_title': \"I'm excited to help! Unfortunately, there doesn't seem to be any text provided.\n        Please go ahead and share the sample text, and I'll do my best to give you a comprehensive title\n        that summarizes all the unique entities, titles, or themes found in it.\",\n    'section_summary': \"I apologize, but since there is no provided text, I have nothing to summarize.\n        Please provide the sample text, and I'll be happy to help you summarize the key topics and\n        entities!\"\n}\n</code></pre> You can extract information from a list of documents as follows:</p> <pre><code>&gt;&gt;&gt; data_path = \"examples/data/essay\"\n&gt;&gt;&gt; docs = Storage.read_documents(data_path)\n&gt;&gt;&gt; extractors_info = {\n...     \"text_splitter\": {\"separator\": \" \", \"chunk_size\": 512, \"chunk_overlap\": 128},\n...     \"title\": {\"nodes\": 5},\n...     \"question_answer\": {\"questions\": 1},\n... }\n\n&gt;&gt;&gt; extracted_docs = Storage.apply_extractors(docs, extractors_info) # doctest: +SKIP\nParsing nodes: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:00&lt;00:00,  4.52it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5/5 [00:15&lt;00:00,  3.19s/it]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 53/53 [03:46&lt;00:00,  4.27s/it]\n 26%|\u2588\u2588\u258b       | 14/53 [00:48&lt;02:08,  3.29s/it]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 53/53 [00:47&lt;00:00,  1.13it/s]\n&gt;&gt;&gt; len(extracted_docs) # doctest: +SKIP\n53\n&gt;&gt;&gt; print(extracted_docs[0]) # doctest: +SKIP\nNode ID: 9b4fca22-7f1f-4876-bb71-d4b29500daa3\nText: What I Worked On    February 2021    Before college the two main\nthings I worked on, outside of school, were writing and programming. I\ndidn't write essays. I wrote what beginning writers were supposed to\nwrite then, and probably still are: short stories. My stories were\nawful. They had hardly any plot, just characters with strong feelings,\nwhic...\n&gt;&gt;&gt; print(extracted_docs[0].extra_info) # doctest: +SKIP\n{\n    'file_path': 'examples\\\\data\\\\essay\\\\paul-graham-essay.txt',\n    'file_name': 'paul-graham-essay.txt',\n    'file_type': 'text/plain',\n    'file_size': 75395,\n    'creation_date': '2024-10-25',\n    'last_modified_date': '2024-09-16',\n    'document_title': 'After reviewing the potential titles and themes mentioned in the context,\n        I would suggest the following comprehensive title \\n\\n\"A Personal Odyssey ***,'.\n    'questions_this_excerpt_can_answer': \"Based on the provided context, here's a question that this\n        context can specifically answer:\\n\\nWhat was Paul Graham's experience with the IBM ***\",\n    'section_summary': 'Here is a summary of the key topics and entities in the section:\\n\\n**Key\n        Topics:**\\n\\n1. Paul Graham\\'s early experiences with writing and programming.\\n2. His work on ***',\n    'excerpt_keywords': 'Here are three unique keywords for this document:\\n\\nPaul Graham, IBM 1401,\n        Microcomputers'\n}\n</code></pre> Source code in <code>src/llama_utils/retrieval/storage.py</code> <pre><code>@staticmethod\ndef apply_extractors(\n    documents: List[Union[Document, BaseNode]],\n    extractors: Dict[str, Dict[str, int]] = None,\n) -&gt; Sequence[BaseNode]:\n    r\"\"\"Extract information from a list of documents using predefined extractors.\n\n    Parameters\n    ----------\n    documents : List[Union[Document, BaseNode]]\n        List of documents or nodes to process. Each document should be an instance of `Document` or `BaseNode`.\n    extractors : Dict[str, Dict[str, Any]], optional\n        A dictionary defining the information extraction configuration. If not provided, default extractors will be used.\n\n        - Example format for `info`\n\n         .. code-block:: rst\n\n            {\n                \"text_splitter\": {\"separator\": \" \", \"chunk_size\": 512, \"chunk_overlap\": 128},\n                \"title\": {\"nodes\": 5},\n                \"question_answer\": {\"questions\": 3},\n                \"summary\": {\"summaries\": [\"prev\", \"self\"]},\n                \"keyword\": {\"keywords\": 10},\n                \"entity\": {\"prediction_threshold\": 0.5}\n            }\n\n\n    Returns\n    -------\n    Sequence[BaseNode]\n        A sequence of processed nodes with extracted metadata. Extracted data is stored in the node's `metadata`\n        field under the following keys:\n\n            - \"document_title\": Extracted title.\n            - \"questions_this_excerpt_can_answer\": Extracted questions.\n            - \"summary\": Extracted summaries.\n            - \"keywords\": Extracted keywords.\n            - \"entities\": Extracted entities.\n\n    Examples\n    --------\n    First create a config loader object:\n    ```python\n    &gt;&gt;&gt; from llama_utils.utils.config_loader import ConfigLoader\n    &gt;&gt;&gt; config_loader = ConfigLoader()\n\n    ```\n\n    You can extract information from a single document as follows:\n\n    ```python\n    &gt;&gt;&gt; docs = [Document(text=\"Sample text\", metadata={})]\n    &gt;&gt;&gt; extractors_info = {\n    ...     \"text_splitter\": {\"separator\": \" \", \"chunk_size\": 512, \"chunk_overlap\": 128},\n    ...     \"title\": {\"nodes\": 5},\n    ...     \"summary\": {\"summaries\": [\"prev\", \"self\"]}\n    ... }\n    &gt;&gt;&gt; extracted_nodes = Storage.apply_extractors(docs, extractors_info) # doctest: +SKIP\n    Parsing nodes: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:00&lt;00:00, 1000.31it/s]\n    100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:05&lt;00:00,  5.82s/it]\n    100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:00&lt;00:00,  1.54it/s]\n    &gt;&gt;&gt; len(extracted_nodes) # doctest: +SKIP\n    1\n    &gt;&gt;&gt; print(extracted_nodes[0].document_metadata) # doctest: +SKIP\n    {\n        'document_title': \"I'm excited to help! Unfortunately, there doesn't seem to be any text provided.\n            Please go ahead and share the sample text, and I'll do my best to give you a comprehensive title\n            that summarizes all the unique entities, titles, or themes found in it.\",\n        'section_summary': \"I apologize, but since there is no provided text, I have nothing to summarize.\n            Please provide the sample text, and I'll be happy to help you summarize the key topics and\n            entities!\"\n    }\n    ```\n    You can extract information from a list of documents as follows:\n\n    ```python\n    &gt;&gt;&gt; data_path = \"examples/data/essay\"\n    &gt;&gt;&gt; docs = Storage.read_documents(data_path)\n    &gt;&gt;&gt; extractors_info = {\n    ...     \"text_splitter\": {\"separator\": \" \", \"chunk_size\": 512, \"chunk_overlap\": 128},\n    ...     \"title\": {\"nodes\": 5},\n    ...     \"question_answer\": {\"questions\": 1},\n    ... }\n\n    &gt;&gt;&gt; extracted_docs = Storage.apply_extractors(docs, extractors_info) # doctest: +SKIP\n    Parsing nodes: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:00&lt;00:00,  4.52it/s]\n    100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5/5 [00:15&lt;00:00,  3.19s/it]\n    100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 53/53 [03:46&lt;00:00,  4.27s/it]\n     26%|\u2588\u2588\u258b       | 14/53 [00:48&lt;02:08,  3.29s/it]\n    100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 53/53 [00:47&lt;00:00,  1.13it/s]\n    &gt;&gt;&gt; len(extracted_docs) # doctest: +SKIP\n    53\n    &gt;&gt;&gt; print(extracted_docs[0]) # doctest: +SKIP\n    Node ID: 9b4fca22-7f1f-4876-bb71-d4b29500daa3\n    Text: What I Worked On    February 2021    Before college the two main\n    things I worked on, outside of school, were writing and programming. I\n    didn't write essays. I wrote what beginning writers were supposed to\n    write then, and probably still are: short stories. My stories were\n    awful. They had hardly any plot, just characters with strong feelings,\n    whic...\n    &gt;&gt;&gt; print(extracted_docs[0].extra_info) # doctest: +SKIP\n    {\n        'file_path': 'examples\\\\data\\\\essay\\\\paul-graham-essay.txt',\n        'file_name': 'paul-graham-essay.txt',\n        'file_type': 'text/plain',\n        'file_size': 75395,\n        'creation_date': '2024-10-25',\n        'last_modified_date': '2024-09-16',\n        'document_title': 'After reviewing the potential titles and themes mentioned in the context,\n            I would suggest the following comprehensive title \\n\\n\"A Personal Odyssey ***,'.\n        'questions_this_excerpt_can_answer': \"Based on the provided context, here's a question that this\n            context can specifically answer:\\n\\nWhat was Paul Graham's experience with the IBM ***\",\n        'section_summary': 'Here is a summary of the key topics and entities in the section:\\n\\n**Key\n            Topics:**\\n\\n1. Paul Graham\\'s early experiences with writing and programming.\\n2. His work on ***',\n        'excerpt_keywords': 'Here are three unique keywords for this document:\\n\\nPaul Graham, IBM 1401,\n            Microcomputers'\n    }\n    ```\n    \"\"\"\n    extractors = EXTRACTORS.copy() if extractors is None else extractors\n\n    extractors = [\n        EXTRACTORS[key](**val)\n        for key, val in extractors.items()\n        if key in EXTRACTORS\n    ]\n    pipeline = IngestionPipeline(transformations=extractors)\n\n    nodes = pipeline.run(\n        documents=documents,\n        in_place=True,\n        show_progress=True,\n    )\n    return nodes\n</code></pre>"},{"location":"api/storage.html#llama_utils.retrieval.storage.Storage.create","title":"<code>create() -&gt; Storage</code>  <code>classmethod</code>","text":"<p>Create a new in-memory Storage.</p> <p>Returns:</p> Name Type Description <code>Storage</code> <code>Storage</code> <p>The storage Context.</p> <p>Examples:</p> <p>You can create a new storage (in-memory) using the <code>create</code> method as follows:</p> <pre><code>&gt;&gt;&gt; store = Storage.create()\n&gt;&gt;&gt; print(store)\n&lt;BLANKLINE&gt;\n        Documents: 0\n        Indexes: 0\n&lt;BLANKLINE&gt;\n</code></pre> Source code in <code>src/llama_utils/retrieval/storage.py</code> <pre><code>@classmethod\ndef create(cls) -&gt; \"Storage\":\n    \"\"\"Create a new in-memory Storage.\n\n    Returns\n    -------\n    Storage:\n        The storage Context.\n\n    Examples\n    --------\n    You can create a new storage (in-memory) using the `create` method as follows:\n\n    ```python\n    &gt;&gt;&gt; store = Storage.create()\n    &gt;&gt;&gt; print(store)\n    &lt;BLANKLINE&gt;\n            Documents: 0\n            Indexes: 0\n    &lt;BLANKLINE&gt;\n\n    ```\n    \"\"\"\n    storage = cls._create_simple_storage_context()\n    return cls(storage)\n</code></pre>"},{"location":"api/storage.html#llama_utils.retrieval.storage.Storage.delete_document","title":"<code>delete_document(doc_id: str = None, document_name: str = None)</code>","text":"<p>Delete a document from the docstore.</p> <p>Parameters:</p> Name Type Description Default <code>doc_id</code> <code>str</code> <p>The ID of the document to delete.</p> <code>None</code> <code>document_name</code> <code>str</code> <p>The name of the document to delete.</p> <code>None</code> Notes <ul> <li>If the <code>doc_id</code> is provided, the document with the specified ID will be deleted.</li> <li>If the <code>document_name</code> is provided, all the nodes related to the document with the specified name will be deleted.</li> </ul> <p>Examples:</p> <p>You can delete a document from the document store and all the nodes that are related to it using the <code>delete_document</code> method by providing the <code>document_id</code>:</p> <pre><code>&gt;&gt;&gt; from llama_utils.retrieval.storage import Storage\n&gt;&gt;&gt; store = Storage.load(\"examples/paul-graham-essay-storage\")\n&gt;&gt;&gt; document_metadata = store.document_metadata\n&gt;&gt;&gt; document_id = list(document_metadata().keys())[0]\n&gt;&gt;&gt; print(document_id) # doctest: +SKIP\na25111e2e59f81bb7a0e3efb48255f4a5d4f722aaf13ffd112463fb98c227092\n&gt;&gt;&gt; store.delete_document(document_id)\n</code></pre> <p>Now if you check the document_metadata, you will find that the document is deleted:</p> <pre><code>&gt;&gt;&gt; print(store.document_metadata())\n{}\n</code></pre> <p>You can also delete a document by providing the <code>document_name</code>: <pre><code>&gt;&gt;&gt; store = Storage.load(\"examples/paul-graham-essay-storage\")\n&gt;&gt;&gt; print(store.node_metadata.head()) # doctest: +SKIP\n               file_name                                            node_id\n0  paul_graham_essay.txt  cadde590b82362fc7a5f8ce0751c5b30b11c0f81369df7...\n1  paul_graham_essay.txt  0567f3a9756983e1d040ec332255db94521ed5dc1b03fc...\n2  paul_graham_essay.txt  d5542515414f1bf30f6c21f0796af8bde4c513f2e72a2d...\n3  paul_graham_essay.txt  120b69658a6c69ab8de3167b5ed0db77941a2b487e94d5...\n4  paul_graham_essay.txt  c8587b5b5fc034bb08cd62cf0a082014f00fc09ccd2944...\n&gt;&gt;&gt; store.delete_document(document_name=\"paul_graham_essay.txt\")\n</code></pre></p> Source code in <code>src/llama_utils/retrieval/storage.py</code> <pre><code>def delete_document(self, doc_id: str = None, document_name: str = None):\n    \"\"\"Delete a document from the docstore.\n\n    Parameters\n    ----------\n    doc_id: str, Optional, Default is None.\n        The ID of the document to delete.\n    document_name: str, optional, default is None.\n        The name of the document to delete.\n\n\n    Notes\n    -----\n    - If the `doc_id` is provided, the document with the specified ID will be deleted.\n    - If the `document_name` is provided, all the nodes related to the document with the specified name will be deleted.\n\n    Examples\n    --------\n    You can delete a document from the document store and all the nodes that are related to it using the\n    `delete_document` method by providing the `document_id`:\n\n    ```python\n    &gt;&gt;&gt; from llama_utils.retrieval.storage import Storage\n    &gt;&gt;&gt; store = Storage.load(\"examples/paul-graham-essay-storage\")\n    &gt;&gt;&gt; document_metadata = store.document_metadata\n    &gt;&gt;&gt; document_id = list(document_metadata().keys())[0]\n    &gt;&gt;&gt; print(document_id) # doctest: +SKIP\n    a25111e2e59f81bb7a0e3efb48255f4a5d4f722aaf13ffd112463fb98c227092\n    &gt;&gt;&gt; store.delete_document(document_id)\n\n    ```\n\n    Now if you check the document_metadata, you will find that the document is deleted:\n\n    ```python\n    &gt;&gt;&gt; print(store.document_metadata())\n    {}\n\n    ```\n\n    You can also delete a document by providing the `document_name`:\n    ```python\n    &gt;&gt;&gt; store = Storage.load(\"examples/paul-graham-essay-storage\")\n    &gt;&gt;&gt; print(store.node_metadata.head()) # doctest: +SKIP\n                   file_name                                            node_id\n    0  paul_graham_essay.txt  cadde590b82362fc7a5f8ce0751c5b30b11c0f81369df7...\n    1  paul_graham_essay.txt  0567f3a9756983e1d040ec332255db94521ed5dc1b03fc...\n    2  paul_graham_essay.txt  d5542515414f1bf30f6c21f0796af8bde4c513f2e72a2d...\n    3  paul_graham_essay.txt  120b69658a6c69ab8de3167b5ed0db77941a2b487e94d5...\n    4  paul_graham_essay.txt  c8587b5b5fc034bb08cd62cf0a082014f00fc09ccd2944...\n    &gt;&gt;&gt; store.delete_document(document_name=\"paul_graham_essay.txt\")\n\n    ```\n    \"\"\"\n    if not document_name:\n        if doc_id not in self.document_metadata().keys():\n            raise ValueError(f\"Document with ID {doc_id} not found.\")\n        self.docstore.delete_ref_doc(doc_id)\n    else:\n        node_ids = self.get_nodes_by_file_name(document_name)\n        for node_id in node_ids:\n            self.delete_node(node_id.node_id)\n</code></pre>"},{"location":"api/storage.html#llama_utils.retrieval.storage.Storage.delete_node","title":"<code>delete_node(node_id: str)</code>","text":"<p>Delete a node from the docstore.</p> <p>Parameters:</p> Name Type Description Default <code>node_id</code> <code>str</code> <p>The ID of the node to delete.</p> required <p>Returns:</p> Type Description <code>None</code> <p>Examples:</p> <p>You can delete a node from the document store using the <code>delete_node</code> method by providing the <code>node_id</code>: <pre><code>&gt;&gt;&gt; store = Storage.load(\"examples/paul-graham-essay-storage\")\n&gt;&gt;&gt; node_id = store.node_id_list()[0]\n&gt;&gt;&gt; print(node_id)\ncadde590b82362fc7a5f8ce0751c5b30b11c0f81369df7d83a76956bf22765b7\n&gt;&gt;&gt; store.delete_node(node_id)\n</code></pre></p> Source code in <code>src/llama_utils/retrieval/storage.py</code> <pre><code>def delete_node(self, node_id: str):\n    \"\"\"Delete a node from the docstore.\n\n    Parameters\n    ----------\n    node_id: str\n        The ID of the node to delete.\n\n    Returns\n    -------\n    None\n\n    Examples\n    --------\n    You can delete a node from the document store using the `delete_node` method by providing the `node_id`:\n    ```\n    &gt;&gt;&gt; store = Storage.load(\"examples/paul-graham-essay-storage\")\n    &gt;&gt;&gt; node_id = store.node_id_list()[0]\n    &gt;&gt;&gt; print(node_id)\n    cadde590b82362fc7a5f8ce0751c5b30b11c0f81369df7d83a76956bf22765b7\n    &gt;&gt;&gt; store.delete_node(node_id)\n\n    ```\n    \"\"\"\n    self.docstore.delete_document(node_id)\n</code></pre>"},{"location":"api/storage.html#llama_utils.retrieval.storage.Storage.document_metadata","title":"<code>document_metadata(as_dataframe: Optional[bool] = False) -&gt; Union[Dict[str, RefDocInfo], DataFrame]</code>","text":"<p>Document metadata.</p> <p>Get the metadata of all the documents in the docstore.</p> <p>Parameters:</p> Name Type Description Default <code>as_dataframe</code> <code>Optional[bool]</code> <p>True to return the metadata as a DataFrame.</p> <code>False</code> <p>Returns:</p> Type Description <code>Dict[str, RefDocInfo] or DataFrame</code> <p>The metadata of all the documents in the docstore.</p> <p>Examples:</p> <p>You can get the document metadata as a dictionary using the <code>metadata</code> method with the default parameter values: <pre><code>&gt;&gt;&gt; store = Storage.load(\"examples/paul-graham-essay-storage\")\n&gt;&gt;&gt; metadata = store.document_metadata()\n</code></pre> The <code>metadata</code> is a dictionary with the document ID as the key and the document metadata as the value: <pre><code>&gt;&gt;&gt; documents_id = list(metadata.keys())\n&gt;&gt;&gt; print(documents_id) # doctest: +SKIP\n['a25111e2e59f81bb7a0e3efb48255f4a5d4f722aaf13ffd112463fb98c227092']\n&gt;&gt;&gt; print(metadata) # doctest: +SKIP\n{\n    'a25111e2e59f81bb7a0e3efb48255f4a5d4f722aaf13ffd112463fb98c227092':\n        RefDocInfo(\n            node_ids=[\n                'cadde590b82362fc7a5f8ce0751c5b30b11c0f81369df7d83a76956bf22765b7',\n                '0567f3a9756983e1d040ec332255db94521ed5dc1b03fc7312f653c0e670a0bf',\n                'd5542515414f1bf30f6c21f0796af8bde4c513f2e72a2df21f0810f10826252f',\n                '120b69658a6c69ab8de3167b5ed0db77941a2b487e94d5d0e64a0d2d2805a4b7'\n            ],\n            metadata={\n                'file_path': 'examples\\\\data\\\\paul_graham_essay.txt',\n                'file_name': 'paul_graham_essay.txt',\n                'file_type': 'text/plain',\n                'file_size': 75395,\n                'creation_date': '2024-10-24',\n                'last_modified_date': '2024-09-16',\n                'document_title': 'Based on the candidate titles and content, I would suggest a***.'\n            }\n        )\n    }\n</code></pre> To get the metadata as a DataFrame, you can set the <code>as_dataframe</code> parameter to True: <pre><code>&gt;&gt;&gt; metadata = store.document_metadata(as_dataframe=True)\n&gt;&gt;&gt; print(metadata) # doctest: +SKIP\n                                               doc_id                                            node_id\n0   a25111e2e59f81bb7a0e3efb48255f4a5d4f722aaf13ff...  cadde590b82362fc7a5f8ce0751c5b30b11c0f81369df7...\n1   a25111e2e59f81bb7a0e3efb48255f4a5d4f722aaf13ff...  0567f3a9756983e1d040ec332255db94521ed5dc1b03fc...\n2   a25111e2e59f81bb7a0e3efb48255f4a5d4f722aaf13ff...  d5542515414f1bf30f6c21f0796af8bde4c513f2e72a2d...\n</code></pre></p> Source code in <code>src/llama_utils/retrieval/storage.py</code> <pre><code>def document_metadata(\n    self, as_dataframe: Optional[bool] = False\n) -&gt; Union[Dict[str, RefDocInfo], DataFrame]:\n    r\"\"\"Document metadata.\n\n    Get the metadata of all the documents in the docstore.\n\n    Parameters\n    ----------\n    as_dataframe: bool, optional, default is False.\n        True to return the metadata as a DataFrame.\n\n    Returns\n    -------\n    Dict[str, RefDocInfo] or DataFrame\n        The metadata of all the documents in the docstore.\n\n    Examples\n    --------\n    You can get the document metadata as a dictionary using the `metadata` method with the default parameter values:\n    ```python\n    &gt;&gt;&gt; store = Storage.load(\"examples/paul-graham-essay-storage\")\n    &gt;&gt;&gt; metadata = store.document_metadata()\n\n    ```\n    The `metadata` is a dictionary with the document ID as the key and the document metadata as the value:\n    ```python\n    &gt;&gt;&gt; documents_id = list(metadata.keys())\n    &gt;&gt;&gt; print(documents_id) # doctest: +SKIP\n    ['a25111e2e59f81bb7a0e3efb48255f4a5d4f722aaf13ffd112463fb98c227092']\n    &gt;&gt;&gt; print(metadata) # doctest: +SKIP\n    {\n        'a25111e2e59f81bb7a0e3efb48255f4a5d4f722aaf13ffd112463fb98c227092':\n            RefDocInfo(\n                node_ids=[\n                    'cadde590b82362fc7a5f8ce0751c5b30b11c0f81369df7d83a76956bf22765b7',\n                    '0567f3a9756983e1d040ec332255db94521ed5dc1b03fc7312f653c0e670a0bf',\n                    'd5542515414f1bf30f6c21f0796af8bde4c513f2e72a2df21f0810f10826252f',\n                    '120b69658a6c69ab8de3167b5ed0db77941a2b487e94d5d0e64a0d2d2805a4b7'\n                ],\n                metadata={\n                    'file_path': 'examples\\\\data\\\\paul_graham_essay.txt',\n                    'file_name': 'paul_graham_essay.txt',\n                    'file_type': 'text/plain',\n                    'file_size': 75395,\n                    'creation_date': '2024-10-24',\n                    'last_modified_date': '2024-09-16',\n                    'document_title': 'Based on the candidate titles and content, I would suggest a***.'\n                }\n            )\n        }\n    ```\n    To get the metadata as a DataFrame, you can set the `as_dataframe` parameter to True:\n    ```python\n    &gt;&gt;&gt; metadata = store.document_metadata(as_dataframe=True)\n    &gt;&gt;&gt; print(metadata) # doctest: +SKIP\n                                                   doc_id                                            node_id\n    0   a25111e2e59f81bb7a0e3efb48255f4a5d4f722aaf13ff...  cadde590b82362fc7a5f8ce0751c5b30b11c0f81369df7...\n    1   a25111e2e59f81bb7a0e3efb48255f4a5d4f722aaf13ff...  0567f3a9756983e1d040ec332255db94521ed5dc1b03fc...\n    2   a25111e2e59f81bb7a0e3efb48255f4a5d4f722aaf13ff...  d5542515414f1bf30f6c21f0796af8bde4c513f2e72a2d...\n    ```\n    \"\"\"\n    ref_doc_info: dict = self.docstore.get_all_ref_doc_info()\n    if as_dataframe:\n        doct_node_ids_dict = {}\n        file_name_doc = {}\n        doc_ids = list(ref_doc_info.keys())\n        for doc_id in doc_ids:\n            # get the DocRefInfo object for the first document\n            doc_ref = ref_doc_info[doc_id].to_dict()\n            # get the node ids for the first document\n            node_ids = doc_ref[\"node_ids\"]\n            file_name_doc[doc_id] = doc_ref[\"metadata\"].get(\"file_name\")\n            doct_node_ids_dict[doc_id] = node_ids\n\n        df = pd.DataFrame(\n            list(doct_node_ids_dict.items()), columns=[\"doc_id\", \"node_id\"]\n        )\n        df = df.explode(\"node_id\", ignore_index=True)\n\n        # merge the file name with the doc_id\n        file_name_df = pd.DataFrame(\n            file_name_doc.items(), columns=[\"doc_id\", \"file_name\"]\n        )\n        df = df.merge(file_name_df, on=\"doc_id\", how=\"left\", validate=\"many_to_one\")\n        data = df\n    else:\n        data = ref_doc_info\n    return data\n</code></pre>"},{"location":"api/storage.html#llama_utils.retrieval.storage.Storage.get_nodes_by_file_name","title":"<code>get_nodes_by_file_name(file_name: str, exact_match: bool = False) -&gt; List[BaseNode]</code>","text":"<p>Get nodes by file name.</p> <p>Parameters:</p> Name Type Description Default <code>file_name</code> <code>str</code> <p>The file name to search for.</p> required <code>exact_match</code> <code>bool</code> <p>True to search for an exact match, False to search for a partial match.</p> <code>False</code> <p>Returns:</p> Type Description <code>List[TextNode]</code> <p>The nodes with the specified file name.</p> <p>Examples:</p> <ul> <li>First read the storage context from a directory: <pre><code>&gt;&gt;&gt; storage_dir = \"examples/paul-graham-essay-storage\"\n&gt;&gt;&gt; store = Storage.load(storage_dir)\n&gt;&gt;&gt; print(store)\n&lt;BLANKLINE&gt;\n        Documents: 53\n        Indexes: 2\n&lt;BLANKLINE&gt;\n\n- The storage context contains the following data:\n\n&gt;&gt;&gt; print(store.node_metadata.head(3))\n               file_name                                            node_id\n0  paul_graham_essay.txt  cadde590b82362fc7a5f8ce0751c5b30b11c0f81369df7...\n1  paul_graham_essay.txt  0567f3a9756983e1d040ec332255db94521ed5dc1b03fc...\n2  paul_graham_essay.txt  d5542515414f1bf30f6c21f0796af8bde4c513f2e72a2d...\n\n\nYou can get all the nodes for file `paul_graham_essay.txt` as follows:\n\n\n&gt;&gt;&gt; nodes = store.get_nodes_by_file_name(\"paul_graham_essay.txt\")\n&gt;&gt;&gt; nodes[0] # doctest: +SKIP\nTextNode(\n    id_='cadde590b82362fc7a5f8ce0751c5b30b11c0f81369df7d83a76956bf22765b7',\n    embedding=None,\n    metadata={\n        'file_path': 'examples\\\\data\\\\paul_graham_essay.txt',\n        'file_name': 'paul_graham_essay.txt',\n        'file_type': 'text/plain',\n        'file_size': 75395,\n        'creation_date': '2024-10-24',\n        'last_modified_date': '2024-09-16',\n        'document_title': 'Based on the candidate titles and content, I would suggest a comprehensive title\n            that captures the essence of the text. Here\\'s a potential title:\\n\\n\"From Early Days ***'\n    },\n    excluded_embed_metadata_keys=['file_name'],\n    excluded_llm_metadata_keys=['file_name'],\n    relationships={\n        &lt;NodeRelationship.SOURCE: '1'&gt;:\n        RelatedNodeInfo(\n            node_id='a25111e2e59f81bb7a0e3efb48255f4a5d4f722aaf13ffd112463fb98c227092',\n            node_type=&lt;ObjectType.DOCUMENT: '4'&gt;,\n            metadata={\n                'file_path': 'examples\\\\data\\\\paul_graham_essay.txt',\n                'file_name': 'paul_graham_essay.txt',\n                'file_type': 'text/plain',\n                'file_size': 75395,\n                'creation_date': '2024-10-24',\n                'last_modified_date': '2024-09-16'\n            },\n            hash='2a494d84cd0ab1e73396773258b809a47739482c90b80d5f61d374e754c3ef06'\n        ),\n        &lt;NodeRelationship.NEXT: '3'&gt;: RelatedNodeInfo(node_id='15478c7a-fdab-40c8-92e7-42973b9d3b28', node_type=&lt;ObjectType.TEXT: '1'&gt;, metadata={}, hash='424546c0aa78015988ced235522cdd238633d5edc1b92667cbdcda44d72613ec')}, text='What I Worked On\\r\\n\\r\\nFebruary 2021\\r\\n\\r\\nBefore college the two main things I worked on, outside of school, were writing and programming. I didn\\'t write essays. I wrote what beginning writers were supposed to write then, and probably still are: short stories. My stories were awful. They had hardly any plot, just characters with strong feelings, which I imagined made them deep.\\r\\n\\r\\nThe first programs I tried writing were on the IBM 1401 that our school district used for what was then called \"data processing.\" This was in 9th grade, so I was 13 or 14. The school district\\'s 1401 happened to be in the basement of our junior high school, and my friend Rich Draves and I got permission to use it. It was like a mini Bond villain\\'s lair down there, with all these alien-looking machines \u2014 CPU, disk drives, printer, card reader \u2014 sitting up on a raised floor under bright fluorescent lights.\\r\\n\\r\\nThe language we used was an early version of Fortran. You had to type programs on punch cards, then stack them in the card reader and press a button to load the program into memory and run it. The result would ordinarily be to print something on the spectacularly loud printer.\\r\\n\\r\\nI was puzzled by the 1401. I couldn\\'t figure out what to do with it. And in retrospect there\\'s not much I could have',\n        mimetype='text/plain',\n        start_char_idx=4,\n        end_char_idx=2027,\n        text_template='[Excerpt from document]\\n{metadata_str}\\nExcerpt:\\n-----\\n{content}\\n-----\\n',\n        metadata_template='{key}: {value}', metadata_seperator='\\n'\n        )\n</code></pre></li> </ul> Source code in <code>src/llama_utils/retrieval/storage.py</code> <pre><code>def get_nodes_by_file_name(\n    self, file_name: str, exact_match: bool = False\n) -&gt; List[BaseNode]:\n    r\"\"\"Get nodes by file name.\n\n    Parameters\n    ----------\n    file_name: str\n        The file name to search for.\n    exact_match: bool, optional, default is False\n        True to search for an exact match, False to search for a partial match.\n\n    Returns\n    -------\n    List[TextNode]\n        The nodes with the specified file name.\n\n    Examples\n    --------\n    - First read the storage context from a directory:\n    ```python\n    &gt;&gt;&gt; storage_dir = \"examples/paul-graham-essay-storage\"\n    &gt;&gt;&gt; store = Storage.load(storage_dir)\n    &gt;&gt;&gt; print(store)\n    &lt;BLANKLINE&gt;\n            Documents: 53\n            Indexes: 2\n    &lt;BLANKLINE&gt;\n\n    - The storage context contains the following data:\n\n    &gt;&gt;&gt; print(store.node_metadata.head(3))\n                   file_name                                            node_id\n    0  paul_graham_essay.txt  cadde590b82362fc7a5f8ce0751c5b30b11c0f81369df7...\n    1  paul_graham_essay.txt  0567f3a9756983e1d040ec332255db94521ed5dc1b03fc...\n    2  paul_graham_essay.txt  d5542515414f1bf30f6c21f0796af8bde4c513f2e72a2d...\n\n\n    You can get all the nodes for file `paul_graham_essay.txt` as follows:\n\n\n    &gt;&gt;&gt; nodes = store.get_nodes_by_file_name(\"paul_graham_essay.txt\")\n    &gt;&gt;&gt; nodes[0] # doctest: +SKIP\n    TextNode(\n        id_='cadde590b82362fc7a5f8ce0751c5b30b11c0f81369df7d83a76956bf22765b7',\n        embedding=None,\n        metadata={\n            'file_path': 'examples\\\\data\\\\paul_graham_essay.txt',\n            'file_name': 'paul_graham_essay.txt',\n            'file_type': 'text/plain',\n            'file_size': 75395,\n            'creation_date': '2024-10-24',\n            'last_modified_date': '2024-09-16',\n            'document_title': 'Based on the candidate titles and content, I would suggest a comprehensive title\n                that captures the essence of the text. Here\\'s a potential title:\\n\\n\"From Early Days ***'\n        },\n        excluded_embed_metadata_keys=['file_name'],\n        excluded_llm_metadata_keys=['file_name'],\n        relationships={\n            &lt;NodeRelationship.SOURCE: '1'&gt;:\n            RelatedNodeInfo(\n                node_id='a25111e2e59f81bb7a0e3efb48255f4a5d4f722aaf13ffd112463fb98c227092',\n                node_type=&lt;ObjectType.DOCUMENT: '4'&gt;,\n                metadata={\n                    'file_path': 'examples\\\\data\\\\paul_graham_essay.txt',\n                    'file_name': 'paul_graham_essay.txt',\n                    'file_type': 'text/plain',\n                    'file_size': 75395,\n                    'creation_date': '2024-10-24',\n                    'last_modified_date': '2024-09-16'\n                },\n                hash='2a494d84cd0ab1e73396773258b809a47739482c90b80d5f61d374e754c3ef06'\n            ),\n            &lt;NodeRelationship.NEXT: '3'&gt;: RelatedNodeInfo(node_id='15478c7a-fdab-40c8-92e7-42973b9d3b28', node_type=&lt;ObjectType.TEXT: '1'&gt;, metadata={}, hash='424546c0aa78015988ced235522cdd238633d5edc1b92667cbdcda44d72613ec')}, text='What I Worked On\\r\\n\\r\\nFebruary 2021\\r\\n\\r\\nBefore college the two main things I worked on, outside of school, were writing and programming. I didn\\'t write essays. I wrote what beginning writers were supposed to write then, and probably still are: short stories. My stories were awful. They had hardly any plot, just characters with strong feelings, which I imagined made them deep.\\r\\n\\r\\nThe first programs I tried writing were on the IBM 1401 that our school district used for what was then called \"data processing.\" This was in 9th grade, so I was 13 or 14. The school district\\'s 1401 happened to be in the basement of our junior high school, and my friend Rich Draves and I got permission to use it. It was like a mini Bond villain\\'s lair down there, with all these alien-looking machines \u2014 CPU, disk drives, printer, card reader \u2014 sitting up on a raised floor under bright fluorescent lights.\\r\\n\\r\\nThe language we used was an early version of Fortran. You had to type programs on punch cards, then stack them in the card reader and press a button to load the program into memory and run it. The result would ordinarily be to print something on the spectacularly loud printer.\\r\\n\\r\\nI was puzzled by the 1401. I couldn\\'t figure out what to do with it. And in retrospect there\\'s not much I could have',\n            mimetype='text/plain',\n            start_char_idx=4,\n            end_char_idx=2027,\n            text_template='[Excerpt from document]\\n{metadata_str}\\nExcerpt:\\n-----\\n{content}\\n-----\\n',\n            metadata_template='{key}: {value}', metadata_seperator='\\n'\n            )\n    ```\n    \"\"\"\n    metadata_index = self.node_metadata\n    if exact_match:\n        doc_ids = metadata_index.loc[\n            metadata_index[\"file_name\"] == file_name, \"node_id\"\n        ].values\n    else:\n        doc_ids = metadata_index.loc[\n            metadata_index[\"file_name\"].str.contains(file_name, regex=True),\n            \"node_id\",\n        ].values\n    docs = self.docstore.get_nodes(doc_ids)\n    return docs\n</code></pre>"},{"location":"api/storage.html#llama_utils.retrieval.storage.Storage.load","title":"<code>load(store_dir: str) -&gt; Storage</code>  <code>classmethod</code>","text":"<p>Load the store from a directory.</p> <p>Parameters:</p> Name Type Description Default <code>store_dir</code> <code>str</code> <p>The directory containing the store.</p> required <p>Returns:</p> Name Type Description <code>Storage</code> <code>Storage</code> <p>The loaded storage.</p> <p>Raises:</p> Type Description <code>StorageNotFoundError</code> <p>If the storage is not found at the specified directory.</p> <p>Examples:</p> <p>You can load a storage from a directory as follows: <pre><code>&gt;&gt;&gt; store = Storage.load(\"examples/paul-graham-essay-storage\")\n&gt;&gt;&gt; print(store) # doctest: +SKIP\n&lt;BLANKLINE&gt;\n            Documents: 53\n            Indexes: 2\n&lt;BLANKLINE&gt;\n&gt;&gt;&gt; metadata = store.document_metadata(as_dataframe=True)\n&gt;&gt;&gt; print(metadata.head()) # doctest: +SKIP\n                             doc_id                              node_id              file_name\n0   a25111e2e59f81bb7a0e3efb4825...  cadde590b82362fc7a5f8ce0751c5b30b...  paul_graham_essay.txt\n1   a25111e2e59f81bb7a0e3efb4825...  0567f3a9756983e1d040ec332255db945...  paul_graham_essay.txt\n2   a25111e2e59f81bb7a0e3efb4825...  d5542515414f1bf30f6c21f0796af8bde...  paul_graham_essay.txt\n3   a25111e2e59f81bb7a0e3efb4825...  120b69658a6c69ab8de3167b5ed0db779...  paul_graham_essay.txt\n&gt;&gt;&gt; docstore = store.docstore # doctest: +SKIP\n&lt;llama_index.core.storage.docstore.simple_docstore.SimpleDocumentStore at 0x20444d31be0&gt;\n&gt;&gt;&gt; vector_store = store.vector_store\n&gt;&gt;&gt; print(type(vector_store))\n&lt;class 'llama_index.core.vector_stores.simple.SimpleVectorStore'&gt;\n</code></pre></p> Source code in <code>src/llama_utils/retrieval/storage.py</code> <pre><code>@classmethod\ndef load(cls, store_dir: str) -&gt; \"Storage\":\n    \"\"\"Load the store from a directory.\n\n    Parameters\n    ----------\n    store_dir: str\n        The directory containing the store.\n\n    Returns\n    -------\n    Storage:\n        The loaded storage.\n\n    Raises\n    ------\n    StorageNotFoundError\n        If the storage is not found at the specified directory.\n\n    Examples\n    --------\n    You can load a storage from a directory as follows:\n    ```python\n    &gt;&gt;&gt; store = Storage.load(\"examples/paul-graham-essay-storage\")\n    &gt;&gt;&gt; print(store) # doctest: +SKIP\n    &lt;BLANKLINE&gt;\n                Documents: 53\n                Indexes: 2\n    &lt;BLANKLINE&gt;\n    &gt;&gt;&gt; metadata = store.document_metadata(as_dataframe=True)\n    &gt;&gt;&gt; print(metadata.head()) # doctest: +SKIP\n                                 doc_id                              node_id              file_name\n    0   a25111e2e59f81bb7a0e3efb4825...  cadde590b82362fc7a5f8ce0751c5b30b...  paul_graham_essay.txt\n    1   a25111e2e59f81bb7a0e3efb4825...  0567f3a9756983e1d040ec332255db945...  paul_graham_essay.txt\n    2   a25111e2e59f81bb7a0e3efb4825...  d5542515414f1bf30f6c21f0796af8bde...  paul_graham_essay.txt\n    3   a25111e2e59f81bb7a0e3efb4825...  120b69658a6c69ab8de3167b5ed0db779...  paul_graham_essay.txt\n    &gt;&gt;&gt; docstore = store.docstore # doctest: +SKIP\n    &lt;llama_index.core.storage.docstore.simple_docstore.SimpleDocumentStore at 0x20444d31be0&gt;\n    &gt;&gt;&gt; vector_store = store.vector_store\n    &gt;&gt;&gt; print(type(vector_store))\n    &lt;class 'llama_index.core.vector_stores.simple.SimpleVectorStore'&gt;\n\n    ```\n    \"\"\"\n    if not Path(store_dir).exists():\n        raise StorageNotFoundError(f\"Storage not found at {store_dir}\")\n    storage = StorageContext.from_defaults(persist_dir=store_dir)\n    return cls(storage)\n</code></pre>"},{"location":"api/storage.html#llama_utils.retrieval.storage.Storage.node_id_list","title":"<code>node_id_list() -&gt; List[str]</code>","text":"<p>Get the metadata of the nodes in the docstore.</p> <p>Returns:</p> Type Description <code>Dict[str, Dict[str, Any]]</code> <p>The metadata of the nodes in the docstore.</p> <p>Examples:</p> <p>You can get the metadata of the nodes in the docstore using the <code>nodes_metadata</code> method: <pre><code>&gt;&gt;&gt; store = Storage.load(\"examples/paul-graham-essay-storage\")\n&gt;&gt;&gt; nodes_metadata = store.node_id_list()\n&gt;&gt;&gt; print(nodes_metadata) # doctest: +SKIP\n[\n    'cadde590b82362fc7a5f8ce0751c5b30b11c0f81369df7d83a76956bf22765b7',\n    '0567f3a9756983e1d040ec332255db94521ed5dc1b03fc7312f653c0e670a0bf',\n    'd5542515414f1bf30f6c21f0796af8bde4c513f2e72a2df21f0810f10826252f',\n    ...\n]\n</code></pre></p> Source code in <code>src/llama_utils/retrieval/storage.py</code> <pre><code>def node_id_list(self) -&gt; List[str]:\n    \"\"\"Get the metadata of the nodes in the docstore.\n\n    Returns\n    -------\n    Dict[str, Dict[str, Any]]\n        The metadata of the nodes in the docstore.\n\n    Examples\n    --------\n    You can get the metadata of the nodes in the docstore using the `nodes_metadata` method:\n    ```python\n    &gt;&gt;&gt; store = Storage.load(\"examples/paul-graham-essay-storage\")\n    &gt;&gt;&gt; nodes_metadata = store.node_id_list()\n    &gt;&gt;&gt; print(nodes_metadata) # doctest: +SKIP\n    [\n        'cadde590b82362fc7a5f8ce0751c5b30b11c0f81369df7d83a76956bf22765b7',\n        '0567f3a9756983e1d040ec332255db94521ed5dc1b03fc7312f653c0e670a0bf',\n        'd5542515414f1bf30f6c21f0796af8bde4c513f2e72a2df21f0810f10826252f',\n        ...\n    ]\n    ```\n    \"\"\"\n    return list(self.docstore.docs.keys())\n</code></pre>"},{"location":"api/storage.html#llama_utils.retrieval.storage.Storage.read_documents","title":"<code>read_documents(path: Union[str, Path], split_into_nodes: bool = False, chunk_size: int = 1024, chunk_overlap: int = 100, show_progress: bool = False, num_workers: int = None, recursive: bool = False, **kwargs) -&gt; List[Union[Document, TextNode]]</code>  <code>staticmethod</code>","text":"<p>Read documents from a directory and optionally splits them into TextNodes.</p> <p>the <code>read_documents</code> method reads documents from a directory and returns a list of documents. the <code>doc_id</code> is sha256 hash number generated based on the document's text content.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Union[str, Path]</code> <p>path to the directory containing the documents. or a single file path.</p> required <code>split_into_nodes</code> <code>bool</code> <p>If True, splits documents into smaller TextNodes (default: False).</p> <code>False</code> <code>chunk_size</code> <code>int</code> <p>The size of each text chunk. The <code>chunk_size</code> Defines the size of each split chunk (in characters). - Larger values preserve more context but increase memory usage. - Smaller values improve retrieval specificity but may lose context.</p> <code>is 1024</code> <code>chunk_overlap</code> <code>int</code> <p>The overlap size between chunks. The <code>chunk_overlap</code> ensures adjacent chunks have overlapping content to preserve context. - Higher overlap improves retrieval coherence but increases redundancy. - Lower overlap minimizes redundancy but might break context.</p> <code>is 100.</code> <code>show_progress</code> <code>bool</code> <p>True to show progress bar.</p> <code>False</code> <code>num_workers</code> <code>int</code> <p>The number of workers to use for loading the data.</p> <code>None</code> <code>recursive</code> <code>bool</code> <p>True to read from subdirectories.</p> <code>False</code> <p>Returns:</p> Type Description <code>Sequence[Union[Document, TextNode]]</code> <p>The documents/nodes read from the store.</p> <p>Raises:</p> Type Description <code>FileNotFoundError</code> <p>If the directory is not found.</p> Notes <p>The best values for <code>chunk_size</code> and <code>chunk_overlap</code> depend on the type of documents and retrieval needs.</p> Use Case Recommended <code>chunk_size</code> Recommended <code>chunk_overlap</code> Short documents (FAQs, structured text, emails) <code>256 - 512</code> <code>50</code> General-purpose (news articles, reports, blog posts) <code>512 - 1024</code> <code>50 - 100</code> Long documents (PDFs, research papers, books) <code>1024 - 2048</code> <code>100 - 200</code> Dense technical/scientific papers <code>1500 - 2500</code> <code>200 - 300</code> Conversational AI (chat context memory) <code>512 - 1024</code> <code>50 - 150</code> Legal/contract documents (precise context retention) <code>2048 - 4096</code> <code>200 - 400</code> <p>Best Practices: - For most cases, <code>chunk_size=1024</code> and <code>chunk_overlap=100</code> work well. - If working with FAQs, decrease <code>chunk_size</code> to <code>512</code>. - If preserving long-form LLM context, use <code>2048+</code> with higher overlap.</p> <p>Examples:</p> <p>You can read documents from a directory as follows: <pre><code>&gt;&gt;&gt; from llama_utils.retrieval.storage import Storage\n&gt;&gt;&gt; data_path = \"examples/data/essay\"\n&gt;&gt;&gt; docs = Storage.read_documents(data_path)\n&gt;&gt;&gt; print(docs) # doctest: +SKIP\n[\n    Document(\n        id_='a25111e2e59f81bb7a0e3efb48255**',\n        embedding=None,\n        metadata={\n            'file_path': 'examples/data/essay/paul-graham-essay.txt',\n            'file_name': 'paul-graham-essay.txt',\n            'file_type': 'text/plain',\n            'file_size': 75395,\n            'creation_date': '2024-10-25',\n            'last_modified_date': '2024-09-16'\n        },\n        excluded_embed_metadata_keys=['file_name'],\n        excluded_llm_metadata_keys=['file_name'],\n        relationships={},\n        text='What I Worked On\\n\\nFebruary 2021\\n\\nBefore college the two main things ****',\n        mimetype='text/plain',\n        start_char_idx=None,\n        end_char_idx=None,\n4        text_template='{metadata_str}\\n\\n{content}',\n        metadata_template='{key}: {value}',\n        metadata_seperator='\\n'\n    )\n]\n</code></pre></p> <p>You can also use the <code>split_into_nodes</code> parameter to split the documents into smaller nodes:</p> <pre><code>&gt;&gt;&gt; docs = Storage.read_documents(data_path, split_into_nodes=True)\n&gt;&gt;&gt; print(len(docs))\n20\n&gt;&gt;&gt; print(docs[0]) # doctest: +SKIP\nNode ID: bfdf48ff-3c2b-49a8-ae25-7a837158d2dc\nText: What I Worked On    February 2021    Before college the two main\nthings I worked on, outside of school, were writing and programming. I\ndidn't write essays. I wrote what beginning writers were supposed to\nwrite then, and probably still are: short stories. My stories were\nawful. They had hardly any plot, just characters with strong feelings,\nwhic...\n</code></pre> Source code in <code>src/llama_utils/retrieval/storage.py</code> <pre><code>@staticmethod\ndef read_documents(\n    path: Union[str, Path],\n    split_into_nodes: bool = False,\n    chunk_size: int = 1024,\n    chunk_overlap: int = 100,\n    show_progress: bool = False,\n    num_workers: int = None,\n    recursive: bool = False,\n    **kwargs,\n) -&gt; List[Union[Document, TextNode]]:\n    r\"\"\"Read documents from a directory and optionally splits them into TextNodes.\n\n    the `read_documents` method reads documents from a directory and returns a list of documents.\n    the `doc_id` is sha256 hash number generated based on the document's text content.\n\n    Parameters\n    ----------\n    path: str\n        path to the directory containing the documents. or a single file path.\n    split_into_nodes : bool, optional\n        If True, splits documents into smaller TextNodes (default: False).\n    chunk_size : int, optional, default is 1024\n        The size of each text chunk. The `chunk_size` Defines the size of each split chunk (in characters).\n        - Larger values preserve more context but increase memory usage.\n        - Smaller values improve retrieval specificity but may lose context.\n    chunk_overlap : int, optional, default is 100.\n        The overlap size between chunks. The `chunk_overlap` ensures adjacent chunks have overlapping content to\n        preserve context.\n        - Higher overlap improves retrieval coherence but increases redundancy.\n        - Lower overlap minimizes redundancy but might break context.\n    show_progress: bool, optional, default is False.\n        True to show progress bar.\n    num_workers: int, optional, default is None.\n        The number of workers to use for loading the data.\n    recursive: bool, optional, default is False.\n        True to read from subdirectories.\n\n    Returns\n    -------\n    Sequence[Union[Document, TextNode]]\n        The documents/nodes read from the store.\n\n    Raises\n    ------\n    FileNotFoundError\n        If the directory is not found.\n\n    Notes\n    -----\n    The best values for `chunk_size` and `chunk_overlap` depend on the type of documents and retrieval needs.\n\n    | **Use Case**                                              | **Recommended `chunk_size`** | **Recommended `chunk_overlap`** |\n    |-----------------------------------------------------------|------------------------------|---------------------------------|\n    | **Short documents (FAQs, structured text, emails)**       | `256 - 512`                  | `50`                           |\n    | **General-purpose (news articles, reports, blog posts)**  | `512 - 1024`                 | `50 - 100`                     |\n    | **Long documents (PDFs, research papers, books)**         | `1024 - 2048`                | `100 - 200`                    |\n    | **Dense technical/scientific papers**                     | `1500 - 2500`                | `200 - 300`                    |\n    | **Conversational AI (chat context memory)**               | `512 - 1024`                 | `50 - 150`                     |\n    | **Legal/contract documents (precise context retention)**  | `2048 - 4096`                | `200 - 400`                    |\n\n    Best Practices:\n    - For most cases, `chunk_size=1024` and `chunk_overlap=100` work well.\n    - If working with FAQs, decrease `chunk_size` to `512`.\n    - If preserving long-form LLM context, use `2048+` with higher overlap.\n\n    Examples\n    --------\n    You can read documents from a directory as follows:\n    ```python\n    &gt;&gt;&gt; from llama_utils.retrieval.storage import Storage\n    &gt;&gt;&gt; data_path = \"examples/data/essay\"\n    &gt;&gt;&gt; docs = Storage.read_documents(data_path)\n    &gt;&gt;&gt; print(docs) # doctest: +SKIP\n    [\n        Document(\n            id_='a25111e2e59f81bb7a0e3efb48255**',\n            embedding=None,\n            metadata={\n                'file_path': 'examples/data/essay/paul-graham-essay.txt',\n                'file_name': 'paul-graham-essay.txt',\n                'file_type': 'text/plain',\n                'file_size': 75395,\n                'creation_date': '2024-10-25',\n                'last_modified_date': '2024-09-16'\n            },\n            excluded_embed_metadata_keys=['file_name'],\n            excluded_llm_metadata_keys=['file_name'],\n            relationships={},\n            text='What I Worked On\\n\\nFebruary 2021\\n\\nBefore college the two main things ****',\n            mimetype='text/plain',\n            start_char_idx=None,\n            end_char_idx=None,\n    4        text_template='{metadata_str}\\n\\n{content}',\n            metadata_template='{key}: {value}',\n            metadata_seperator='\\n'\n        )\n    ]\n    ```\n\n    You can also use the `split_into_nodes` parameter to split the documents into smaller nodes:\n\n    ```python\n    &gt;&gt;&gt; docs = Storage.read_documents(data_path, split_into_nodes=True)\n    &gt;&gt;&gt; print(len(docs))\n    20\n    &gt;&gt;&gt; print(docs[0]) # doctest: +SKIP\n    Node ID: bfdf48ff-3c2b-49a8-ae25-7a837158d2dc\n    Text: What I Worked On    February 2021    Before college the two main\n    things I worked on, outside of school, were writing and programming. I\n    didn't write essays. I wrote what beginning writers were supposed to\n    write then, and probably still are: short stories. My stories were\n    awful. They had hardly any plot, just characters with strong feelings,\n    whic...\n    ```\n    \"\"\"\n    if isinstance(path, str):\n        path = Path(path)\n\n    if not path.exists():\n        raise FileNotFoundError(f\"Directory not found: {path}\")\n\n    if path.is_file():\n        reader = SimpleDirectoryReader(input_files=[path])\n    else:\n        reader = SimpleDirectoryReader(path, recursive=recursive, **kwargs)\n\n    documents = reader.load_data(\n        show_progress=show_progress, num_workers=num_workers, **kwargs\n    )\n\n    if split_into_nodes:\n        # Split documents into nodes.\n        splitter = SentenceSplitter(\n            chunk_size=chunk_size, chunk_overlap=chunk_overlap\n        )\n        documents = splitter.get_nodes_from_documents(documents)\n\n    for doc in documents:\n        # exclude the file name from the llm metadata to avoid affecting the llm by weird file names\n        doc.excluded_llm_metadata_keys = [\"file_name\"]\n        # exclude the file name from the embeddings' metadata to avoid affecting the llm by weird file names\n        doc.excluded_embed_metadata_keys = [\"file_name\"]\n        # Generate a hash based on the document's text content\n        content_hash = generate_content_hash(doc.text)\n        # Assign the hash as the doc_id\n        doc.metadata[\"content-hash\"] = content_hash\n\n    return documents\n</code></pre>"},{"location":"api/storage.html#llama_utils.retrieval.storage.Storage.save","title":"<code>save(store_dir: str)</code>","text":"<p>Save the storage to a directory.</p> <p>Parameters:</p> Name Type Description Default <code>store_dir</code> <code>str</code> <p>The directory to save the store.</p> required <p>Examples:</p> <p>You can save a storage to a directory as follows: <pre><code>&gt;&gt;&gt; store = Storage.create()\n&gt;&gt;&gt; store.save(\"examples/paul-graham-essay-storage-example\")\n</code></pre> The following files will be created in the specified directory: - metadata_index.csv - docstore.json - default__vector_store.json - index_store.json - graph_store.json - image__vector_store.json</p> Source code in <code>src/llama_utils/retrieval/storage.py</code> <pre><code>def save(self, store_dir: str):\n    \"\"\"Save the storage to a directory.\n\n    Parameters\n    ----------\n    store_dir: str\n        The directory to save the store.\n\n    Examples\n    --------\n    You can save a storage to a directory as follows:\n    ```python\n    &gt;&gt;&gt; store = Storage.create()\n    &gt;&gt;&gt; store.save(\"examples/paul-graham-essay-storage-example\")\n\n    ```\n    The following files will be created in the specified directory:\n    - metadata_index.csv\n    - docstore.json\n    - default__vector_store.json\n    - index_store.json\n    - graph_store.json\n    - image__vector_store.json\n    \"\"\"\n    self.store.persist(persist_dir=store_dir)\n    file_path = os.path.join(store_dir, ID_MAPPING_FILE)\n    save_metadata_index(self.document_metadata(as_dataframe=True), file_path)\n</code></pre>"},{"location":"api/storage.html#llama_utils.retrieval.storage.create_metadata_index_existing_docs","title":"<code>create_metadata_index_existing_docs(docs: Dict[str, BaseNode])</code>","text":"<p>Create a metadata index for existing documents.</p> Source code in <code>src/llama_utils/retrieval/storage.py</code> <pre><code>def create_metadata_index_existing_docs(docs: Dict[str, BaseNode]):\n    \"\"\"Create a metadata index for existing documents.\"\"\"\n    metadata_index = {}\n    i = 0\n    for key, val in docs.items():\n        if \"file_name\" in val.metadata:\n            file_name = val.metadata[\"file_name\"]\n        elif \"file_path\" in val.metadata:\n            file_name = Path(val.metadata[\"file_path\"]).name\n        else:\n            file_name = f\"doc_{i}\"\n\n        metadata_index[i] = {\n            \"file_name\": file_name,\n            \"node_id\": generate_content_hash(val.text),\n        }\n        i += 1\n    df = pd.DataFrame.from_dict(metadata_index, orient=\"index\")\n    return df\n</code></pre>"},{"location":"api/storage.html#llama_utils.retrieval.storage.read_metadata_index","title":"<code>read_metadata_index(path: str) -&gt; pd.DataFrame</code>","text":"<p>Read the ID mapping from a JSON file.</p> Source code in <code>src/llama_utils/retrieval/storage.py</code> <pre><code>def read_metadata_index(path: str) -&gt; pd.DataFrame:\n    \"\"\"Read the ID mapping from a JSON file.\"\"\"\n    file_path = os.path.join(path, ID_MAPPING_FILE)\n    data = pd.read_csv(file_path, index_col=0)\n    return data\n</code></pre>"},{"location":"api/storage.html#llama_utils.retrieval.storage.save_metadata_index","title":"<code>save_metadata_index(data: pd.DataFrame, path: str)</code>","text":"<p>Save the ID mapping to a JSON file.</p> Source code in <code>src/llama_utils/retrieval/storage.py</code> <pre><code>def save_metadata_index(data: pd.DataFrame, path: str):\n    \"\"\"Save the ID mapping to a JSON file.\"\"\"\n    data.to_csv(path, index=True)\n</code></pre>"},{"location":"api/utils.html","title":"Utils","text":""},{"location":"api/utils.html#llm-models","title":"LLM models","text":""},{"location":"api/utils.html#llama_utils.utils.models","title":"<code>llama_utils.utils.models</code>","text":"<p>LLMs and embedding models.</p>"},{"location":"api/utils.html#llama_utils.utils.models.LLMModel","title":"<code>LLMModel</code>","text":"<p>Abstraction layer for different LLM providers: AzureOpenAI, Ollama, and HuggingFace.</p> <p>Parameters:</p> Name Type Description Default <code>model_type</code> <code>str</code> <p>Type of the model ('azure', 'ollama', 'huggingface').</p> required <code>**kwargs</code> <code>dict</code> <p>Additional parameters for the model initialization.</p> <code>{}</code> <p>Examples:</p> <p>Initialize an Azure OpenAI model:     &gt;&gt;&gt; from llama_utils.utils.models import LLMModel     &gt;&gt;&gt; from dotenv import load_dotenv     &gt;&gt;&gt; load_dotenv() # doctest: +SKIP     &gt;&gt;&gt; model = LLMModel(model_type='azure', model_id='gpt-4o', engine='4o') # doctest: +SKIP     &gt;&gt;&gt; print(model.base_model.model) # doctest: +SKIP     gpt-4o     &gt;&gt;&gt; response = model.generate_response(\"Hello, how are you?\") # doctest: +SKIP     &gt;&gt;&gt; print(response) # doctest: +SKIP     Hello! I'm just a computer program, so I don't have feelings, but I'm here and ready to help you. How can I assist you today?</p> <p>Initialize an Ollama model:     &gt;&gt;&gt; model = LLMModel(model_type='ollama', model_id='llama3.1')     &gt;&gt;&gt; response = model.generate_response(\"Hello, how are you?\") # doctest: +SKIP     &gt;&gt;&gt; print(response) # doctest: +SKIP     I'm just a language model, I don't have emotions or feelings like humans do, so I don't have good or bad days. However, I'm functioning properly and ready to help with any questions or tasks you may have! How about you? How's your day going?</p> <p>Initialize a HuggingFace model:     &gt;&gt;&gt; import os     &gt;&gt;&gt; cache_dir = os.getenv(\"CACHE_DIR\")     &gt;&gt;&gt; model_kwargs = {}     &gt;&gt;&gt; model_kwargs[\"cache_dir\"] = cache_dir     &gt;&gt;&gt; model_name = \"distilgpt2\"     &gt;&gt;&gt; model = LLMModel(     ...     model_type='huggingface', model_name=model_name, tokenizer_name=model_name, model_kwargs=model_kwargs     ... )     &gt;&gt;&gt; response = model.generate_response(\"Hello, how are you?\") # doctest: +SKIP     &gt;&gt;&gt; print(response) # doctest: +SKIP</p> Source code in <code>src/llama_utils/utils/models.py</code> <pre><code>class LLMModel:\n    r\"\"\"Abstraction layer for different LLM providers: AzureOpenAI, Ollama, and HuggingFace.\n\n    Parameters\n    ----------\n    model_type : str\n        Type of the model ('azure', 'ollama', 'huggingface').\n    **kwargs : dict\n        Additional parameters for the model initialization.\n\n    Examples\n    --------\n    Initialize an Azure OpenAI model:\n        &gt;&gt;&gt; from llama_utils.utils.models import LLMModel\n        &gt;&gt;&gt; from dotenv import load_dotenv\n        &gt;&gt;&gt; load_dotenv() # doctest: +SKIP\n        &gt;&gt;&gt; model = LLMModel(model_type='azure', model_id='gpt-4o', engine='4o') # doctest: +SKIP\n        &gt;&gt;&gt; print(model.base_model.model) # doctest: +SKIP\n        gpt-4o\n        &gt;&gt;&gt; response = model.generate_response(\"Hello, how are you?\") # doctest: +SKIP\n        &gt;&gt;&gt; print(response) # doctest: +SKIP\n        Hello! I'm just a computer program, so I don't have feelings, but I'm here and ready to help you. How can I assist you today?\n\n    Initialize an Ollama model:\n        &gt;&gt;&gt; model = LLMModel(model_type='ollama', model_id='llama3.1')\n        &gt;&gt;&gt; response = model.generate_response(\"Hello, how are you?\") # doctest: +SKIP\n        &gt;&gt;&gt; print(response) # doctest: +SKIP\n        I'm just a language model, I don't have emotions or feelings like humans do, so I don't have good or bad days. However, I'm functioning properly and ready to help with any questions or tasks you may have! How about you? How's your day going?\n\n    Initialize a HuggingFace model:\n        &gt;&gt;&gt; import os\n        &gt;&gt;&gt; cache_dir = os.getenv(\"CACHE_DIR\")\n        &gt;&gt;&gt; model_kwargs = {}\n        &gt;&gt;&gt; model_kwargs[\"cache_dir\"] = cache_dir\n        &gt;&gt;&gt; model_name = \"distilgpt2\"\n        &gt;&gt;&gt; model = LLMModel(\n        ...     model_type='huggingface', model_name=model_name, tokenizer_name=model_name, model_kwargs=model_kwargs\n        ... )\n        &gt;&gt;&gt; response = model.generate_response(\"Hello, how are you?\") # doctest: +SKIP\n        &gt;&gt;&gt; print(response) # doctest: +SKIP\n    \"\"\"\n\n    def __init__(self, model_type: str, **kwargs):\n        \"\"\"Initialize the LLM model.\"\"\"\n        self._model_type = model_type.lower()\n        self._base_model = self._initialize_model(**kwargs)\n\n    @property\n    def base_model(self):\n        \"\"\"Get the base model.\"\"\"\n        return self._base_model\n\n    @property\n    def model_type(self):\n        \"\"\"Get the model type.\"\"\"\n        return self._model_type\n\n    def _initialize_model(self, **kwargs):\n        if self.model_type == \"azure\":\n            return azure_open_ai(\n                model_id=kwargs.get(\"model_id\", \"gpt-4o\"),\n                engine=kwargs.get(\"engine\", \"4o\"),\n            )\n        elif self.model_type == \"ollama\":\n            return get_ollama_llm(**kwargs)\n        elif self.model_type == \"huggingface\":\n            return get_huggingface_llm(**kwargs)\n        else:\n            raise ValueError(f\"Unsupported model type: {self.model_type}\")\n\n    def generate_response(self, prompt: str, **kwargs):\n        \"\"\"Generate a response from the model.\n\n        Parameters\n        ----------\n        prompt : str\n            The input prompt.\n        **kwargs : dict\n            Additional parameters for generation.\n\n        Returns\n        -------\n        str\n            Generated response.\n\n        Examples\n        --------\n        Generate response using Azure OpenAI:\n\n        &gt;&gt;&gt; model = LLMModel(model_type='azure', model_id='gpt-4o')\n        &gt;&gt;&gt; response = model.generate_response(\"What is AI?\") # doctest: +SKIP\n        &gt;&gt;&gt; print(response) # doctest: +SKIP\n\n        Generate response using Ollama:\n\n        &gt;&gt;&gt; model = LLMModel(model_type='ollama', model_id='llama3')\n        &gt;&gt;&gt; response = model.generate_response(\"Explain quantum mechanics.\") # doctest: +SKIP\n        &gt;&gt;&gt; print(response) # doctest: +SKIP\n\n        Generate response using HuggingFace:\n\n        &gt;&gt;&gt; model = LLMModel(model_type='huggingface', model_name='distilgpt2') # doctest: +SKIP\n        &gt;&gt;&gt; response = model.generate_response(\"Write a poem about the sea.\") # doctest: +SKIP\n        &gt;&gt;&gt; print(response) # doctest: +SKIP\n        \"\"\"\n        if self.model_type in [\"azure\", \"ollama\", \"huggingface\"]:\n            return self.base_model.complete(prompt, **kwargs)\n        else:\n            raise ValueError(\"Invalid model type\")\n</code></pre>"},{"location":"api/utils.html#llama_utils.utils.models.LLMModel.base_model","title":"<code>base_model</code>  <code>property</code>","text":"<p>Get the base model.</p>"},{"location":"api/utils.html#llama_utils.utils.models.LLMModel.model_type","title":"<code>model_type</code>  <code>property</code>","text":"<p>Get the model type.</p>"},{"location":"api/utils.html#llama_utils.utils.models.LLMModel.__init__","title":"<code>__init__(model_type: str, **kwargs)</code>","text":"<p>Initialize the LLM model.</p> Source code in <code>src/llama_utils/utils/models.py</code> <pre><code>def __init__(self, model_type: str, **kwargs):\n    \"\"\"Initialize the LLM model.\"\"\"\n    self._model_type = model_type.lower()\n    self._base_model = self._initialize_model(**kwargs)\n</code></pre>"},{"location":"api/utils.html#llama_utils.utils.models.LLMModel.generate_response","title":"<code>generate_response(prompt: str, **kwargs)</code>","text":"<p>Generate a response from the model.</p> <p>Parameters:</p> Name Type Description Default <code>prompt</code> <code>str</code> <p>The input prompt.</p> required <code>**kwargs</code> <code>dict</code> <p>Additional parameters for generation.</p> <code>{}</code> <p>Returns:</p> Type Description <code>str</code> <p>Generated response.</p> <p>Examples:</p> <p>Generate response using Azure OpenAI:</p> <pre><code>&gt;&gt;&gt; model = LLMModel(model_type='azure', model_id='gpt-4o')\n&gt;&gt;&gt; response = model.generate_response(\"What is AI?\")\n&gt;&gt;&gt; print(response)\n</code></pre> <p>Generate response using Ollama:</p> <pre><code>&gt;&gt;&gt; model = LLMModel(model_type='ollama', model_id='llama3')\n&gt;&gt;&gt; response = model.generate_response(\"Explain quantum mechanics.\")\n&gt;&gt;&gt; print(response)\n</code></pre> <p>Generate response using HuggingFace:</p> <pre><code>&gt;&gt;&gt; model = LLMModel(model_type='huggingface', model_name='distilgpt2')\n&gt;&gt;&gt; response = model.generate_response(\"Write a poem about the sea.\")\n&gt;&gt;&gt; print(response)\n</code></pre> Source code in <code>src/llama_utils/utils/models.py</code> <pre><code>def generate_response(self, prompt: str, **kwargs):\n    \"\"\"Generate a response from the model.\n\n    Parameters\n    ----------\n    prompt : str\n        The input prompt.\n    **kwargs : dict\n        Additional parameters for generation.\n\n    Returns\n    -------\n    str\n        Generated response.\n\n    Examples\n    --------\n    Generate response using Azure OpenAI:\n\n    &gt;&gt;&gt; model = LLMModel(model_type='azure', model_id='gpt-4o')\n    &gt;&gt;&gt; response = model.generate_response(\"What is AI?\") # doctest: +SKIP\n    &gt;&gt;&gt; print(response) # doctest: +SKIP\n\n    Generate response using Ollama:\n\n    &gt;&gt;&gt; model = LLMModel(model_type='ollama', model_id='llama3')\n    &gt;&gt;&gt; response = model.generate_response(\"Explain quantum mechanics.\") # doctest: +SKIP\n    &gt;&gt;&gt; print(response) # doctest: +SKIP\n\n    Generate response using HuggingFace:\n\n    &gt;&gt;&gt; model = LLMModel(model_type='huggingface', model_name='distilgpt2') # doctest: +SKIP\n    &gt;&gt;&gt; response = model.generate_response(\"Write a poem about the sea.\") # doctest: +SKIP\n    &gt;&gt;&gt; print(response) # doctest: +SKIP\n    \"\"\"\n    if self.model_type in [\"azure\", \"ollama\", \"huggingface\"]:\n        return self.base_model.complete(prompt, **kwargs)\n    else:\n        raise ValueError(\"Invalid model type\")\n</code></pre>"},{"location":"api/utils.html#llama_utils.utils.models.azure_open_ai","title":"<code>azure_open_ai(model_id: str = 'gpt-4o', engine: str = '4o')</code>","text":"<p>Get the Azure OpenAI model.</p> <p>Parameters:</p> Name Type Description Default <code>model_id</code> <code>str</code> <p>The model ID.</p> <code>'gpt-4o'</code> <code>engine</code> <code>str</code> <p>The engine.</p> <code>'4o'</code> <p>Returns:</p> Type Description <code>AzureOpenAI</code> <p>The Azure OpenAI model.</p> <p>Raises:</p> Type Description <code>ImportError</code> <p>If the <code>llama-index-llms-azure-openai</code> package is not installed.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from llama_utils.utils.models import azure_open_ai\n&gt;&gt;&gt; from dotenv import load_dotenv\n&gt;&gt;&gt; load_dotenv()\n&gt;&gt;&gt; llm = azure_open_ai()\n&gt;&gt;&gt; print(llm.model)\ngpt-4o\n&gt;&gt;&gt; print(llm.metadata)\ncontext_window=128000 num_output=-1 is_chat_model=True is_function_calling_model=True model_name='gpt-4o' system_role=&lt;MessageRole.SYSTEM: 'system'&gt;\n</code></pre> Source code in <code>src/llama_utils/utils/models.py</code> <pre><code>def azure_open_ai(model_id: str = \"gpt-4o\", engine: str = \"4o\"):\n    \"\"\"Get the Azure OpenAI model.\n\n    Parameters\n    ----------\n    model_id: str, optional, default is \"gpt-4o\"\n        The model ID.\n    engine: str, optional, default is \"4o\"\n        The engine.\n\n    Returns\n    -------\n    AzureOpenAI\n        The Azure OpenAI model.\n\n    Raises\n    ------\n    ImportError\n        If the `llama-index-llms-azure-openai` package is not installed.\n\n    Examples\n    --------\n    &gt;&gt;&gt; from llama_utils.utils.models import azure_open_ai\n    &gt;&gt;&gt; from dotenv import load_dotenv\n    &gt;&gt;&gt; load_dotenv() # doctest: +SKIP\n    &gt;&gt;&gt; llm = azure_open_ai() # doctest: +SKIP\n    &gt;&gt;&gt; print(llm.model) # doctest: +SKIP\n    gpt-4o\n    &gt;&gt;&gt; print(llm.metadata) # doctest: +SKIP\n    context_window=128000 num_output=-1 is_chat_model=True is_function_calling_model=True model_name='gpt-4o' system_role=&lt;MessageRole.SYSTEM: 'system'&gt;\n    \"\"\"\n    try:\n        from llama_index.llms.azure_openai import AzureOpenAI\n    except ImportError:\n        raise ImportError(\n            \"Please install the `llama-index-llms-azure-openai` package to use the Azure OpenAI model.\"\n        )\n    endpoint = os.environ.get(\"AZURE_OPENAI_ENDPOINT\")\n    api_key = os.environ.get(\"AZURE_OPENAI_API_KEY\")\n    api_version = os.environ.get(\"AZURE_OPENAI_API_VERSION\")\n\n    if endpoint is None or api_key is None or api_version is None:\n        warn(\"Azure OpenAI environment variables are not set.\")\n\n    llm = AzureOpenAI(\n        engine=\"4o\" if engine is None else engine,\n        model=\"gpt-4o\" if model_id is None else model_id,  # o1-preview\n        temperature=0.0,\n        azure_endpoint=endpoint,\n        api_key=api_key,\n        api_version=api_version,\n    )\n\n    return llm\n</code></pre>"},{"location":"api/utils.html#llama_utils.utils.models.get_hugging_face_embedding","title":"<code>get_hugging_face_embedding(model_name: str = 'BAAI/bge-base-en-v1.5', cache_folder: str = None)</code>","text":"<p>Get the hugging face embedding model.</p> <p>Parameters:</p> Name Type Description Default <code>model_name</code> <code>str</code> <p>Name of the hugging face embedding model.</p> <code>'BAAI/bge-base-en-v1.5'</code> <code>cache_folder</code> <code>str</code> <p>Folder to cache the model.</p> <code>None</code> <p>Returns:</p> Type Description <code>HuggingFaceEmbedding</code> <p>The hugging face embedding model.</p> <p>Raises:</p> Type Description <code>ImportError</code> <p>If the <code>llama-index-embeddings-huggingface</code> package is not installed.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from llama_utils.utils.models import get_hugging_face_embedding\n&gt;&gt;&gt; embedding = get_hugging_face_embedding()\n&gt;&gt;&gt; print(embedding.model_name)\nBAAI/bge-base-en-v1.5\n&gt;&gt;&gt; print(embedding.max_length)\n512\n&gt;&gt;&gt; print(embedding.embed_batch_size)\n10\n</code></pre> Source code in <code>src/llama_utils/utils/models.py</code> <pre><code>def get_hugging_face_embedding(\n    model_name: str = \"BAAI/bge-base-en-v1.5\", cache_folder: str = None\n):\n    \"\"\"Get the hugging face embedding model.\n\n    Parameters\n    ----------\n    model_name: str, optional, default is \"BAAI/bge-base-en-v1.5\"\n        Name of the hugging face embedding model.\n    cache_folder: str, optional, default is None\n        Folder to cache the model.\n\n    Returns\n    -------\n    HuggingFaceEmbedding\n        The hugging face embedding model.\n\n    Raises\n    ------\n    ImportError\n        If the `llama-index-embeddings-huggingface` package is not installed.\n\n    Examples\n    --------\n    &gt;&gt;&gt; from llama_utils.utils.models import get_hugging_face_embedding\n    &gt;&gt;&gt; embedding = get_hugging_face_embedding()\n    &gt;&gt;&gt; print(embedding.model_name)\n    BAAI/bge-base-en-v1.5\n    &gt;&gt;&gt; print(embedding.max_length)\n    512\n    &gt;&gt;&gt; print(embedding.embed_batch_size)\n    10\n    \"\"\"\n    try:\n        from llama_index.embeddings.huggingface import HuggingFaceEmbedding\n    except ImportError:\n        raise ImportError(\n            \"Please install the `llama-index-embeddings-huggingface` package to use the Hugging Face embedding model.\"\n        )\n\n    embedding = HuggingFaceEmbedding(model_name=model_name, cache_folder=cache_folder)\n    return embedding\n</code></pre>"},{"location":"api/utils.html#llama_utils.utils.models.get_huggingface_llm","title":"<code>get_huggingface_llm(**kwargs)</code>","text":"<p>Initializes and returns a HuggingFaceLLM instance with specified parameters.</p> <p>Parameters:</p> Name Type Description Default <code>kwargs</code> <p>context_window : int, optional     The maximum context window size, by default DEFAULT_CONTEXT_WINDOW. max_new_tokens : int, optional     The maximum number of new tokens to generate, by default DEFAULT_NUM_OUTPUTS. generate_kwargs : dict, optional     Additional arguments for text generation, by default {\"temperature\": 0.75, \"do_sample\": False}. query_wrapper_prompt : str, optional     The wrapper prompt for query execution, by default \"Answer the following question succinctly and informatively.\". tokenizer_name : str, optional     The tokenizer model name, by default DEFAULT_HUGGINGFACE_MODEL. model_name : str, optional     The model name, by default DEFAULT_HUGGINGFACE_MODEL. device_map : str, optional     The device mapping strategy, by default \"auto\". tokenizer_kwargs : dict, optional     Additional tokenizer arguments, by default {\"max_length\": 2048}. model_kwargs : dict, optional     Additional model arguments, by default {\"torch_dtype\": torch.float16}.</p> <code>{}</code> <p>Returns:</p> Type Description <code>HuggingFaceLLM</code> <p>An instance of the HuggingFaceLLM class.</p> Source code in <code>src/llama_utils/utils/models.py</code> <pre><code>def get_huggingface_llm(**kwargs):\n    \"\"\"Initializes and returns a HuggingFaceLLM instance with specified parameters.\n\n    Parameters\n    ----------\n    kwargs: dict\n        context_window : int, optional\n            The maximum context window size, by default DEFAULT_CONTEXT_WINDOW.\n        max_new_tokens : int, optional\n            The maximum number of new tokens to generate, by default DEFAULT_NUM_OUTPUTS.\n        generate_kwargs : dict, optional\n            Additional arguments for text generation, by default {\"temperature\": 0.75, \"do_sample\": False}.\n        query_wrapper_prompt : str, optional\n            The wrapper prompt for query execution, by default \"Answer the following question succinctly and informatively.\".\n        tokenizer_name : str, optional\n            The tokenizer model name, by default DEFAULT_HUGGINGFACE_MODEL.\n        model_name : str, optional\n            The model name, by default DEFAULT_HUGGINGFACE_MODEL.\n        device_map : str, optional\n            The device mapping strategy, by default \"auto\".\n        tokenizer_kwargs : dict, optional\n            Additional tokenizer arguments, by default {\"max_length\": 2048}.\n        model_kwargs : dict, optional\n            Additional model arguments, by default {\"torch_dtype\": torch.float16}.\n\n    Returns\n    -------\n    HuggingFaceLLM\n        An instance of the HuggingFaceLLM class.\n    \"\"\"\n    try:\n        import torch\n        from llama_index.llms.huggingface import HuggingFaceLLM\n    except ImportError:\n        raise ImportError(\n            \"Please install the `llama-index-llms-huggingface` package to use the HuggingFaceLLM model.\"\n        )\n\n    return HuggingFaceLLM(\n        context_window=kwargs.get(\"context_window\", DEFAULT_CONTEXT_WINDOW),\n        max_new_tokens=kwargs.get(\"max_new_tokens\", DEFAULT_NUM_OUTPUTS),\n        generate_kwargs=kwargs.get(\n            \"generate_kwargs\", {\"temperature\": 0.75, \"do_sample\": False}\n        ),\n        query_wrapper_prompt=kwargs.get(\n            \"query_wrapper_prompt\",\n            \"Answer the following question succinctly and informatively.\",\n        ),\n        tokenizer_name=kwargs.get(\"tokenizer_name\", DEFAULT_HUGGINGFACE_MODEL),\n        model_name=kwargs.get(\"model_name\", DEFAULT_HUGGINGFACE_MODEL),\n        device_map=kwargs.get(\"device_map\", \"auto\"),\n        tokenizer_kwargs=kwargs.get(\"tokenizer_kwargs\", {\"max_length\": 2048}),\n        model_kwargs=kwargs.get(\n            \"model_kwargs\",\n            {\"torch_dtype\": torch.float16},\n        ),\n    )\n</code></pre>"},{"location":"api/utils.html#llama_utils.utils.models.get_ollama_llm","title":"<code>get_ollama_llm(model_id: str = 'llama3', base_url: str = 'http://localhost:11434', temperature: float = 0.75, context_window: int = DEFAULT_CONTEXT_WINDOW, request_timeout: float = 360.0, prompt_key: str = 'prompt', json_mode: bool = False, additional_kwargs: Dict[str, Any] = {}, is_function_calling_model: bool = True, keep_alive: Optional[Union[float, str]] = None)</code>","text":"<p>Get the Ollama LLM with flexible parameters.</p> <p>Parameters:</p> Name Type Description Default <code>model_id</code> <code>str</code> <p>The model ID to use.</p> <code>'llama3'</code> <code>base_url</code> <code>str</code> <p>The base URL of the Ollama API.</p> <code>'http://localhost:11434'</code> <code>temperature</code> <code>float</code> <p>The temperature setting for response randomness.</p> <code>0.75</code> <code>context_window</code> <code>int</code> <p>Maximum token window for context.</p> <code>DEFAULT_CONTEXT_WINDOW</code> <code>request_timeout</code> <code>float</code> <p>Timeout for requests.</p> <code>360.0</code> <code>prompt_key</code> <code>str</code> <p>Key for the prompt in requests.</p> <code>'prompt'</code> <code>json_mode</code> <code>bool</code> <p>Whether to return responses in JSON mode.</p> <code>False</code> <code>additional_kwargs</code> <code>dict</code> <p>Additional model-specific parameters.</p> <code>{}</code> <code>is_function_calling_model</code> <code>bool</code> <p>Whether the model supports function calling.</p> <code>True</code> <code>keep_alive</code> <code>Optional[Union[float, str]]</code> <p>Keep-alive duration.</p> <code>None</code> <p>Returns:</p> Type Description <code>Ollama</code> <p>An instance of the Ollama LLM.</p> <p>Raises:</p> Type Description <code>ImportError</code> <p>If the <code>llama-index-llms-ollama</code> package is not installed.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from llama_utils.utils.models import get_ollama_llm\n&gt;&gt;&gt; llm = get_ollama_llm()\n&gt;&gt;&gt; print(llm.model)\nllama3\n&gt;&gt;&gt; print(llm.base_url)\nhttp://localhost:11434\n&gt;&gt;&gt; print(llm.metadata)\ncontext_window=3900 num_output=256 is_chat_model=True is_function_calling_model=True model_name='llama3' system_role=&lt;MessageRole.SYSTEM: 'system'&gt;\n</code></pre> Source code in <code>src/llama_utils/utils/models.py</code> <pre><code>def get_ollama_llm(\n    model_id: str = \"llama3\",\n    base_url: str = \"http://localhost:11434\",\n    temperature: float = 0.75,\n    context_window: int = DEFAULT_CONTEXT_WINDOW,\n    request_timeout: float = 360.0,\n    prompt_key: str = \"prompt\",\n    json_mode: bool = False,\n    additional_kwargs: Dict[str, Any] = {},\n    is_function_calling_model: bool = True,\n    keep_alive: Optional[Union[float, str]] = None,\n):\n    \"\"\"Get the Ollama LLM with flexible parameters.\n\n    Parameters\n    ----------\n    model_id : str\n        The model ID to use.\n    base_url : str, optional\n        The base URL of the Ollama API.\n    temperature : float, optional\n        The temperature setting for response randomness.\n    context_window : int, optional\n        Maximum token window for context.\n    request_timeout : float, optional\n        Timeout for requests.\n    prompt_key : str, optional\n        Key for the prompt in requests.\n    json_mode : bool, optional\n        Whether to return responses in JSON mode.\n    additional_kwargs : dict, optional\n        Additional model-specific parameters.\n    is_function_calling_model : bool, optional\n        Whether the model supports function calling.\n    keep_alive : Optional[Union[float, str]], optional\n        Keep-alive duration.\n\n    Returns\n    -------\n    Ollama\n        An instance of the Ollama LLM.\n\n    Raises\n    ------\n    ImportError\n        If the `llama-index-llms-ollama` package is not installed.\n\n    Examples\n    --------\n    &gt;&gt;&gt; from llama_utils.utils.models import get_ollama_llm\n    &gt;&gt;&gt; llm = get_ollama_llm()\n    &gt;&gt;&gt; print(llm.model)\n    llama3\n    &gt;&gt;&gt; print(llm.base_url)\n    http://localhost:11434\n    &gt;&gt;&gt; print(llm.metadata)\n    context_window=3900 num_output=256 is_chat_model=True is_function_calling_model=True model_name='llama3' system_role=&lt;MessageRole.SYSTEM: 'system'&gt;\n    \"\"\"\n    try:\n        from llama_index.llms.ollama import Ollama\n    except ImportError:\n        raise ImportError(\n            \"Please install the `llama-index-llms-ollama` package to use the Ollama model.\"\n        )\n\n    return Ollama(\n        model=model_id,\n        base_url=base_url,\n        temperature=temperature,\n        context_window=context_window,\n        request_timeout=request_timeout,\n        prompt_key=prompt_key,\n        json_mode=json_mode,\n        additional_kwargs=additional_kwargs,\n        is_function_calling_model=is_function_calling_model,\n        keep_alive=keep_alive,\n    )\n</code></pre>"},{"location":"api/utils.html#config_loader","title":"config_loader","text":""},{"location":"api/utils.html#llama_utils.utils.config_loader","title":"<code>llama_utils.utils.config_loader</code>","text":"<p>A class or function to load configuration.</p>"},{"location":"api/utils.html#llama_utils.utils.config_loader.ConfigLoader","title":"<code>ConfigLoader</code>","text":"<p>A class or function to load configuration.</p> Source code in <code>src/llama_utils/utils/config_loader.py</code> <pre><code>class ConfigLoader:\n    \"\"\"A class or function to load configuration.\"\"\"\n\n    def __init__(\n        self,\n        llm: Any = None,\n        embedding: Any = None,\n    ):\n        \"\"\"Initialize the ConfigLoader class.\n\n        Parameters\n        ----------\n        llm: Any, optional, default is llama3\n            llm model to use.\n        embedding: Any, optional, default is BAAI/bge-base-en-v1.5\n            Embedding model to use.\n        \"\"\"\n        if llm is None:\n            llm = get_ollama_llm()\n        if embedding is None:\n            embedding = get_hugging_face_embedding()\n\n        Settings.embed_model = embedding\n        Settings.llm = llm\n        Settings.text_splitter = TEXT_SPLITTER\n        self._settings = Settings\n        self._embedding = embedding\n        self._llm = llm\n\n    @property\n    def settings(self):\n        \"\"\"Get the settings.\"\"\"\n        return self._settings\n\n    @property\n    def llm(self):\n        \"\"\"Get the llm model.\"\"\"\n        return self._llm\n\n    @llm.setter\n    def llm(self, value):\n        self._llm = value\n        Settings.llm = value\n\n    @property\n    def embedding(self):\n        \"\"\"Get the embedding model.\"\"\"\n        return self._embedding\n\n    @embedding.setter\n    def embedding(self, value):\n        self._embedding = value\n        Settings.embed_model = value\n</code></pre>"},{"location":"api/utils.html#llama_utils.utils.config_loader.ConfigLoader.embedding","title":"<code>embedding</code>  <code>property</code> <code>writable</code>","text":"<p>Get the embedding model.</p>"},{"location":"api/utils.html#llama_utils.utils.config_loader.ConfigLoader.llm","title":"<code>llm</code>  <code>property</code> <code>writable</code>","text":"<p>Get the llm model.</p>"},{"location":"api/utils.html#llama_utils.utils.config_loader.ConfigLoader.settings","title":"<code>settings</code>  <code>property</code>","text":"<p>Get the settings.</p>"},{"location":"api/utils.html#llama_utils.utils.config_loader.ConfigLoader.__init__","title":"<code>__init__(llm: Any = None, embedding: Any = None)</code>","text":"<p>Initialize the ConfigLoader class.</p> <p>Parameters:</p> Name Type Description Default <code>llm</code> <code>Any</code> <p>llm model to use.</p> <code>None</code> <code>embedding</code> <code>Any</code> <p>Embedding model to use.</p> <code>None</code> Source code in <code>src/llama_utils/utils/config_loader.py</code> <pre><code>def __init__(\n    self,\n    llm: Any = None,\n    embedding: Any = None,\n):\n    \"\"\"Initialize the ConfigLoader class.\n\n    Parameters\n    ----------\n    llm: Any, optional, default is llama3\n        llm model to use.\n    embedding: Any, optional, default is BAAI/bge-base-en-v1.5\n        Embedding model to use.\n    \"\"\"\n    if llm is None:\n        llm = get_ollama_llm()\n    if embedding is None:\n        embedding = get_hugging_face_embedding()\n\n    Settings.embed_model = embedding\n    Settings.llm = llm\n    Settings.text_splitter = TEXT_SPLITTER\n    self._settings = Settings\n    self._embedding = embedding\n    self._llm = llm\n</code></pre>"},{"location":"api/utils.html#helper_functions","title":"helper_functions","text":""},{"location":"api/utils.html#llama_utils.utils.helper_functions","title":"<code>llama_utils.utils.helper_functions</code>","text":"<p>A collection of helper functions used across different modules (e.g., text preprocessing, validation).</p>"},{"location":"api/utils.html#llama_utils.utils.helper_functions.HelperFunctions","title":"<code>HelperFunctions</code>","text":"<p>A collection of helper functions used across different modules (e.g., text preprocessing, validation).</p> Source code in <code>src/llama_utils/utils/helper_functions.py</code> <pre><code>class HelperFunctions:\n    \"\"\"A collection of helper functions used across different modules (e.g., text preprocessing, validation).\"\"\"\n\n    def __init__(self):\n        \"\"\"Initialize the helper functions.\"\"\"\n        pass\n</code></pre>"},{"location":"api/utils.html#llama_utils.utils.helper_functions.HelperFunctions.__init__","title":"<code>__init__()</code>","text":"<p>Initialize the helper functions.</p> Source code in <code>src/llama_utils/utils/helper_functions.py</code> <pre><code>def __init__(self):\n    \"\"\"Initialize the helper functions.\"\"\"\n    pass\n</code></pre>"},{"location":"api/utils.html#llama_utils.utils.helper_functions.generate_content_hash","title":"<code>generate_content_hash(content: str)</code>","text":"<p>Generate a hash for the document content using SHA-256.</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>str</code> <p>The content of the document.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The SHA-256 hash of the content.</p> Source code in <code>src/llama_utils/utils/helper_functions.py</code> <pre><code>def generate_content_hash(content: str):\n    \"\"\"Generate a hash for the document content using SHA-256.\n\n    Parameters\n    ----------\n    content: str\n        The content of the document.\n\n    Returns\n    -------\n    str\n        The SHA-256 hash of the content.\n    \"\"\"\n    return hashlib.sha256(content.encode(\"utf-8\")).hexdigest()\n</code></pre>"},{"location":"api/utils.html#llama_utils.utils.helper_functions.is_sha256","title":"<code>is_sha256(string: str) -&gt; bool</code>","text":"<p>Check if a string is a valid SHA-256 hash.</p> <p>Parameters:</p> Name Type Description Default <code>string</code> <code>str</code> <p>The string to check.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the string is a valid SHA-256 hash, False otherwise.</p> Source code in <code>src/llama_utils/utils/helper_functions.py</code> <pre><code>def is_sha256(string: str) -&gt; bool:\n    \"\"\"Check if a string is a valid SHA-256 hash.\n\n    Parameters\n    ----------\n    string: str\n        The string to check.\n\n    Returns\n    -------\n    bool\n        True if the string is a valid SHA-256 hash, False otherwise.\n    \"\"\"\n    # SHA-256 hash must be 64 characters long and contain only hexadecimal characters\n    return bool(re.fullmatch(r\"[a-fA-F0-9]{64}\", string))\n</code></pre>"},{"location":"api/utils.html#loggers","title":"loggers","text":""},{"location":"api/utils.html#llama_utils.utils.logger","title":"<code>llama_utils.utils.logger</code>","text":"<p>Logger.</p>"},{"location":"api/utils.html#llama_utils.utils.logger.Logger","title":"<code>Logger</code>","text":"<p>Logger class.</p> Source code in <code>src/llama_utils/utils/logger.py</code> <pre><code>class Logger:\n    \"\"\"Logger class.\"\"\"\n\n    def __init__(self, name: str, level: int = logging.INFO, file_name: str = None):\n        \"\"\"Initialize the logger.\"\"\"\n        logging.basicConfig(\n            level=level,\n            format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\",\n            filename=file_name if not None else \"llama-utils.log\",\n        )\n        self.logger = logging.getLogger(name)\n        self.logger.addHandler(logging.StreamHandler(stream=sys.stdout))\n</code></pre>"},{"location":"api/utils.html#llama_utils.utils.logger.Logger.__init__","title":"<code>__init__(name: str, level: int = logging.INFO, file_name: str = None)</code>","text":"<p>Initialize the logger.</p> Source code in <code>src/llama_utils/utils/logger.py</code> <pre><code>def __init__(self, name: str, level: int = logging.INFO, file_name: str = None):\n    \"\"\"Initialize the logger.\"\"\"\n    logging.basicConfig(\n        level=level,\n        format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\",\n        filename=file_name if not None else \"llama-utils.log\",\n    )\n    self.logger = logging.getLogger(name)\n    self.logger.addHandler(logging.StreamHandler(stream=sys.stdout))\n</code></pre>"},{"location":"api/utils.html#errors","title":"errors","text":""},{"location":"api/utils.html#llama_utils.utils.errors","title":"<code>llama_utils.utils.errors</code>","text":"<p>Errors module.</p>"},{"location":"api/utils.html#llama_utils.utils.errors.StorageNotFoundError","title":"<code>StorageNotFoundError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>ReadOnlyError.</p> Source code in <code>src/llama_utils/utils/errors.py</code> <pre><code>class StorageNotFoundError(Exception):\n    \"\"\"ReadOnlyError.\"\"\"\n\n    def __init__(self, error_message: str):\n        \"\"\"__init__.\"\"\"\n</code></pre>"},{"location":"api/utils.html#llama_utils.utils.errors.StorageNotFoundError.__init__","title":"<code>__init__(error_message: str)</code>","text":"<p>init.</p> Source code in <code>src/llama_utils/utils/errors.py</code> <pre><code>def __init__(self, error_message: str):\n    \"\"\"__init__.\"\"\"\n</code></pre>"},{"location":"dev/installation.html","title":"Installation","text":"<p>To install unicloud, run this command in your terminal:</p> <pre><code>     pip install llama-utils\n</code></pre>"},{"location":"tools/llama-cpp.html","title":"Using Llama.cpp for Local LLM Inference","text":""},{"location":"tools/llama-cpp.html#introduction","title":"Introduction","text":"<p>Llama.cpp is a powerful and efficient inference framework for running LLaMA models locally on your machine. Unlike other tools such as Ollama, LM Studio, and similar LLM-serving solutions, Llama.cpp is designed to provide high-performance, low-resource inference while offering flexibility for different hardware architectures.</p>"},{"location":"tools/llama-cpp.html#how-llamacpp-compares-to-other-tools","title":"How Llama.cpp Compares to Other Tools","text":"<ul> <li>Llama.cpp vs. Ollama: Ollama provides a more user-friendly experience with built-in model management, whereas Llama.cpp gives you full control over your models and hardware acceleration.</li> <li>Llama.cpp vs. LM Studio: LM Studio offers a GUI for managing models, whereas Llama.cpp is focused on CLI and scripting automation for advanced users.</li> <li>Advantages of Llama.cpp:<ul> <li>Lightweight and highly optimized for CPU inference.</li> <li>Supports a variety of platforms including Windows, Linux, and macOS.</li> <li>Allows fine-tuned control over model execution, including running models as servers or embedding them into Python applications.</li> </ul> </li> </ul> <p>This tutorial will guide you through the installation process on different operating systems and show you how to interact with LLMs using Python and HTTP requests.</p>"},{"location":"tools/llama-cpp.html#installation","title":"Installation","text":"<p>For detailed build instructions, refer to the official guide: Llama.cpp Build Instructions in the following I will explain the different pre-built binaries that you can download from the llama.cpp github repository and how to install them on your machine  </p>"},{"location":"tools/llama-cpp.html#windows","title":"Windows","text":""},{"location":"tools/llama-cpp.html#choosing-the-right-binary","title":"Choosing the Right Binary","text":"<p>If you are downloading the pre-built binaries from the Llama.cpp releases page, choose the correct one based on your CPU and GPU capabilities:</p> <ul> <li><code>llama-b4671-bin-win-avx-x64.zip</code>: For CPUs with basic AVX support (Intel Sandy Bridge and later, AMD Bulldozer and later).</li> <li><code>llama-b4671-bin-win-avx2-x64.zip</code>: For CPUs with AVX2 support (Intel Haswell and later, AMD Excavator and later).</li> <li><code>llama-b4671-bin-win-avx512-x64.zip</code>: For CPUs with AVX-512 support (Intel Skylake-X and newer, limited to certain Intel CPUs).</li> <li><code>llama-b4671-bin-win-cuda-cu11.7-x64.zip</code> / <code>llama-b4671-bin-win-cuda-cu12.4-x64.zip</code>: For systems with NVIDIA GPUs that support CUDA. These versions utilize CUDA acceleration for improved inference speed.</li> </ul> <p>If you are unsure, start with AVX2, as most modern CPUs support it. If your CPU is older, use the AVX version. If you have a high-end CPU, use the AVX-512 version for better performance. If you have an NVIDIA GPU and want to leverage CUDA, use the appropriate CUDA version matching your installed CUDA driver version.</p> <p> </p>"},{"location":"tools/llama-cpp.html#linux-and-macos","title":"Linux and MacOS","text":"<p>For Linux, download <code>llama-b4671-bin-ubuntu-x64.zip</code>, and for macOS, use <code>llama-b4671-bin-macos-x64.zip</code> or <code>llama-b4671-bin-macos-arm64.zip</code>. Extract them to a directory and add that directory to your system's environment variables to run the executables from any location.</p> <p>you can also use the following installation using curl on linux <pre><code>curl -fsSL https://ollama.com/install.sh | sh\n</code></pre></p> <p>After Downloading the right files, unzip the files and add the extracted directory to your system's environment variables to run the executables from any location.</p>"},{"location":"tools/llama-cpp.html#understanding-gguf-ggml-hugging-face-and-lora-formats","title":"Understanding GGUF, GGML, Hugging Face, and LoRA Formats","text":""},{"location":"tools/llama-cpp.html#what-is-gguf","title":"What is GGUF?","text":"<p>GGUF (Generalized GGML Unified Format) is an optimized file format designed for running large language models efficiently using Llama.cpp and other frameworks. It improves compatibility and performance by standardizing how model weights and metadata are stored, allowing for efficient inference on different hardware architectures.</p>"},{"location":"tools/llama-cpp.html#what-is-ggml","title":"What is GGML?","text":"<p>GGML (Generalized Gradient Model Language) is an earlier format used for LLM inference that supports quantized models, making them more memory-efficient. However, GGUF has largely replaced GGML due to its enhanced features and improved performance.</p>"},{"location":"tools/llama-cpp.html#converting-ggml-to-gguf","title":"Converting GGML to GGUF","text":"<p>If you have a GGML model and need to use it with Llama.cpp, you can convert it to GGUF using a conversion script.</p> <p>Example command:</p> <p><pre><code>python convert_llama_ggml_to_gguf.py --input model.ggml --output model.gguf\n</code></pre> The convert_llama_ggml_to_gguf.py script exists in the llama.cpp github repository in the main directory.</p>"},{"location":"tools/llama-cpp.html#hugging-face-format","title":"Hugging Face Format","text":"<p>Hugging Face models are typically stored in PyTorch (<code>.bin</code> or <code>.safetensors</code>) format. These models can be converted into GGUF format using conversion scripts like <code>convert_hf_to_gguf.py</code>.</p>"},{"location":"tools/llama-cpp.html#lora-format","title":"LoRA Format","text":"<p>LoRA (Low-Rank Adaptation) is a fine-tuning technique used to efficiently adapt large language models to specific tasks. LoRA adapters store only the fine-tuned weight differences rather than modifying the entire model. To use LoRA with Llama.cpp, you may need to merge LoRA weights with a base model before conversion to GGUF using <code>convert_lora_to_gguf.py</code>.</p>"},{"location":"tools/llama-cpp.html#downloading-gguf-model-files-from-hugging-face","title":"Downloading GGUF Model Files from Hugging Face","text":"<p>You can download GGUF model files from Hugging Face and use them with Llama.cpp. Follow these steps:</p> <ol> <li> <p>Visit Hugging Face Models Page: Go to Hugging Face and search for LLaMA or any model compatible with GGUF. in this tutorial we will use the mistral gguf files downloaded from this link `https://huggingface.co/TheBloke/Mistral-7B-Instruct-v0.2-GGUF`</p> </li> <li> <p>Download the Model: Navigate to the model\u2019s repository and download the GGUF version of the model. If the GGUF format is not available, you may need to convert it manually as explained before.</p> </li> <li> <p>Move the File: Place the downloaded or converted GGUF model into your <code>models/</code> directory.</p> </li> </ol>"},{"location":"tools/llama-cpp.html#run-a-model","title":"Run a model:","text":"<p>Now we can use the command llama-cli that is one of the executables that we have downloaded, you can check all the flags that can be used with the llama-cli command to trigger the llm model using the gguf file.</p> <pre><code>llama-cli -m your-model.gguf\n</code></pre> <p> </p> <p> </p>"},{"location":"tools/llama-cpp.html#interacting-with-llamacpp-in-python","title":"Interacting with Llama.cpp in Python","text":""},{"location":"tools/llama-cpp.html#overview-of-llama-cpp-python","title":"Overview of <code>llama-cpp-python</code>","text":"<p>The <code>llama-cpp-python</code> package provides Python bindings for Llama.cpp, allowing users to:</p> <ul> <li>Load and run LLaMA models within Python applications.</li> <li>Perform text generation tasks using GGUF models.</li> <li>Customize inference parameters like temperature, top-k, and top-p for more controlled responses.</li> <li>Run models efficiently on both CPU and GPU (if CUDA is enabled).</li> <li>Host models as an API server for easy integration into applications.</li> </ul>"},{"location":"tools/llama-cpp.html#installing-required-packages","title":"Installing Required Packages","text":"<p>You can use <code>llama-cpp-python</code>, which provides Python bindings for llama.cpp:</p> <pre><code>pip install llama-cpp-python\n</code></pre>"},{"location":"tools/llama-cpp.html#running-inference-in-python","title":"Running Inference in Python","text":"<pre><code>from llama_cpp import Llama\n\nllm = Llama(model_path=\"mistral-7b-instruct-v0.2.Q2_K.gguf\")\nresponse = llm.create_chat_completion(\n  messages=[\n    {\n        \"role\": \"user\",\n        \"content\": \"how big is the sky\"\n    }\n])\nprint(response)\n</code></pre> <p>The response will be something like</p> <pre><code>{\n  'id': 'chatcmpl-e8879677-7335-464a-803b-30a15d68c015',\n  'object': 'chat.completion',\n  'created': 1739218403,\n  'model': 'mistral-7b-instruct-v0.2.Q2_K.gguf',\n  'choices': [\n    {\n      'index': 0,\n      'message':\n        {\n          'role': 'assistant',\n          'content': ' The size of the sky is not something that can be measured in a way that\n          is meaningful to us, as it is not a physical object with defined dimensions.\n          The sky is the expanse above the Earth, and it includes the atmosphere and the outer\n          space beyond. It goes on forever in all directions, as far as our current understanding\n          of the universe extends. So, we cannot assign a specific size to the sky.\n          Instead, we can describe the size of specific parts of the universe, such as the diameter\n          of a star or the distance between two galaxies.'\n        },\n        'logprobs': None,\n        'finish_reason': 'stop'\n    }\n  ],\n  'usage': {\n    'prompt_tokens': 13,\n    'completion_tokens': 112,\n    'total_tokens': 125\n    }\n}\n</code></pre>"},{"location":"tools/llama-cpp.html#downloading-and-using-gguf-models-with-llamafrom_pretrained","title":"Downloading and Using GGUF Models with Llama.from_pretrained","text":"<p>The Llama.from_pretrained method allows users to directly download GGUF models from Hugging Face and use them without manually downloading the files.</p> <p>Example:</p> <p><pre><code>from llama_cpp import Llama\n\n# Download and load a GGUF model directly from Hugging Face\nllm = Llama.from_pretrained(\n    repo_id=\"TheBloke/Mistral-7B-Instruct-v0.2-GGUF\",\n    filename=\"mistral-7b-instruct-v0.2.Q4_K_M.gguf\",\n)\n\nresponse = llm.create_chat_completion(\n  messages=[\n    {\"role\": \"user\", \"content\": \"How does a black hole work?\"}\n  ]\n)\nprint(response)\n</code></pre> This method simplifies the process by automatically downloading and loading the required model into memory, eliminating the need to manually place GGUF files in a directory. and loading the gguf file from that directory.</p> <ul> <li> <p>you can use the <code>cache_dir</code> parameter to specify the directory where the model will be downloaded and cached.</p> </li> <li> <p>the response will be something like <pre><code>{\n    'id': 'chatcmpl-6049f7cd-5e8a-45c0-a69c-e15c1b8842bc',\n    'object': 'chat.completion',\n    'created': 1739220646,\n    'model': 'models--TheBloke--Mistral-7B-Instruct-v0.2-GGUF\\\\snapshots\\\\3a6fbf4a41a1d52e415a4958cde6856d34b2db93\\\\.\\\\mistral-7b-instruct-v0.2.Q2_K.gguf',\n    'choices': [\n        {\n            'index': 0,\n            'message':\n                {\n                    'role': 'assistant',\n                    'content': ' A black hole is a region in space where the gravitational pull is so strong that nothing,\n                        not even light, can escape. The gravity of a black hole is so intense because matter is squeezed\n                        into a very small space.\\n\\nBlack holes are formed when a massive star collapses under its own\n                        gravity at the end of its life. The core collapses in on itself, forming a singularity,\n                        which is a point of infinite density and zero volume. The singularity is surrounded by an event\n                        horizon, which is the boundary of the black hole from which no escape is possible.\\n\\nThe\n                        intense gravity of a black hole warps the fabric of spacetime around it, causing a significant\n                        distortion in the paths of nearby stars and planets. This distortion is known as a gravitational\n                        singularity or a black hole.\\n\\nThe event horizon of a black hole is not a perfect sphere but\n                        rather an irregularly shaped surface that is constantly changing as the black hole interacts\n                        with nearby matter. The event horizon is also not a sharp boundary but rather a gradual\n                        transition from the outside universe to the inside of the black hole.\n                        Black holes are not completely black but rather emit a faint glow due to the energy released\n                        from the intense gravitational forces at work. This glow is known as Hawking radiation, named\n                        after the physicist Stephen Hawking, who first proposed the idea.\\n\\nBlack holes come in\n                        different sizes, from stellar-mass black holes, which can be as small as a few solar masses, to\n                        supermassive black holes, which can be millions or billions of solar masses. The supermassive\n                        black holes are thought to be at the center of most galaxies, including our own Milky Way.\n                        Black holes are fascinating objects in the universe, and scientists continue to study them to\n                        learn more about the fundamental laws of physics and the nature of spacetime.'\n                },\n                'logprobs': None,\n                'finish_reason': 'stop'\n            }\n        ],\n        'usage': {'prompt_tokens': 15, 'completion_tokens': 388, 'total_tokens': 403}\n    }\n}\n</code></pre></p> </li> </ul>"},{"location":"tools/llama-cpp.html#running-llamacpp-as-a-server","title":"Running Llama.cpp as a Server","text":"<p>You can run <code>llama.cpp</code> as a server and interact with it via API calls.</p>"},{"location":"tools/llama-cpp.html#start-the-server","title":"Start the Server","text":"<pre><code>llama-server -m mistral-7b-instruct-v0.2.Q2_K.gguf\n</code></pre> <p>launching the model as a server in your terminal will give the following response.</p> <p> </p>"},{"location":"tools/llama-cpp.html#send-requests-using-python","title":"Send Requests Using Python","text":"<pre><code>import requests\n\n# Define the API endpoint\nurl = \"http://localhost:8000/completion\"\n\n# Define the payload\npayload = {\n    \"model\": \"mistral-7b-instruct-v0.2.Q4_K_M.gguf\",\n    \"prompt\": \"How big is the sky?\",\n    \"temperature\": 0.7,\n    \"max_tokens\": 50\n}\n\nheaders = {\"Content-Type\": \"application/json\"}\ntry:\n    response = requests.post(url, json=payload, headers=headers)\n\n    # Check if the request was successful\n    if response.status_code == 200:\n        # Parse the response JSON\n        response_data = response.json()\n\n        # Extract the result from the response\n        choices = response_data.get(\"choices\", [])\n        if choices:\n            result = choices[0].get(\"text\", \"\")\n            print(\"Response:\", result)\n        else:\n            print(\"No choices found in the response.\")\n    else:\n        print(f\"Request failed with status code {response.status_code}: {response.text}\")\nexcept Exception as e:\n    print(f\"Error occurred: {e}\")\n</code></pre> <p>The response will be something like</p> <pre><code>Response:\nThe sky is not a tangible object and does not have physical dimensions, so it cannot be measured or quantified in the same way that we measure and quantify objects with size or dimensions. The sky is simply the vast expanse of\n</code></pre>"},{"location":"tools/llama-cpp.html#send-requests-from-terminal-linuxmacos-or-powershell-windows","title":"Send Requests from Terminal (Linux/macOS) or PowerShell (Windows)","text":"<pre><code>curl -X POST \"http://localhost:8000/completion\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\"prompt\": \"Tell me a fun fact.\", \"max_tokens\": 50}'\n</code></pre>"},{"location":"tools/llama-cpp.html#conclusion","title":"Conclusion","text":"<p>This tutorial covered installing, running, and interacting with Llama.cpp on different platforms. You can now integrate Llama models into your applications for local inference and API-based interactions.</p>"},{"location":"tools/ollama.html","title":"Running a Local LLM using Ollama","text":"<ul> <li>Ollama is a tool for running large language models (LLMs) locally on your machine. It allows you to download, run,   and interact with various LLMs without relying on cloud-based APIs.</li> <li>Ollama is designed for privacy, performance, and ease of use, making it ideal for offline inference.</li> </ul> <p>Key Features of Ollama - Local Execution \u2013 Runs directly on your computer without requiring an internet connection. - Supports Multiple Models \u2013 Includes Mistral, LLaMA 2, Gemma, and more. - GPU Acceleration \u2013 Uses CUDA (NVIDIA) or Metal (Mac) for faster performance. - API Interface \u2013 Exposes a simple HTTP API for easy integration with applications. - CLI-Based Interaction \u2013 Allows running inference from the command line.</p>"},{"location":"tools/ollama.html#1-installation-of-ollama","title":"1. Installation of Ollama","text":""},{"location":"tools/ollama.html#windows","title":"Windows","text":"<ol> <li>Download the Installer    Visit Ollama's website and download the Windows installer.</li> <li> <p>Run the Installer</p> </li> <li> <p>Double-click the downloaded <code>.exe</code> file.</p> </li> <li>Follow the installation prompts.</li> <li>Restart your terminal after installation.</li> <li>Verify Installation    Open PowerShell or Command Prompt and run:</li> </ol> <pre><code>ollama --version\n</code></pre> <p>This should return the installed version.</p> <p> </p>"},{"location":"tools/ollama.html#macos","title":"macOS","text":"<ol> <li>Install via Homebrew</li> </ol> <p><pre><code>brew install ollama\n</code></pre> 2. Verify Installation</p> <pre><code>ollama --version\n</code></pre>"},{"location":"tools/ollama.html#linux","title":"Linux","text":"<ol> <li>Install via Curl</li> </ol> <p><pre><code>curl -fsSL https://ollama.com/install.sh | sh\n</code></pre> 2. Verify Installation</p> <pre><code>ollama --version\n</code></pre>"},{"location":"tools/ollama.html#2-downloading-and-managing-models","title":"2. Downloading and Managing Models","text":""},{"location":"tools/ollama.html#list-available-models","title":"List Available Models","text":"<pre><code>ollama list\n</code></pre>"},{"location":"tools/ollama.html#download-a-model","title":"Download a Model","text":"<p>First, you can check the available models at https://ollama.com/library and run the following command to download a model:</p> <pre><code>ollama pull mistral\nollama pull gemma\nollama pull llama2\n</code></pre> <p> </p> <ul> <li>When a model is downloaded using Ollama, it is stored in the <code>~/.ollama/models/</code> directory. The model files are located in a subdirectory called <code>blobs</code>. The model's manifest is available in the <code>~/.ollama/models/manifests/registry.ollama.ai/library/&lt;model&gt;/latest</code> file.</li> </ul> <p> </p>"},{"location":"tools/ollama.html#remove-a-model","title":"Remove a Model","text":"<pre><code>ollama rm llama3\n</code></pre>"},{"location":"tools/ollama.html#3-running-ollama-locally","title":"3. Running Ollama Locally","text":""},{"location":"tools/ollama.html#start-the-ollama-server","title":"Start the Ollama Server","text":"<p>Run:</p> <p><pre><code>ollama serve\n</code></pre> you will get something like</p> <pre><code>Windows PowerShell\nCopyright (C) Microsoft Corporation. All rights reserved.\n\nInstall the latest PowerShell for new features and improvements! https://aka.ms/PSWindows\n\nLoading personal and system profiles took 2774ms.\n(llama-utils-l7lRCPhg-py3.12)(base) C:\\gdrive\\algorithms\\AI\\llms\\llama-utils git:[dev/tools-documentations]\nollama serve\n2025/02/01 20:05:46 routes.go:1187: INFO server config env=\"map[CUDA_VISIBLE_DEVICES: GPU_DEVICE_ORDINAL: HIP_VISIBLE_DEVICES: HSA_OVERRIDE_GFX_VERSION: HTTPS_PROXY: HTTP_PROXY: NO_PROXY: OLLAMA_DEBUG:false OLLAMA_FLASH_ATTENTION:false OLLAMA_GPU_OVERHEAD:0 OLLAMA_HOST:http://127.0.0.1:11434 OLLAMA_INTEL_GPU:false OLLAMA_KEEP_ALIVE:5m0s OLLAMA_KV_CACHE_TYPE: OLLAMA_LLM_LIBRARY: OLLAMA_LOAD_TIMEOUT:5m0s OLLAMA_MAX_LOADED_MODELS:0 OLLAMA_MAX_QUEUE:512 OLLAMA_MODELS:C:\\\\Users\\\\eng_m\\\\.ollama\\\\models OLLAMA_MULTIUSER_CACHE:false OLLAMA_NOHISTORY:false OLLAMA_NOPRUNE:false OLLAMA_NUM_PARALLEL:0 OLLAMA_ORIGINS:[http://localhost https://localhost http://localhost:* https://localhost:* http://127.0.0.1 https://127.0.0.1 http://127.0.0.1:* https://127.0.0.1:* http://0.0.0.0 https://0.0.0.0 http://0.0.0.0:* https://0.0.0.0:* app://* file://* tauri://* vscode-webview://*] OLLAMA_SCHED_SPREAD:false ROCR_VISIBLE_DEVICES:]\"\ntime=2025-02-01T20:05:46.724+01:00 level=INFO source=images.go:432 msg=\"total blobs: 31\"\ntime=2025-02-01T20:05:46.726+01:00 level=INFO source=images.go:439 msg=\"total unused blobs removed: 0\"\ntime=2025-02-01T20:05:46.728+01:00 level=INFO source=routes.go:1238 msg=\"Listening on 127.0.0.1:11434 (version 0.5.7)\"\ntime=2025-02-01T20:05:46.729+01:00 level=INFO source=routes.go:1267 msg=\"Dynamic LLM libraries\" runners=\"[cuda_v12_avx rocm_avx cpu cpu_avx cpu_avx2 cuda_v11_avx]\"\ntime=2025-02-01T20:05:46.729+01:00 level=INFO source=gpu.go:226 msg=\"looking for compatible GPUs\"\ntime=2025-02-01T20:05:46.729+01:00 level=INFO source=gpu_windows.go:167 msg=packages count=1\ntime=2025-02-01T20:05:46.729+01:00 level=INFO source=gpu_windows.go:214 msg=\"\" package=0 cores=8 efficiency=0 threads=16\ntime=2025-02-01T20:05:46.956+01:00 level=INFO source=gpu.go:334 msg=\"detected OS VRAM overhead\" id=GPU-04f76f9a-be0a-544b-9a6f-8607b8d0a9ab library=cuda compute=8.6 driver=12.6 name=\"NVIDIA GeForce RTX 3060 Ti\" overhead=\"283.2 MiB\"\ntime=2025-02-01T20:05:46.959+01:00 level=INFO source=types.go:131 msg=\"inference compute\" id=GPU-04f76f9a-be0a-544b-9a6f-8607b8d0a9ab library=cuda variant=v12 compute=8.6 driver=12.6 name=\"NVIDIA GeForce RTX 3060 Ti\"\n</code></pre> <p> </p> <p>Check if the server is running:</p> <pre><code>ps aux | grep ollama\n</code></pre> <p>for Windows use:</p> <pre><code>tasklist | findstr /i \"ollama\"\n</code></pre> <p>you will get something similar to the following <pre><code>tasklist | findstr /i \"ollama\"\nollama.exe                   18460 Console                    1     48,644 K\n</code></pre></p>"},{"location":"tools/ollama.html#configure-gpu-acceleration","title":"Configure GPU Acceleration","text":"<p>If your system supports CUDA, Ollama will use the GPU automatically. You can check GPU usage via:</p> <pre><code>nvidia-smi\n</code></pre> <p>To force CPU usage:</p> <p><pre><code>OLLAMA_USE_CPU=1 ollama run mistral\n</code></pre> for Windows use:</p> <pre><code>set OLLAMA_USE_CPU=1\nollama run mistral  \n</code></pre>"},{"location":"tools/ollama.html#troubleshooting","title":"Troubleshooting","text":"<ul> <li>If <code>ollama</code> commands are not found, restart your shell or check your <code>$PATH</code>: <pre><code>echo $PATH\n</code></pre></li> <li>For permission issues, try running: <pre><code>sudo ollama serve\n</code></pre></li> </ul>"},{"location":"tools/ollama.html#4-interacting-with-ollama-via-cli","title":"4. Interacting with Ollama via CLI","text":""},{"location":"tools/ollama.html#basic-inference","title":"Basic Inference","text":"<pre><code>ollama run mistral\n</code></pre> <p>to exit type <pre><code>/bye\n</code></pre></p> <p>you can also run the following command to get the response from the model directly</p> <pre><code>ollama run mistral \"What is the capital of France?\"\n</code></pre> <p>The above command will return the following response</p> <pre><code>Paris is the capital of France.\n</code></pre>"},{"location":"tools/ollama.html#5-using-ollama-as-an-api","title":"5. Using Ollama as an API","text":""},{"location":"tools/ollama.html#starting-the-api","title":"Starting the API","text":"<p>Run:</p> <pre><code>ollama serve\n</code></pre>"},{"location":"tools/ollama.html#1making-a-request-via-curl","title":"1.Making a Request via <code>curl</code>","text":"<p><pre><code>curl http://localhost:11434/api/generate -d '{\n  \"model\": \"mistral\",\n  \"prompt\": \"Tell me a joke\"\n}'\n</code></pre> for command terminal in Windows use: <pre><code>curl -X POST \"http://127.0.0.1:11434/api/generate\" -H \"Content-Type: application/json\" -d \"{\\\"model\\\": \\\"mistral\\\", \\\"prompt\\\": \\\"Tell me a short fact about AI\\\", \\\"options\\\": {\\\"max_tokens\\\": 50}}\"\n</code></pre></p> <p>The response will be similar to:</p> <pre><code>C:\\Users\\my-user-name&gt;curl -X POST \"http://127.0.0.1:11434/api/generate\" -H \"Content-Type: application/json\" -d \"\n{\\\"model\\\": \\\"mistral\\\", \\\"prompt\\\": \\\"Tell me a short fact about AI\\\", \\\"options\\\": {\\\"max_tokens\\\": 50}}\"\n{\"model\":\"mistral\",\"created_at\":\"2025-02-01T21:01:25.9015572Z\",\"response\":\" Art\",\"done\":false}\n{\"model\":\"mistral\",\"created_at\":\"2025-02-01T21:01:25.9428293Z\",\"response\":\"ificial\",\"done\":false}\n{\"model\":\"mistral\",\"created_at\":\"2025-02-01T21:01:25.9610394Z\",\"response\":\" Intelligence\",\"done\":false}\n{\"model\":\"mistral\",\"created_at\":\"2025-02-01T21:01:25.9747797Z\",\"response\":\" (\",\"done\":false}\n{\"model\":\"mistral\",\"created_at\":\"2025-02-01T21:01:25.9880321Z\",\"response\":\"AI\",\"done\":false}\n{\"model\":\"mistral\",\"created_at\":\"2025-02-01T21:01:26.0026846Z\",\"response\":\")\",\"done\":false}\n{\"model\":\"mistral\",\"created_at\":\"2025-02-01T21:01:26.017711Z\",\"response\":\" has\",\"done\":false}\n{\"model\":\"mistral\",\"created_at\":\"2025-02-01T21:01:26.0311171Z\",\"response\":\" the\",\"done\":false}\n{\"model\":\"mistral\",\"created_at\":\"2025-02-01T21:01:26.0447043Z\",\"response\":\" capability\",\"done\":false}\n{\"model\":\"mistral\",\"created_at\":\"2025-02-01T21:01:26.0593169Z\",\"response\":\" to\",\"done\":false}\n{\"model\":\"mistral\",\"created_at\":\"2025-02-01T21:01:26.0724141Z\",\"response\":\" learn\",\"done\":false}\n{\"model\":\"mistral\",\"created_at\":\"2025-02-01T21:01:26.0859434Z\",\"response\":\" from\",\"done\":false}\n{\"model\":\"mistral\",\"created_at\":\"2025-02-01T21:01:26.1004478Z\",\"response\":\" its\",\"done\":false}\n{\"model\":\"mistral\",\"created_at\":\"2025-02-01T21:01:26.1138166Z\",\"response\":\" experiences\",\"done\":false}\n{\"model\":\"mistral\",\"created_at\":\"2025-02-01T21:01:26.1279841Z\",\"response\":\",\",\"done\":false}\n{\"model\":\"mistral\",\"created_at\":\"2025-02-01T21:01:26.1404762Z\",\"response\":\" adjust\",\"done\":false}\n{\"model\":\"mistral\",\"created_at\":\"2025-02-01T21:01:26.1544505Z\",\"response\":\" its\",\"done\":false}\n{\"model\":\"mistral\",\"created_at\":\"2025-02-01T21:01:26.1684524Z\",\"response\":\" behavior\",\"done\":false}\n{\"model\":\"mistral\",\"created_at\":\"2025-02-01T21:01:26.1826811Z\",\"response\":\",\",\"done\":false}\n{\"model\":\"mistral\",\"created_at\":\"2025-02-01T21:01:26.1958623Z\",\"response\":\" and\",\"done\":false}\n{\"model\":\"mistral\",\"created_at\":\"2025-02-01T21:01:26.2081325Z\",\"response\":\" improve\",\"done\":false}\n{\"model\":\"mistral\",\"created_at\":\"2025-02-01T21:01:26.2259143Z\",\"response\":\" its\",\"done\":false}\n{\"model\":\"mistral\",\"created_at\":\"2025-02-01T21:01:26.2384732Z\",\"response\":\" performance\",\"done\":false}\n{\"model\":\"mistral\",\"created_at\":\"2025-02-01T21:01:26.25283Z\",\"response\":\" based\",\"done\":false}\n{\"model\":\"mistral\",\"created_at\":\"2025-02-01T21:01:26.2662188Z\",\"response\":\" on\",\"done\":false}\n{\"model\":\"mistral\",\"created_at\":\"2025-02-01T21:01:26.2807515Z\",\"response\":\" that\",\"done\":false}\n{\"model\":\"mistral\",\"created_at\":\"2025-02-01T21:01:26.2942798Z\",\"response\":\" learning\",\"done\":false}\n{\"model\":\"mistral\",\"created_at\":\"2025-02-01T21:01:26.3073516Z\",\"response\":\".\",\"done\":false}\n{\"model\":\"mistral\",\"created_at\":\"2025-02-01T21:01:26.3217636Z\",\"response\":\" This\",\"done\":false}\n{\"model\":\"mistral\",\"created_at\":\"2025-02-01T21:01:26.3351073Z\",\"response\":\" is\",\"done\":false}\n{\"model\":\"mistral\",\"created_at\":\"2025-02-01T21:01:26.349646Z\",\"response\":\" known\",\"done\":false}\n{\"model\":\"mistral\",\"created_at\":\"2025-02-01T21:01:26.3629003Z\",\"response\":\" as\",\"done\":false}\n{\"model\":\"mistral\",\"created_at\":\"2025-02-01T21:01:26.3757784Z\",\"response\":\" machine\",\"done\":false}\n{\"model\":\"mistral\",\"created_at\":\"2025-02-01T21:01:26.3892467Z\",\"response\":\" learning\",\"done\":false}\n{\"model\":\"mistral\",\"created_at\":\"2025-02-01T21:01:26.4030308Z\",\"response\":\",\",\"done\":false}\n{\"model\":\"mistral\",\"created_at\":\"2025-02-01T21:01:26.4183595Z\",\"response\":\" one\",\"done\":false}\n{\"model\":\"mistral\",\"created_at\":\"2025-02-01T21:01:26.4317698Z\",\"response\":\" of\",\"done\":false}\n{\"model\":\"mistral\",\"created_at\":\"2025-02-01T21:01:26.4465969Z\",\"response\":\" the\",\"done\":false}\n{\"model\":\"mistral\",\"created_at\":\"2025-02-01T21:01:26.4595035Z\",\"response\":\" sub\",\"done\":false}\n{\"model\":\"mistral\",\"created_at\":\"2025-02-01T21:01:26.473006Z\",\"response\":\"fields\",\"done\":false}\n{\"model\":\"mistral\",\"created_at\":\"2025-02-01T21:01:26.4876476Z\",\"response\":\" of\",\"done\":false}\n{\"model\":\"mistral\",\"created_at\":\"2025-02-01T21:01:26.5008632Z\",\"response\":\" AI\",\"done\":false}\n{\"model\":\"mistral\",\"created_at\":\"2025-02-01T21:01:26.5142572Z\",\"response\":\".\",\"done\":false}\n{\"model\":\"mistral\",\"created_at\":\"2025-02-01T21:01:26.5306917Z\",\"response\":\"\",\"done\":true,\"done_reason\":\"stop\",\"context\":[3,29473,16027,1296,1032,3253,2407,1452,16875,4,1027,4719,15541,23859,1093,12509,29499,1427,1040,22136,1066,3590,1245,1639,9789,29493,8160,1639,6942,29493,1072,5684,1639,5165,3586,1124,1137,5936,29491,1619,1117,3419,1158,6367,5936,29493,1392,1070,1040,1851,8202,1070,16875,29491],\"total_duration\":4969300700,\"load_duration\":3858876600,\"prompt_eval_count\":12,\"prompt_eval_duration\":470000000,\"eval_count\":44,\"eval_duration\":630000000}\n</code></pre>"},{"location":"tools/ollama.html#options","title":"Options","text":"<ul> <li><code>model</code>: The LLM model to use (e.g., <code>mistral</code>, <code>gemma</code>, <code>llama2</code>).</li> <li><code>prompt</code>: The input text or query for the model.</li> <li><code>options</code>: Additional parameters like <code>max_tokens</code>, <code>temperature</code>, etc.</li> <li><code>max_tokens</code>: The maximum number of tokens to generate in the response.</li> <li><code>stream</code>: Whether to stream the response (default: <code>false</code>). If <code>true</code>, the response will be streamed in chunks.</li> <li><code>temperature</code>: Controls the randomness of the output (default: <code>0.7</code>).</li> <li><code>top_p</code>: Filters the tokens to consider based on their cumulative probability (default: <code>0.9</code>).</li> <li><code>top_k</code>: Filters the tokens to consider based on their likelihood (default: <code>50</code>).</li> <li><code>stop</code>: A list of tokens at which the model should stop generating text.</li> <li><code>n</code>: The number of completions to generate (default: <code>1</code>).</li> <li><code>return_full</code>: Whether to return the full response context (default: <code>false</code>).</li> <li><code>return_prompt</code>: Whether to return the prompt in the response (default: <code>false</code>).</li> <li><code>return_options</code>: Whether to return the options in the response (default: <code>false</code>).</li> <li><code>return_context</code>: Whether to return the context in the response (default: <code>false</code>).</li> <li><code>return_duration</code>: Whether to return the duration in the response (default: <code>false</code>).</li> <li><code>return_eval_count</code>: Whether to return the evaluation count in the response (default: <code>false</code>).</li> <li><code>return_eval_duration</code>: Whether to return the evaluation duration in the response (default: <code>false</code>).</li> <li><code>return_total_duration</code>: Whether to return the total duration in the response (default: <code>false</code>).</li> <li><code>return_load_duration</code>: Whether to return the load duration in the response (default: <code>false</code>).</li> <li><code>return_done</code>: Whether to return the done status in the response (default: <code>false</code>).</li> <li><code>return_done_reason</code>: Whether to return the done reason in the response (default: <code>false</code>).</li> <li><code>return_error</code>: Whether to return the error in the response (default: <code>false</code>).</li> <li><code>return_error_message</code>: Whether to return the error message in the response (default: <code>false</code>).</li> <li> </li> </ul>"},{"location":"tools/ollama.html#return_error_traceback-whether-to-return-the-error-traceback-in-the-response-default-false","title":"<code>return_error_traceback</code>: Whether to return the error traceback in the response (default: <code>false</code>).","text":""},{"location":"tools/ollama.html#2using-python-requests","title":"2.Using Python (<code>requests</code>)","text":"<pre><code>import requests\n\nurl = \"http://localhost:11434/api/generate\"\ndata = {\"model\": \"mistral\", \"prompt\": \"Tell me a joke\"}\n\nresponse = requests.post(url, json=data)\nprint(response.json())\n</code></pre>"},{"location":"tools/ollama.html#6-integrating-ollama-with-llama-index","title":"6. Integrating Ollama with <code>llama-index</code>","text":""},{"location":"tools/ollama.html#install-dependencies","title":"Install Dependencies","text":"<pre><code>pip install llama-index-llms-ollama\n</code></pre>"},{"location":"tools/ollama.html#configuring-llama-index","title":"Configuring <code>llama-index</code>","text":"<pre><code>from llama_index.llms.ollama import Ollama\nfrom llama_index.core import Settings\n\nllm = Ollama(model=\"mistral\")\nSettings.llm = llm\n</code></pre>"},{"location":"tools/ollama.html#querying-ollama-via-llama-index","title":"Querying Ollama via <code>llama-index</code>","text":"<pre><code>response = llm.complete(\"What is the capital of the Netherlands?\")\nprint(response)\n</code></pre> <pre><code>The capital city of the Netherlands is Amsterdam. However, it's important to note that The Hague (Den Haag) serves as the seat of government, hosting several key institutions such as the Dutch Parliament and the Supreme Court. Amsterdam, on the other hand, is known for its vibrant culture and economic significance.\n</code></pre>"},{"location":"tools/ollama.html#7-performance-optimization","title":"7. Performance Optimization","text":""},{"location":"tools/ollama.html#1gpu-acceleration","title":"1.GPU Acceleration","text":"<ul> <li>Ensure you have CUDA installed: <pre><code>nvidia-smi\n</code></pre></li> <li>Run Ollama with GPU support: <pre><code>OLLAMA_USE_CUDA=1 ollama serve\n</code></pre> for Windows use: <pre><code>set OLLAMA_USE_CUDA=1\nollama serve\n</code></pre></li> </ul>"},{"location":"tools/ollama.html#2change-port-number","title":"2.Change port number","text":"<ul> <li>To change the port number, use the <code>OLLAMA_HOST</code> environment variable to specify the new port: <pre><code>export OLLAMA_HOST=127.0.0.1:8081\nollama serve\n</code></pre> for Windows use: <pre><code>set OLLAMA_HOST=127.0.0.1:8081\nollama serve\n</code></pre> the previous command will change the port to <code>8081</code> from the default port <code>11434</code>. the output will be similar to the following <pre><code>C:\\Users\\eng_m&gt;set OLLAMA_HOST=http://127.0.0.1:8081\n\nC:\\Users\\eng_m&gt;ollama serve\n2025/02/01 22:34:25 routes.go:1187: INFO server config env=\"map[CUDA_VISIBLE_DEVICES: GPU_DEVICE_ORDINAL: HIP_VISIBLE_DEVICES: HSA_OVERRIDE_GFX_VERSION: HTTPS_PROXY: HTTP_PROXY: NO_PROXY: OLLAMA_DEBUG:false OLLAMA_FLASH_ATTENTION:false OLLAMA_GPU_OVERHEAD:0 OLLAMA_HOST:http://127.0.0.1:8081 OLLAMA_INTEL_GPU:false OLLAMA_KEEP_ALIVE:5m0s OLLAMA_KV_CACHE_TYPE: OLLAMA_LLM_LIBRARY: OLLAMA_LOAD_TIMEOUT:5m0s OLLAMA_MAX_LOADED_MODELS:0 OLLAMA_MAX_QUEUE:512 OLLAMA_MODELS:C:\\\\Users\\\\eng_m\\\\.ollama\\\\models OLLAMA_MULTIUSER_CACHE:false OLLAMA_NOHISTORY:false OLLAMA_NOPRUNE:false OLLAMA_NUM_PARALLEL:0 OLLAMA_ORIGINS:[http://localhost https://localhost http://localhost:* https://localhost:* http://127.0.0.1 https://127.0.0.1 http://127.0.0.1:* https://127.0.0.1:* http://0.0.0.0 https://0.0.0.0 http://0.0.0.0:* https://0.0.0.0:* app://* file://* tauri://* vscode-webview://*] OLLAMA_SCHED_SPREAD:false ROCR_VISIBLE_DEVICES:]\"\ntime=2025-02-01T22:34:25.996+01:00 level=INFO source=images.go:432 msg=\"total blobs: 26\"\ntime=2025-02-01T22:34:25.998+01:00 level=INFO source=images.go:439 msg=\"total unused blobs removed: 0\"\ntime=2025-02-01T22:34:26.000+01:00 level=INFO source=routes.go:1238 msg=\"Listening on 127.0.0.1:8081 (version 0.5.7)\"\ntime=2025-02-01T22:34:26.001+01:00 level=INFO source=routes.go:1267 msg=\"Dynamic LLM libraries\" runners=\"[cpu cpu_avx cpu_avx2 cuda_v11_avx cuda_v12_avx rocm_avx]\"\ntime=2025-02-01T22:34:26.001+01:00 level=INFO source=gpu.go:226 msg=\"looking for compatible GPUs\"\ntime=2025-02-01T22:34:26.002+01:00 level=INFO source=gpu_windows.go:167 msg=packages count=1\ntime=2025-02-01T22:34:26.002+01:00 level=INFO source=gpu_windows.go:214 msg=\"\" package=0 cores=8 efficiency=0 threads=16\ntime=2025-02-01T22:34:26.188+01:00 level=INFO source=types.go:131 msg=\"inference compute\" id=GPU-04f76f9a-be0a-544b-9a6f-8607b8d0a9ab library=cuda variant=v12 compute=8.6 driver=12.6 name=\"NVIDIA GeForce RTX 3060 Ti\" total=\"8.0 GiB\" available=\"7.0 GiB\"\n</code></pre></li> </ul>"},{"location":"tools/ollama.html#2change-cache-directory","title":"2.Change cache directory","text":""},{"location":"tools/ollama.html#change-default-ollama-directory-symlink","title":"Change default <code>.ollama</code> directory (Symlink)","text":"<ul> <li> <p>To change the cache directory from Windows directory to a directory that exist in a network, you can symlink the <code>~/. ollama</code> directory to a different location.</p> </li> <li> <p>First move the <code>.ollama</code> directory to the new location: <pre><code>Move-Item \"$env:USERPROFILE\\.ollama\" \"&lt;your-new-directory&gt;\" -Force\n</code></pre></p> </li> <li> <p>Second, create a symlink to the new location: <pre><code>New-Item -ItemType SymbolicLink -Path \"$env:USERPROFILE\\.ollama\" -Target \"&lt;your-new-directory&gt;\"\n</code></pre> PowerShell will complain if the old director in your user profile exists, so make sure you move it to the new directory as shown above.</p> </li> <li> <p>Restart Ollama to apply the changes.</p> </li> <li>to verify the changes, you can run the <code>serve</code> or the <code>list</code> command from ollama. <pre><code>ollama serve\n</code></pre></li> </ul>"},{"location":"tools/ollama.html#8-common-issues-troubleshooting","title":"8. Common Issues &amp; Troubleshooting","text":"Issue Solution Command not found Restart the terminal, check<code>$PATH</code>. GPU not used Check<code>nvidia-smi</code>, install CUDA drivers. API not responding Ensure<code>ollama serve</code> is running. <p>This guide provides everything needed to run Ollama locally and integrate it with <code>llama-index</code>. Let me know if you need further customization! \ud83d\ude80</p>"},{"location":"tools/ollama.html#9errors","title":"9.Errors","text":""},{"location":"tools/ollama.html#1address-not-permitted","title":"1.address not permitted","text":"<p>You might face the following error when you run the <code>ollama serve</code> command <pre><code>Error: listen tcp 127.0.0.1:11434: bind: Only one usage of each socket address (protocol/network address/port) is normally permitted.\n</code></pre> This error is due to the port <code>11434</code> is already in use, to solve this error, you can check which process is using this port by running the following command <pre><code>netstat -ano | findstr :11434\n</code></pre> for linux users, you can use the following command <pre><code>netstat -ano | grep :11434\n</code></pre></p> <p>You will get the following output <pre><code>    TCP    127.0.0.1:11434        0.0.0.0:0              LISTENING       20796\n</code></pre> Then you can kill the process by running the following command <pre><code>taskkill /F /PID 20796\n</code></pre> for linux users, you can use the following command <pre><code>kill -9 20796\n</code></pre></p> <p>Then you will gee the following output <pre><code>SUCCESS: The process with PID 20796 has been terminated.\n</code></pre></p> <ul> <li>Then you can run the <code>ollama serve</code> command again, you should see the following output <pre><code>2024/11/22 23:20:04 routes.go:1189: INFO server config env=\"map[CUDA_VISIBLE_DEVICES: GPU_DEVICE_ORDINAL: HIP_VISIBLE_DEVICES: HSA_OVERRIDE_GFX_VERSION: HTTPS_PROXY: HTTP_PROXY: NO_PROXY: OLLAMA_DEBUG:false OLLAMA_FLASH_ATTENTION:false OLLAMA_GPU_OVERHEAD:0 OLLAMA_HOST:http://127.0.0.1:11434 OLLAMA_INTEL_GPU:false OLLAMA_KEEP_ALIVE:5m0s OLLAMA_LLM_LIBRARY: OLLAMA_LOAD_TIMEOUT:5m0s OLLAMA_MAX_LOADED_MODELS:0 OLLAMA_MAX_QUEUE:512 OLLAMA_MODELS:C:\\\\Users\\\\eng_m\\\\.ollama\\\\models OLLAMA_MULTIUSER_CACHE:false OLLAMA_NOHISTORY:false OLLAMA_NOPRUNE:false OLLAMA_NUM_PARALLEL:0 OLLAMA_ORIGINS:[http://localhost https://localhost http://localhost:* https://localhost:* http://127.0.0.1 https://127.0.0.1 http://127.0.0.1:* https://127.0.0.1:* http://0.0.0.0 https://0.0.0.0 http://0.0.0.0:* https://0.0.0.0:* app://* file://* tauri://* vscode-webview://*] OLLAMA_SCHED_SPREAD:false OLLAMA_TMPDIR: ROCR_VISIBLE_DEVICES:]\"\ntime=2024-11-22T23:20:04.393+01:00 level=INFO source=images.go:755 msg=\"total blobs: 28\"\ntime=2024-11-22T23:20:04.395+01:00 level=INFO source=images.go:762 msg=\"total unused blobs removed: 0\"\ntime=2024-11-22T23:20:04.397+01:00 level=INFO source=routes.go:1240 msg=\"Listening on 127.0.0.1:11434 (version 0.4.1)\"\ntime=2024-11-22T23:20:04.400+01:00 level=INFO source=common.go:49 msg=\"Dynamic LLM libraries\" runners=\"[cpu cpu_avx cpu_avx2 cuda_v11 cuda_v12 rocm]\"\ntime=2024-11-22T23:20:04.400+01:00 level=INFO source=gpu.go:221 msg=\"looking for compatible GPUs\"\ntime=2024-11-22T23:20:04.400+01:00 level=INFO source=gpu_windows.go:167 msg=packages count=1\ntime=2024-11-22T23:20:04.400+01:00 level=INFO source=gpu_windows.go:214 msg=\"\" package=0 cores=8 efficiency=0 threads=16\ntime=2024-11-22T23:20:04.592+01:00 level=INFO source=types.go:123 msg=\"inference compute\" id=GPU-04f76f9a-be0a-544b-9a6f-8607b8d0a9ab library=cuda variant=v12 compute=8.6 driver=12.6 name=\"NVIDIA GeForce RTX 3060 Ti\" total=\"8.0 GiB\" available=\"7.0 GiB\"\n</code></pre></li> </ul>"},{"location":"tools/notebooks/llama-cpp.html","title":"Using Llama.cpp for Chat Completion","text":"In\u00a0[1]: Copied! <pre>import os\nfrom llama_cpp import Llama\n\n# Set the cache directory\nCACHE_DIR = f\"{os.getenv('HUGGINGFACE_CACHE_DIR')}/gguf\"\n</pre> import os from llama_cpp import Llama  # Set the cache directory CACHE_DIR = f\"{os.getenv('HUGGINGFACE_CACHE_DIR')}/gguf\" In\u00a0[2]: Copied! <pre># Load the Llama model from a local GGUF file\nmodel_path = f\"{CACHE_DIR}/mistral-7b-instruct-v0.2.Q2_K.gguf\"\nllm = Llama(model_path=model_path)\n</pre>  # Load the Llama model from a local GGUF file model_path = f\"{CACHE_DIR}/mistral-7b-instruct-v0.2.Q2_K.gguf\" llm = Llama(model_path=model_path)  <pre>llama_model_loader: loaded meta data with 24 key-value pairs and 291 tensors from \\\\MYCLOUDEX2ULTRA\\research\\llm\\models/gguf/mistral-7b-instruct-v0.2.Q2_K.gguf (version GGUF V3 (latest))\nllama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.\nllama_model_loader: - kv   0:                       general.architecture str              = llama\nllama_model_loader: - kv   1:                               general.name str              = mistralai_mistral-7b-instruct-v0.2\nllama_model_loader: - kv   2:                       llama.context_length u32              = 32768\nllama_model_loader: - kv   3:                     llama.embedding_length u32              = 4096\nllama_model_loader: - kv   4:                          llama.block_count u32              = 32\nllama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 14336\nllama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 128\nllama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32\nllama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 8\nllama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000010\nllama_model_loader: - kv  10:                       llama.rope.freq_base f32              = 1000000.000000\nllama_model_loader: - kv  11:                          general.file_type u32              = 10\nllama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama\nllama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,32000]   = [\"&lt;unk&gt;\", \"&lt;s&gt;\", \"&lt;/s&gt;\", \"&lt;0x00&gt;\", \"&lt;...\nllama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...\nllama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...\nllama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 1\nllama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 2\nllama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 0\nllama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0\nllama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true\nllama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false\nllama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% for message in mess...\nllama_model_loader: - kv  23:               general.quantization_version u32              = 2\nllama_model_loader: - type  f32:   65 tensors\nllama_model_loader: - type q2_K:   65 tensors\nllama_model_loader: - type q3_K:  160 tensors\nllama_model_loader: - type q6_K:    1 tensors\nprint_info: file format = GGUF V3 (latest)\nprint_info: file type   = Q2_K - Medium\nprint_info: file size   = 2.87 GiB (3.41 BPW) \ninit_tokenizer: initializing tokenizer for type 1\nload: control token:      2 '&lt;/s&gt;' is not marked as EOG\nload: control token:      1 '&lt;s&gt;' is not marked as EOG\nload: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect\nload: special tokens cache size = 3\nload: token to piece cache size = 0.1637 MB\nprint_info: arch             = llama\nprint_info: vocab_only       = 0\nprint_info: n_ctx_train      = 32768\nprint_info: n_embd           = 4096\nprint_info: n_layer          = 32\nprint_info: n_head           = 32\nprint_info: n_head_kv        = 8\nprint_info: n_rot            = 128\nprint_info: n_swa            = 0\nprint_info: n_embd_head_k    = 128\nprint_info: n_embd_head_v    = 128\nprint_info: n_gqa            = 4\nprint_info: n_embd_k_gqa     = 1024\nprint_info: n_embd_v_gqa     = 1024\nprint_info: f_norm_eps       = 0.0e+00\nprint_info: f_norm_rms_eps   = 1.0e-05\nprint_info: f_clamp_kqv      = 0.0e+00\nprint_info: f_max_alibi_bias = 0.0e+00\nprint_info: f_logit_scale    = 0.0e+00\nprint_info: n_ff             = 14336\nprint_info: n_expert         = 0\nprint_info: n_expert_used    = 0\nprint_info: causal attn      = 1\nprint_info: pooling type     = 0\nprint_info: rope type        = 0\nprint_info: rope scaling     = linear\nprint_info: freq_base_train  = 1000000.0\nprint_info: freq_scale_train = 1\nprint_info: n_ctx_orig_yarn  = 32768\nprint_info: rope_finetuned   = unknown\nprint_info: ssm_d_conv       = 0\nprint_info: ssm_d_inner      = 0\nprint_info: ssm_d_state      = 0\nprint_info: ssm_dt_rank      = 0\nprint_info: ssm_dt_b_c_rms   = 0\nprint_info: model type       = 7B\nprint_info: model params     = 7.24 B\nprint_info: general.name     = mistralai_mistral-7b-instruct-v0.2\nprint_info: vocab type       = SPM\nprint_info: n_vocab          = 32000\nprint_info: n_merges         = 0\nprint_info: BOS token        = 1 '&lt;s&gt;'\nprint_info: EOS token        = 2 '&lt;/s&gt;'\nprint_info: UNK token        = 0 '&lt;unk&gt;'\nprint_info: PAD token        = 0 '&lt;unk&gt;'\nprint_info: LF token         = 13 '&lt;0x0A&gt;'\nprint_info: EOG token        = 2 '&lt;/s&gt;'\nprint_info: max token length = 48\nload_tensors: layer   0 assigned to device CPU\nload_tensors: layer   1 assigned to device CPU\nload_tensors: layer   2 assigned to device CPU\nload_tensors: layer   3 assigned to device CPU\nload_tensors: layer   4 assigned to device CPU\nload_tensors: layer   5 assigned to device CPU\nload_tensors: layer   6 assigned to device CPU\nload_tensors: layer   7 assigned to device CPU\nload_tensors: layer   8 assigned to device CPU\nload_tensors: layer   9 assigned to device CPU\nload_tensors: layer  10 assigned to device CPU\nload_tensors: layer  11 assigned to device CPU\nload_tensors: layer  12 assigned to device CPU\nload_tensors: layer  13 assigned to device CPU\nload_tensors: layer  14 assigned to device CPU\nload_tensors: layer  15 assigned to device CPU\nload_tensors: layer  16 assigned to device CPU\nload_tensors: layer  17 assigned to device CPU\nload_tensors: layer  18 assigned to device CPU\nload_tensors: layer  19 assigned to device CPU\nload_tensors: layer  20 assigned to device CPU\nload_tensors: layer  21 assigned to device CPU\nload_tensors: layer  22 assigned to device CPU\nload_tensors: layer  23 assigned to device CPU\nload_tensors: layer  24 assigned to device CPU\nload_tensors: layer  25 assigned to device CPU\nload_tensors: layer  26 assigned to device CPU\nload_tensors: layer  27 assigned to device CPU\nload_tensors: layer  28 assigned to device CPU\nload_tensors: layer  29 assigned to device CPU\nload_tensors: layer  30 assigned to device CPU\nload_tensors: layer  31 assigned to device CPU\nload_tensors: layer  32 assigned to device CPU\nload_tensors: tensor 'token_embd.weight' (q2_K) (and 290 others) cannot be used with preferred buffer type CPU_AARCH64, using CPU instead\nload_tensors:   CPU_Mapped model buffer size =  2939.57 MiB\nllama_init_from_model: n_seq_max     = 1\nllama_init_from_model: n_ctx         = 512\nllama_init_from_model: n_ctx_per_seq = 512\nllama_init_from_model: n_batch       = 512\nllama_init_from_model: n_ubatch      = 512\nllama_init_from_model: flash_attn    = 0\nllama_init_from_model: freq_base     = 1000000.0\nllama_init_from_model: freq_scale    = 1\nllama_init_from_model: n_ctx_per_seq (512) &lt; n_ctx_train (32768) -- the full capacity of the model will not be utilized\nllama_kv_cache_init: kv_size = 512, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 32, can_shift = 1\nllama_kv_cache_init: layer 0: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 1: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 2: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 3: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 4: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 5: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 6: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 7: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 8: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 9: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 10: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 11: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 12: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 13: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 14: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 15: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 16: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 17: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 18: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 19: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 20: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 21: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 22: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 23: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 24: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 25: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 26: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 27: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 28: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 29: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 30: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 31: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init:        CPU KV buffer size =    64.00 MiB\nllama_init_from_model: KV self size  =   64.00 MiB, K (f16):   32.00 MiB, V (f16):   32.00 MiB\nllama_init_from_model:        CPU  output buffer size =     0.12 MiB\nllama_init_from_model:        CPU compute buffer size =    81.01 MiB\nllama_init_from_model: graph nodes  = 1030\nllama_init_from_model: graph splits = 1\nCPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | \nModel metadata: {'general.name': 'mistralai_mistral-7b-instruct-v0.2', 'general.architecture': 'llama', 'llama.context_length': '32768', 'llama.rope.dimension_count': '128', 'llama.embedding_length': '4096', 'llama.block_count': '32', 'llama.feed_forward_length': '14336', 'llama.attention.head_count': '32', 'tokenizer.ggml.eos_token_id': '2', 'general.file_type': '10', 'llama.attention.head_count_kv': '8', 'llama.attention.layer_norm_rms_epsilon': '0.000010', 'llama.rope.freq_base': '1000000.000000', 'tokenizer.ggml.model': 'llama', 'general.quantization_version': '2', 'tokenizer.ggml.bos_token_id': '1', 'tokenizer.ggml.unknown_token_id': '0', 'tokenizer.ggml.padding_token_id': '0', 'tokenizer.ggml.add_bos_token': 'true', 'tokenizer.ggml.add_eos_token': 'false', 'tokenizer.chat_template': \"{{ bos_token }}{% for message in messages %}{% if (message['role'] == 'user') != (loop.index0 % 2 == 0) %}{{ raise_exception('Conversation roles must alternate user/assistant/user/assistant/...') }}{% endif %}{% if message['role'] == 'user' %}{{ '[INST] ' + message['content'] + ' [/INST]' }}{% elif message['role'] == 'assistant' %}{{ message['content'] + eos_token}}{% else %}{{ raise_exception('Only user and assistant roles are supported!') }}{% endif %}{% endfor %}\"}\nAvailable chat formats from metadata: chat_template.default\nGuessed chat format: mistral-instruct\n</pre> In\u00a0[3]: Copied! <pre># Example query\nresponse = llm.create_chat_completion(messages=[\n    {\"role\": \"user\", \"content\": \"How big is the sky?\"}\n])\n\n# Print the response\nprint(response)\n</pre>  # Example query response = llm.create_chat_completion(messages=[     {\"role\": \"user\", \"content\": \"How big is the sky?\"} ])  # Print the response print(response)  <pre>llama_perf_context_print:        load time =    7371.00 ms\nllama_perf_context_print: prompt eval time =    7370.60 ms /    14 tokens (  526.47 ms per token,     1.90 tokens per second)\nllama_perf_context_print:        eval time =   13733.07 ms /    95 runs   (  144.56 ms per token,     6.92 tokens per second)\nllama_perf_context_print:       total time =   21145.50 ms /   109 tokens\n</pre> <pre>{'id': 'chatcmpl-e5ccbbc1-1bc3-42ea-9a56-6d476fc149d7', 'object': 'chat.completion', 'created': 1739317290, 'model': '\\\\\\\\MYCLOUDEX2ULTRA\\\\research\\\\llm\\\\models/gguf/mistral-7b-instruct-v0.2.Q2_K.gguf', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': \" The size of the sky is not something that can be measured or quantified in the same way that we can measure and describe the size of physical objects. The sky is not a physical object with defined boundaries. It's the expanse above the earth, and it includes the atmosphere, the weather phenomena, and the stars, moon, and sun. It's essentially infinite in size, as it extends beyond our solar system and into the vastness of space.\"}, 'logprobs': None, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 14, 'completion_tokens': 95, 'total_tokens': 109}}\n</pre> In\u00a0[5]: Copied! <pre># Alternatively, load the model directly from Hugging Face\nllm = Llama.from_pretrained(\n    repo_id=\"TheBloke/Mistral-7B-Instruct-v0.2-GGUF\",\n    filename=\"mistral-7b-instruct-v0.2.Q2_K.gguf\",\n    cache_dir=CACHE_DIR\n)\n</pre> # Alternatively, load the model directly from Hugging Face llm = Llama.from_pretrained(     repo_id=\"TheBloke/Mistral-7B-Instruct-v0.2-GGUF\",     filename=\"mistral-7b-instruct-v0.2.Q2_K.gguf\",     cache_dir=CACHE_DIR )  <pre>llama_model_loader: loaded meta data with 24 key-value pairs and 291 tensors from \\\\MYCLOUDEX2ULTRA\\research\\llm\\models/gguf\\models--TheBloke--Mistral-7B-Instruct-v0.2-GGUF\\snapshots\\3a6fbf4a41a1d52e415a4958cde6856d34b2db93\\.\\mistral-7b-instruct-v0.2.Q2_K.gguf (version GGUF V3 (latest))\nllama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.\nllama_model_loader: - kv   0:                       general.architecture str              = llama\nllama_model_loader: - kv   1:                               general.name str              = mistralai_mistral-7b-instruct-v0.2\nllama_model_loader: - kv   2:                       llama.context_length u32              = 32768\nllama_model_loader: - kv   3:                     llama.embedding_length u32              = 4096\nllama_model_loader: - kv   4:                          llama.block_count u32              = 32\nllama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 14336\nllama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 128\nllama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32\nllama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 8\nllama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000010\nllama_model_loader: - kv  10:                       llama.rope.freq_base f32              = 1000000.000000\nllama_model_loader: - kv  11:                          general.file_type u32              = 10\nllama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama\nllama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,32000]   = [\"&lt;unk&gt;\", \"&lt;s&gt;\", \"&lt;/s&gt;\", \"&lt;0x00&gt;\", \"&lt;...\nllama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...\nllama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...\nllama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 1\nllama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 2\nllama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 0\nllama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0\nllama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true\nllama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false\nllama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% for message in mess...\nllama_model_loader: - kv  23:               general.quantization_version u32              = 2\nllama_model_loader: - type  f32:   65 tensors\nllama_model_loader: - type q2_K:   65 tensors\nllama_model_loader: - type q3_K:  160 tensors\nllama_model_loader: - type q6_K:    1 tensors\nprint_info: file format = GGUF V3 (latest)\nprint_info: file type   = Q2_K - Medium\nprint_info: file size   = 2.87 GiB (3.41 BPW) \ninit_tokenizer: initializing tokenizer for type 1\nload: control token:      2 '&lt;/s&gt;' is not marked as EOG\nload: control token:      1 '&lt;s&gt;' is not marked as EOG\nload: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect\nload: special tokens cache size = 3\nload: token to piece cache size = 0.1637 MB\nprint_info: arch             = llama\nprint_info: vocab_only       = 0\nprint_info: n_ctx_train      = 32768\nprint_info: n_embd           = 4096\nprint_info: n_layer          = 32\nprint_info: n_head           = 32\nprint_info: n_head_kv        = 8\nprint_info: n_rot            = 128\nprint_info: n_swa            = 0\nprint_info: n_embd_head_k    = 128\nprint_info: n_embd_head_v    = 128\nprint_info: n_gqa            = 4\nprint_info: n_embd_k_gqa     = 1024\nprint_info: n_embd_v_gqa     = 1024\nprint_info: f_norm_eps       = 0.0e+00\nprint_info: f_norm_rms_eps   = 1.0e-05\nprint_info: f_clamp_kqv      = 0.0e+00\nprint_info: f_max_alibi_bias = 0.0e+00\nprint_info: f_logit_scale    = 0.0e+00\nprint_info: n_ff             = 14336\nprint_info: n_expert         = 0\nprint_info: n_expert_used    = 0\nprint_info: causal attn      = 1\nprint_info: pooling type     = 0\nprint_info: rope type        = 0\nprint_info: rope scaling     = linear\nprint_info: freq_base_train  = 1000000.0\nprint_info: freq_scale_train = 1\nprint_info: n_ctx_orig_yarn  = 32768\nprint_info: rope_finetuned   = unknown\nprint_info: ssm_d_conv       = 0\nprint_info: ssm_d_inner      = 0\nprint_info: ssm_d_state      = 0\nprint_info: ssm_dt_rank      = 0\nprint_info: ssm_dt_b_c_rms   = 0\nprint_info: model type       = 7B\nprint_info: model params     = 7.24 B\nprint_info: general.name     = mistralai_mistral-7b-instruct-v0.2\nprint_info: vocab type       = SPM\nprint_info: n_vocab          = 32000\nprint_info: n_merges         = 0\nprint_info: BOS token        = 1 '&lt;s&gt;'\nprint_info: EOS token        = 2 '&lt;/s&gt;'\nprint_info: UNK token        = 0 '&lt;unk&gt;'\nprint_info: PAD token        = 0 '&lt;unk&gt;'\nprint_info: LF token         = 13 '&lt;0x0A&gt;'\nprint_info: EOG token        = 2 '&lt;/s&gt;'\nprint_info: max token length = 48\nload_tensors: layer   0 assigned to device CPU\nload_tensors: layer   1 assigned to device CPU\nload_tensors: layer   2 assigned to device CPU\nload_tensors: layer   3 assigned to device CPU\nload_tensors: layer   4 assigned to device CPU\nload_tensors: layer   5 assigned to device CPU\nload_tensors: layer   6 assigned to device CPU\nload_tensors: layer   7 assigned to device CPU\nload_tensors: layer   8 assigned to device CPU\nload_tensors: layer   9 assigned to device CPU\nload_tensors: layer  10 assigned to device CPU\nload_tensors: layer  11 assigned to device CPU\nload_tensors: layer  12 assigned to device CPU\nload_tensors: layer  13 assigned to device CPU\nload_tensors: layer  14 assigned to device CPU\nload_tensors: layer  15 assigned to device CPU\nload_tensors: layer  16 assigned to device CPU\nload_tensors: layer  17 assigned to device CPU\nload_tensors: layer  18 assigned to device CPU\nload_tensors: layer  19 assigned to device CPU\nload_tensors: layer  20 assigned to device CPU\nload_tensors: layer  21 assigned to device CPU\nload_tensors: layer  22 assigned to device CPU\nload_tensors: layer  23 assigned to device CPU\nload_tensors: layer  24 assigned to device CPU\nload_tensors: layer  25 assigned to device CPU\nload_tensors: layer  26 assigned to device CPU\nload_tensors: layer  27 assigned to device CPU\nload_tensors: layer  28 assigned to device CPU\nload_tensors: layer  29 assigned to device CPU\nload_tensors: layer  30 assigned to device CPU\nload_tensors: layer  31 assigned to device CPU\nload_tensors: layer  32 assigned to device CPU\nload_tensors: tensor 'token_embd.weight' (q2_K) (and 290 others) cannot be used with preferred buffer type CPU_AARCH64, using CPU instead\nload_tensors:   CPU_Mapped model buffer size =  2939.57 MiB\nllama_init_from_model: n_seq_max     = 1\nllama_init_from_model: n_ctx         = 512\nllama_init_from_model: n_ctx_per_seq = 512\nllama_init_from_model: n_batch       = 512\nllama_init_from_model: n_ubatch      = 512\nllama_init_from_model: flash_attn    = 0\nllama_init_from_model: freq_base     = 1000000.0\nllama_init_from_model: freq_scale    = 1\nllama_init_from_model: n_ctx_per_seq (512) &lt; n_ctx_train (32768) -- the full capacity of the model will not be utilized\nllama_kv_cache_init: kv_size = 512, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 32, can_shift = 1\nllama_kv_cache_init: layer 0: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 1: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 2: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 3: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 4: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 5: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 6: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 7: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 8: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 9: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 10: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 11: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 12: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 13: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 14: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 15: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 16: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 17: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 18: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 19: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 20: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 21: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 22: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 23: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 24: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 25: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 26: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 27: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 28: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 29: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 30: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init: layer 31: n_embd_k_gqa = 1024, n_embd_v_gqa = 1024\nllama_kv_cache_init:        CPU KV buffer size =    64.00 MiB\nllama_init_from_model: KV self size  =   64.00 MiB, K (f16):   32.00 MiB, V (f16):   32.00 MiB\nllama_init_from_model:        CPU  output buffer size =     0.12 MiB\nllama_init_from_model:        CPU compute buffer size =    81.01 MiB\nllama_init_from_model: graph nodes  = 1030\nllama_init_from_model: graph splits = 1\nCPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | \nModel metadata: {'general.name': 'mistralai_mistral-7b-instruct-v0.2', 'general.architecture': 'llama', 'llama.context_length': '32768', 'llama.rope.dimension_count': '128', 'llama.embedding_length': '4096', 'llama.block_count': '32', 'llama.feed_forward_length': '14336', 'llama.attention.head_count': '32', 'tokenizer.ggml.eos_token_id': '2', 'general.file_type': '10', 'llama.attention.head_count_kv': '8', 'llama.attention.layer_norm_rms_epsilon': '0.000010', 'llama.rope.freq_base': '1000000.000000', 'tokenizer.ggml.model': 'llama', 'general.quantization_version': '2', 'tokenizer.ggml.bos_token_id': '1', 'tokenizer.ggml.unknown_token_id': '0', 'tokenizer.ggml.padding_token_id': '0', 'tokenizer.ggml.add_bos_token': 'true', 'tokenizer.ggml.add_eos_token': 'false', 'tokenizer.chat_template': \"{{ bos_token }}{% for message in messages %}{% if (message['role'] == 'user') != (loop.index0 % 2 == 0) %}{{ raise_exception('Conversation roles must alternate user/assistant/user/assistant/...') }}{% endif %}{% if message['role'] == 'user' %}{{ '[INST] ' + message['content'] + ' [/INST]' }}{% elif message['role'] == 'assistant' %}{{ message['content'] + eos_token}}{% else %}{{ raise_exception('Only user and assistant roles are supported!') }}{% endif %}{% endfor %}\"}\nAvailable chat formats from metadata: chat_template.default\nGuessed chat format: mistral-instruct\n</pre> In\u00a0[6]: Copied! <pre>response = llm.create_chat_completion(\n    messages=[\n        {\"role\": \"user\", \"content\": \"How does a black hole work?\"}\n    ]\n)\nprint(response)\n</pre> response = llm.create_chat_completion(     messages=[         {\"role\": \"user\", \"content\": \"How does a black hole work?\"}     ] ) print(response) <pre>llama_perf_context_print:        load time =   15363.27 ms\nllama_perf_context_print: prompt eval time =   15362.99 ms /    15 tokens ( 1024.20 ms per token,     0.98 tokens per second)\nllama_perf_context_print:        eval time =   54128.24 ms /   388 runs   (  139.51 ms per token,     7.17 tokens per second)\nllama_perf_context_print:       total time =   69801.98 ms /   403 tokens\n</pre> <pre>{'id': 'chatcmpl-120bd07c-4187-4543-bb7f-83fc8e9b261e', 'object': 'chat.completion', 'created': 1739317680, 'model': '\\\\\\\\MYCLOUDEX2ULTRA\\\\research\\\\llm\\\\models/gguf\\\\models--TheBloke--Mistral-7B-Instruct-v0.2-GGUF\\\\snapshots\\\\3a6fbf4a41a1d52e415a4958cde6856d34b2db93\\\\.\\\\mistral-7b-instruct-v0.2.Q2_K.gguf', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': ' A black hole is a region in space where the gravitational pull is so strong that nothing, not even light, can escape. The gravity of a black hole is so intense because matter is squeezed into a very small space.\\n\\nBlack holes are formed when a massive star collapses under its own gravity at the end of its life. The core collapses in on itself, forming a singularity, which is a point of infinite density and zero volume. The singularity is surrounded by an event horizon, which is the boundary of the black hole from which no escape is possible.\\n\\nThe intense gravity of a black hole warps the fabric of spacetime around it, causing a significant distortion in the paths of nearby stars and planets. This distortion is known as a gravitational singularity or a black hole.\\n\\nThe event horizon of a black hole is not a perfect sphere but rather an irregularly shaped surface that is constantly changing as the black hole interacts with nearby matter. The event horizon is also not a sharp boundary but rather a gradual transition from the outside universe to the inside of the black hole.\\n\\nBlack holes are not completely black but rather emit a faint glow due to the energy released from the intense gravitational forces at work. This glow is known as Hawking radiation, named after the physicist Stephen Hawking, who first proposed the idea.\\n\\nBlack holes come in different sizes, from stellar-mass black holes, which can be as small as a few solar masses, to supermassive black holes, which can be millions or billions of solar masses. The supermassive black holes are thought to be at the center of most galaxies, including our own Milky Way.\\n\\nBlack holes are fascinating objects in the universe, and scientists continue to study them to learn more about the fundamental laws of physics and the nature of spacetime.'}, 'logprobs': None, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 15, 'completion_tokens': 388, 'total_tokens': 403}}\n</pre> In\u00a0[8]: Copied! <pre>import requests\nimport json\n\n# Define the API endpoint\nurl = \"http://localhost:8080/v1/completions\"\n\n# Define the payload\npayload = {\n    \"model\": \"mistral-7b-instruct-v0.2.Q4_K_M.gguf\",\n    \"prompt\": \"How big is the sky?\",\n    \"temperature\": 0.7,\n    \"max_tokens\": 50\n}\n\n# Send a POST request\nheaders = {\"Content-Type\": \"application/json\"}\ntry:\n    response = requests.post(url, json=payload, headers=headers)\n\n    if response.status_code == 200:\n        response_data = response.json()\n        choices = response_data.get(\"choices\", [])\n        if choices:\n            print(\"Response:\", choices[0].get(\"text\", \"\"))\n        else:\n            print(\"No choices found in the response.\")\n    else:\n        print(f\"Request failed with status code {response.status_code}: {response.text}\")\nexcept Exception as e:\n    print(f\"Error occurred: {e}\")\n</pre>  import requests import json  # Define the API endpoint url = \"http://localhost:8080/v1/completions\"  # Define the payload payload = {     \"model\": \"mistral-7b-instruct-v0.2.Q4_K_M.gguf\",     \"prompt\": \"How big is the sky?\",     \"temperature\": 0.7,     \"max_tokens\": 50 }  # Send a POST request headers = {\"Content-Type\": \"application/json\"} try:     response = requests.post(url, json=payload, headers=headers)      if response.status_code == 200:         response_data = response.json()         choices = response_data.get(\"choices\", [])         if choices:             print(\"Response:\", choices[0].get(\"text\", \"\"))         else:             print(\"No choices found in the response.\")     else:         print(f\"Request failed with status code {response.status_code}: {response.text}\") except Exception as e:     print(f\"Error occurred: {e}\")  <pre>Response: \n\nIn a philosophical or poetic sense, the sky is often considered infinite, as it's the vast expanse above us where stars, planets, and galaxies exist. In reality, however, the size of the observable sky is\n</pre>"},{"location":"tools/notebooks/llama-cpp.html#using-llamacpp-for-chat-completion","title":"Using Llama.cpp for Chat Completion\u00b6","text":""},{"location":"tools/notebooks/llama-cpp.html#installation-setup","title":"Installation &amp; Setup\u00b6","text":"<p>First, install the <code>llama-cpp-python</code> package if you haven't already:</p> <pre>pip install llama-cpp-python\n</pre> <p>Ensure you have downloaded a compatible model from Hugging Face.</p>"},{"location":"tools/notebooks/llama-cpp.html#running-inference-in-python","title":"Running Inference in Python\u00b6","text":""},{"location":"tools/notebooks/llama-cpp.html#downloading-and-using-gguf-models-with-llamafrom_pretrained","title":"Downloading and Using GGUF Models with Llama.from_pretrained\u00b6","text":""},{"location":"tools/notebooks/llama-cpp.html#serving-the-llm-as-a-rest-api","title":"Serving the LLM as a REST API\u00b6","text":"<p>To serve the model using <code>llama-server</code>, run the following command:</p> <pre>llama-server -m mistral-7b-instruct-v0.2.Q4_K_M.gguf --host 0.0.0.0 --port 8080\n</pre> <p>Then, use the following Python script to send requests to the API:</p>"}]}